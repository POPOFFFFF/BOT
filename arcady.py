import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import os

TOKEN = os.getenv("BOT_TOKEN")
DEFAULT_CHAT_ID = os.getenv("CHAT_ID")  # —Ç–µ–ø–µ—Ä—å —á–∞—Ç ID –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ALLOWED_USERS = [5228681344]  # —Ç–≤–æ–π Telegram ID

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π {chat_id: [(–≤—Ä–µ–º—è, —Ç–µ–∫—Å—Ç), ...]}
schedules = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def is_allowed(user_id):
    return user_id in ALLOWED_USERS

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if not is_allowed(message.from_user.id):
        return await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await message.answer("‚úÖ –ü—Ä–∏–≤–µ—Ç! –Ø –°–µ–∫—Ä–µ—Ç–∞—Ä—å –ê—Ä–∫–∞–¥–∏–π.\n–ù–∞–ø–∏—à–∏ /new —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.")

@dp.message(Command("new"))
async def cmd_add_schedule(message: types.Message):
    if not is_allowed(message.from_user.id):
        return
    await message.answer("–ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ß–ê–¢_ID HH:MM –¢–ï–ö–°–¢")

# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@dp.message(Command("rasp"))
async def cmd_rasp(message: types.Message):
    chat_id = message.chat.id

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ –±–µ—Å–µ–¥–µ
    if message.chat.type in ["group", "supergroup"]:
        if chat_id not in schedules:
            return await message.reply("‚ÑπÔ∏è –î–ª—è —ç—Ç–æ–π –±–µ—Å–µ–¥—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ.")
        
        text = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –±–µ—Å–µ–¥—ã:\n\n"
        for t, msg in schedules[chat_id]:
            text += f"‚è∞ {t} ‚Üí {msg}\n"
        await message.reply(text)
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ –ª–∏—á–∫–µ
    elif message.chat.type == "private":
        if not is_allowed(message.from_user.id):
            return
        if not schedules:
            return await message.answer("‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.")

        text = "üìã –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n"
        for cid, items in schedules.items():
            text += f"üÜî {cid}\n"
            for t, msg in items:
                text += f"  ‚è∞ {t} ‚Üí {msg}\n"
            text += "\n"
        await message.answer(text)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º chat_id –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ
@dp.message()
async def add_schedule_handler(message: types.Message):
    # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–∞—è –±–µ—Å–µ–¥–∞ ‚Äî –≤—ã–≤–æ–¥–∏–º chat_id
    if message.chat.type in ["group", "supergroup"]:
        await message.reply(f"‚ÑπÔ∏è Chat ID —ç—Ç–æ–π –±–µ—Å–µ–¥—ã: `{message.chat.id}`")
        return

    # –õ–∏—á–Ω–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –∞–¥–º–∏–Ω–æ–º
    if not is_allowed(message.from_user.id):
        return
    
    try:
        parts = message.text.split(" ", 2)

        # –ï—Å–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–ª–∏ —è–≤–Ω–æ, –±–µ—Ä—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        chat_id = int(parts[0]) if parts[0].startswith("-") else int(DEFAULT_CHAT_ID)
        time = parts[1]
        text = parts[2]

        hour, minute = map(int, time.split(":"))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        schedules.setdefault(chat_id, []).append((time, text))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        scheduler.add_job(
            bot.send_message,
            "cron",
            hour=hour,
            minute=minute,
            args=[chat_id, text],
        )

        await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n{chat_id} {time} ‚Üí {text}")

    except Exception:
        await message.answer("‚ö† –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: –ß–ê–¢_ID HH:MM –¢–ï–ö–°–¢")

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
