import asyncio
import os
import datetime
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone

TOKEN = os.getenv("BOT_TOKEN")
DEFAULT_CHAT_ID = os.getenv("CHAT_ID")
ALLOWED_USERS = [5228681344]

bot = Bot(token=TOKEN)
dp = Dispatcher()

# =========================
# –¢–∞–π–º–∑–æ–Ω–∞ –û–º—Å–∫ (UTC+6)
# =========================
TZ = timezone("Asia/Omsk")
scheduler = AsyncIOScheduler(timezone=TZ)

# =========================
# –†–∞–±–æ—Ç–∞ —Å –ë–î
# =========================
DB_PATH = "rasp.db"

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS rasp (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        day INTEGER,
        week_type INTEGER,
        text TEXT
    )
    """)
    conn.commit()
    conn.close()

def add_rasp(chat_id, day, week_type, text):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT INTO rasp (chat_id, day, week_type, text) VALUES (?, ?, ?, ?)",
                (chat_id, day, week_type, text))
    conn.commit()
    conn.close()

def get_rasp_for_day(chat_id, day, week_type):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT text FROM rasp WHERE chat_id=? AND day=? AND week_type=?", (chat_id, day, week_type))
    row = cur.fetchone()
    if row:
        conn.close()
        return row[0]
    cur.execute("SELECT text FROM rasp WHERE chat_id=? AND day=? AND week_type=0", (chat_id, day))
    row = cur.fetchone()
    conn.close()
    return row[0] if row else None

def get_all_rasp():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT chat_id, day, week_type, text FROM rasp")
    rows = cur.fetchall()
    conn.close()
    return rows

# =========================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
# =========================
def is_allowed(user_id):
    return user_id in ALLOWED_USERS

# =========================
# –ö–æ–º–∞–Ω–¥—ã
# =========================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if not is_allowed(message.from_user.id):
        return await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await message.answer(
        "‚úÖ –ü—Ä–∏–≤–µ—Ç! –Ø –°–µ–∫—Ä–µ—Ç–∞—Ä—å –ê—Ä–∫–∞–¥–∏–π.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/new ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)\n"
        "/addrasp ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ø–æ –¥–Ω—è–º)\n"
        "/rasp ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    )

@dp.message(Command("addrasp"))
async def cmd_add_rasp(message: types.Message):
    if not is_allowed(message.from_user.id):
        return
    
    try:
        parts = message.text.split(" ", 3)
        if len(parts) < 4:
            return await message.answer("‚ö† –§–æ—Ä–º–∞—Ç: /addrasp <–¥–µ–Ω—å> <—Ç–∏–ø –Ω–µ–¥–µ–ª–∏> <—Ç–µ–∫—Å—Ç>")

        day = int(parts[1])        # 1=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ..., 7=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        week_type = int(parts[2])  # 0=–≤—Å–µ–≥–¥–∞, 1=—á—ë—Ç–Ω–∞—è, 2=–Ω–µ—á—ë—Ç–Ω–∞—è
        text = parts[3].replace("\\n", "\n")
        chat_id = int(DEFAULT_CHAT_ID)

        add_rasp(chat_id, day, week_type, text)

        await message.answer(
            f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"–î–µ–Ω—å: {day}, –ù–µ–¥–µ–ª—è: {week_type}\n{text}"
        )

    except Exception as e:
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {e}\n–§–æ—Ä–º–∞—Ç: /addrasp <–¥–µ–Ω—å> <—Ç–∏–ø –Ω–µ–¥–µ–ª–∏> <—Ç–µ–∫—Å—Ç>")

@dp.message(Command("rasp"))
async def cmd_rasp(message: types.Message):
    chat_id = message.chat.id
    now = datetime.datetime.now(TZ)   # –≤—Å–µ–≥–¥–∞ –±–µ—Ä—ë–º –û–º—Å–∫–æ–µ –≤—Ä–µ–º—è
    week_number = now.isocalendar()[1]
    is_even_week = (week_number % 2 == 0)
    week_type = 1 if is_even_week else 2
    day = now.isoweekday()

    if message.chat.type in ["group", "supergroup"]:
        text = get_rasp_for_day(chat_id, day, week_type)
        if not text:
            return await message.reply("‚ÑπÔ∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.")
        await message.reply(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{text}")

    elif message.chat.type == "private":
        if not is_allowed(message.from_user.id):
            return
        rows = get_all_rasp()
        if not rows:
            return await message.answer("‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.")

        text = "üìã –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n"
        for cid, d, w, msg in rows:
            text += f"üÜî Chat {cid}\n–î–µ–Ω—å {d}, –ù–µ–¥–µ–ª—è {w}\n{msg}\n\n"
        await message.answer(text)

# =========================
# –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
# =========================
schedules = {}

@dp.message(Command("new"))
async def cmd_add_schedule(message: types.Message):
    if not is_allowed(message.from_user.id):
        return
    await message.answer("–ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ß–ê–¢_ID HH:MM –¢–ï–ö–°–¢")

@dp.message()
async def add_schedule_handler(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        await message.reply(f"‚ÑπÔ∏è Chat ID —ç—Ç–æ–π –±–µ—Å–µ–¥—ã: `{message.chat.id}`")
        return

    if not is_allowed(message.from_user.id):
        return
    
    try:
        parts = message.text.split(" ", 2)
        chat_id = int(parts[0]) if parts[0].startswith("-") else int(DEFAULT_CHAT_ID)
        time = parts[1]
        text = parts[2]

        hour, minute = map(int, time.split(":"))
        
        schedules.setdefault(chat_id, []).append((time, text))

        scheduler.add_job(
            bot.send_message,
            "cron",
            hour=hour,
            minute=minute,
            args=[chat_id, text],
        )

        await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n{chat_id} {time} ‚Üí {text}")

    except Exception:
        await message.answer("‚ö† –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: –ß–ê–¢_ID HH:MM –¢–ï–ö–°–¢")

# =========================
# Main
# =========================
async def main():
    init_db()
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
