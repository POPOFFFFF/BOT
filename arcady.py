import asyncio
import os
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

TOKEN = os.getenv("BOT_TOKEN")
DEFAULT_CHAT_ID = os.getenv("CHAT_ID")
ALLOWED_USERS = [5228681344]

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π {chat_id: [(–≤—Ä–µ–º—è, —Ç–µ–∫—Å—Ç), ...]}
schedules = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π {chat_id: {(day, week_type): text}}
# week_type: 0=–≤—Å–µ–≥–¥–∞, 1=—á—ë—Ç–Ω–∞—è, 2=–Ω–µ—á—ë—Ç–Ω–∞—è
rasps = {}

def is_allowed(user_id):
    return user_id in ALLOWED_USERS

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if not is_allowed(message.from_user.id):
        return await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await message.answer(
        "‚úÖ –ü—Ä–∏–≤–µ—Ç! –Ø –°–µ–∫—Ä–µ—Ç–∞—Ä—å –ê—Ä–∫–∞–¥–∏–π.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/new ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)\n"
        "/addrasp ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ø–æ –¥–Ω—è–º)\n"
        "/rasp ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    )

@dp.message(Command("new"))
async def cmd_add_schedule(message: types.Message):
    if not is_allowed(message.from_user.id):
        return
    await message.answer("–ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ß–ê–¢_ID HH:MM –¢–ï–ö–°–¢")

@dp.message(Command("addrasp"))
async def cmd_add_rasp(message: types.Message):
    if not is_allowed(message.from_user.id):
        return
    
    try:
        parts = message.text.split(" ", 3)
        if len(parts) < 4:
            return await message.answer("‚ö† –§–æ—Ä–º–∞—Ç: /addrasp <–¥–µ–Ω—å> <—Ç–∏–ø –Ω–µ–¥–µ–ª–∏> <—Ç–µ–∫—Å—Ç>")

        day = int(parts[1])  # 1=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ..., 7=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        week_type = int(parts[2])  # 0=–≤—Å–µ–≥–¥–∞, 1=—á—ë—Ç–Ω–∞—è, 2=–Ω–µ—á—ë—Ç–Ω–∞—è
        text = parts[3].replace("\\n", "\n")  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫
        chat_id = int(DEFAULT_CHAT_ID)

        rasps.setdefault(chat_id, {})[(day, week_type)] = text

        await message.answer(
            f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"–î–µ–Ω—å: {day}, –ù–µ–¥–µ–ª—è: {week_type}\n{text}"
        )

    except Exception as e:
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {e}\n–§–æ—Ä–º–∞—Ç: /addrasp <–¥–µ–Ω—å> <—Ç–∏–ø –Ω–µ–¥–µ–ª–∏> <—Ç–µ–∫—Å—Ç>")

@dp.message(Command("rasp"))
async def cmd_rasp(message: types.Message):
    chat_id = message.chat.id
    today = datetime.date.today()
    week_number = today.isocalendar()[1]
    is_even_week = (week_number % 2 == 0)  # True=—á—ë—Ç–Ω–∞—è, False=–Ω–µ—á—ë—Ç–Ω–∞—è
    week_type = 1 if is_even_week else 2
    day = today.isoweekday()  # 1=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ... 7=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ —á–∞—Ç–µ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    if message.chat.type in ["group", "supergroup"]:
        if chat_id not in rasps:
            return await message.reply("‚ÑπÔ∏è –î–ª—è —ç—Ç–æ–π –±–µ—Å–µ–¥—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ.")

        options = rasps[chat_id]
        text = None
        # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å+—Ç–∏–ø ‚Üí –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å+0 (–≤—Å–µ–≥–¥–∞)
        if (day, week_type) in options:
            text = options[(day, week_type)]
        elif (day, 0) in options:
            text = options[(day, 0)]

        if not text:
            return await message.reply("‚ÑπÔ∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.")
        await message.reply(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{text}")

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ –õ–° ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ
    elif message.chat.type == "private":
        if not is_allowed(message.from_user.id):
            return
        if not rasps:
            return await message.answer("‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.")

        text = "üìã –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n"
        for cid, items in rasps.items():
            text += f"üÜî Chat {cid}\n"
            for (d, w), msg in items.items():
                text += f"  –î–µ–Ω—å {d}, –ù–µ–¥–µ–ª—è {w}\n{msg}\n\n"
        await message.answer(text)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º chat_id –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ
@dp.message()
async def add_schedule_handler(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        await message.reply(f"‚ÑπÔ∏è Chat ID —ç—Ç–æ–π –±–µ—Å–µ–¥—ã: `{message.chat.id}`")
        return

    if not is_allowed(message.from_user.id):
        return
    
    try:
        parts = message.text.split(" ", 2)
        chat_id = int(parts[0]) if parts[0].startswith("-") else int(DEFAULT_CHAT_ID)
        time = parts[1]
        text = parts[2]

        hour, minute = map(int, time.split(":"))
        
        schedules.setdefault(chat_id, []).append((time, text))

        scheduler.add_job(
            bot.send_message,
            "cron",
            hour=hour,
            minute=minute,
            args=[chat_id, text],
        )

        await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n{chat_id} {time} ‚Üí {text}")

    except Exception:
        await message.answer("‚ö† –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: –ß–ê–¢_ID HH:MM –¢–ï–ö–°–¢")

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
