import asyncio
import os
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from zoneinfo import ZoneInfo
import aiomysql
import ssl

# ======================
# –ö–æ–Ω—Ñ–∏–≥
# ======================
TOKEN = os.getenv("BOT_TOKEN")
DEFAULT_CHAT_ID = int(os.getenv("CHAT_ID", "0"))
ALLOWED_USERS = [5228681344, 7620086223]

DB_HOST = os.getenv("DB_HOST")
DB_PORT = int(os.getenv("DB_PORT", "3306"))
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_NAME = os.getenv("DB_NAME")

# ======================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ======================
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
TZ = ZoneInfo("Asia/Omsk")
scheduler = AsyncIOScheduler(timezone=TZ)

ssl_ctx = ssl.create_default_context()
ssl_ctx.check_hostname = False
ssl_ctx.verify_mode = ssl.CERT_NONE

# ======================
# –†–∞–±–æ—Ç–∞ —Å –ë–î
# ======================
async def get_pool():
    return await aiomysql.create_pool(
        host=DB_HOST,
        port=DB_PORT,
        user=DB_USER,
        password=DB_PASSWORD,
        db=DB_NAME,
        ssl=ssl_ctx,
        autocommit=True
    )

async def init_db(pool):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS rasp (
                id INT AUTO_INCREMENT PRIMARY KEY,
                chat_id BIGINT,
                day INT,
                week_type INT,
                text TEXT
            )
            """)
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS week_setting (
                chat_id BIGINT PRIMARY KEY,
                week_type INT
            )
            """)

async def add_rasp(pool, chat_id, day, week_type, text):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute(
                "INSERT INTO rasp (chat_id, day, week_type, text) VALUES (%s, %s, %s, %s)",
                (chat_id, day, week_type, text)
            )

async def get_rasp_for_day(pool, chat_id, day, week_type):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute(
                "SELECT text FROM rasp WHERE chat_id=%s AND day=%s AND week_type=%s LIMIT 1",
                (chat_id, day, week_type)
            )
            row = await cur.fetchone()
            if row:
                return row[0]
            await cur.execute(
                "SELECT text FROM rasp WHERE chat_id=%s AND day=%s AND week_type=0 LIMIT 1",
                (chat_id, day)
            )
            row = await cur.fetchone()
            return row[0] if row else None

async def delete_rasp(pool, day=None):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            if day:
                await cur.execute("DELETE FROM rasp WHERE chat_id=%s AND day=%s", (DEFAULT_CHAT_ID, day))
            else:
                await cur.execute("DELETE FROM rasp WHERE chat_id=%s", (DEFAULT_CHAT_ID,))

# ======================
# –ß–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏
# ======================
async def set_week_type(pool, chat_id, week_type):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO week_setting (chat_id, week_type) 
                VALUES (%s, %s) 
                ON DUPLICATE KEY UPDATE week_type=%s
            """, (chat_id, week_type, week_type))

async def get_week_type(pool, chat_id):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT week_type FROM week_setting WHERE chat_id=%s", (chat_id,))
            row = await cur.fetchone()
            return row[0] if row else None

# ======================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# ======================
DAYS = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]

def format_rasp_message(day_num, week_type, text):
    day_name = DAYS[day_num-1]
    week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_type==1 else "—á–µ—Ç–Ω–∞—è"
    return f"üìÖ {day_name} | –ù–µ–¥–µ–ª—è: {week_name}\n\n{text}"

ZVONKI_DEFAULT = [
"1 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 08:30-09:15, 2 —É—Ä–æ–∫ 09:20-10:05", 
"2 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 10:15-11:00, 2 —É—Ä–æ–∫ 11:05-11:50", 
"3 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 12:40-13:25, 2 —É—Ä–æ–∫ 13:30-14:15", 
"4 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 14:25-15:10, 2 —É—Ä–æ–∫ 15:15-16:00",
"5 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 16:05-17:35", 
"6 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 17:45-19:15"
]

ZVONKI_SATURDAY = [
"1 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 08:30-09:15, 2 —É—Ä–æ–∫ 09:20-10:05", 
"2 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 10:15-11:00, 2 —É—Ä–æ–∫ 11:05-11:50", 
"3 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 12:00-12:45, 2 —É—Ä–æ–∫ 12:50-13:35", 
"4 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 13:45-15:15", 
"5 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 15:25-16:55", 
"6 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 17:05-18:50"
]

def get_zvonki(day):
    if day == 6:
        return "\n".join(ZVONKI_SATURDAY)
    else:
        return "\n".join(ZVONKI_DEFAULT)

# ======================
# –ö–Ω–æ–ø–∫–∏
# ======================
def main_menu(is_admin=False):
    buttons = [
        [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="menu_rasp")],
        [InlineKeyboardButton(text="‚è∞ –ó–≤–æ–Ω–∫–∏", callback_data="menu_zvonki")],
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton(text="‚öô –ê–¥–º–∏–Ω–∫–∞", callback_data="menu_admin")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ======================
# FSM –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
# ======================
class AddRaspState(StatesGroup):
    day = State()
    week_type = State()
    text = State()

class ClearRaspState(StatesGroup):
    day = State()

class SetChetState(StatesGroup):
    week_type = State()

# ======================
# –•–µ–Ω–¥–ª–µ—Ä—ã
# ======================
@dp.message(F.text == "/–∞—Ä–∫–∞–¥–∏–π")
async def cmd_arkadiy(message: types.Message):
    is_admin = message.from_user.id in ALLOWED_USERS
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu(is_admin))

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data.startswith("menu_"))
async def menu_handler(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data
    if action == "menu_rasp":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=day, callback_data=f"rasp_day_{i+1}")]
                             for i, day in enumerate(DAYS)]
            + [[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]]
        )
        await callback.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=kb)


    elif action == "menu_zvonki":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìÖ –ë—É–¥–Ω–∏–µ –¥–Ω–∏", callback_data="zvonki_weekday")],
                [InlineKeyboardButton(text="üìÖ –°—É–±–±–æ—Ç–∞", callback_data="zvonki_saturday")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
            ]
        )


        await callback.message.edit_text("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=kb)

    elif action == "menu_admin":
        if callback.from_user.id not in ALLOWED_USERS:
            return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_add")],
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_clear")],
            [InlineKeyboardButton(text="üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ç–Ω–æ—Å—Ç—å", callback_data="admin_setchet")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ])

        await callback.message.edit_text("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

    elif action == "menu_back":
        # –û—á–∏—Å—Ç–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM (–µ—Å–ª–∏ –∞–¥–º–∏–Ω –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)
        try:
            await state.clear()
        except Exception:
            pass

        is_admin = callback.from_user.id in ALLOWED_USERS

        # –ü–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–æ—Ç—É).
        # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø—Ä–æ–±—É–µ–º edit_text, –∞ –µ—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        try:
            await callback.message.delete()
        except Exception as e:
            # –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            try:
                await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu(is_admin))
            except Exception:
                # –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(chat_id=callback.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu(is_admin))
        else:
            # –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —É—Å–ø–µ—à–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            await bot.send_message(chat_id=callback.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu(is_admin))

        await callback.answer()




# ======================
# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
# ======================

@dp.callback_query(F.data.startswith("rasp_day_"))
async def rasp_day_handler(callback: types.CallbackQuery):
    day = int(callback.data.split("_")[2])
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –õ—é–±–∞—è", callback_data=f"rasp_show_{day}_0")],
            [InlineKeyboardButton(text="1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–∞—è", callback_data=f"rasp_show_{day}_1")],
            [InlineKeyboardButton(text="2Ô∏è‚É£ –ß–µ—Ç–Ω–∞—è", callback_data=f"rasp_show_{day}_2")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_rasp")]
        ]
    )
    await callback.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏:", reply_markup=kb)
    await callback.answer()

@dp.callback_query(F.data.startswith("rasp_show_"))
async def rasp_show_handler(callback: types.CallbackQuery):
    _, _, day, week_type = callback.data.split("_")
    day = int(day)
    week_type = int(week_type)

    if week_type == 0:  # –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ "–ª—é–±–∞—è"
        now = datetime.datetime.now(TZ)
        week_type = await get_week_type(pool, callback.message.chat.id)
        if not week_type:
            week_type = 1 if now.isocalendar()[1] % 2 else 2

    text = await get_rasp_for_day(pool, DEFAULT_CHAT_ID, day, week_type)
    if not text:
        await callback.answer("‚Ñπ –ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)
    else:
        await callback.message.edit_text(format_rasp_message(day, week_type, text))

    await callback.answer()


@dp.callback_query(F.data.startswith("rasp_"))
async def rasp_handler(callback: types.CallbackQuery):
    day = int(callback.data.split("_")[1])
    now = datetime.datetime.now(TZ)
    week_type = await get_week_type(pool, callback.message.chat.id)
    if not week_type:
        week_type = 1 if now.isocalendar()[1] % 2 else 2
    text = await get_rasp_for_day(pool, DEFAULT_CHAT_ID, day, week_type)
    if not text:
        await callback.answer("‚Ñπ –ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)
    else:
        await callback.message.edit_text(format_rasp_message(day, week_type, text))
    await callback.answer()

# ======================
# –ó–≤–æ–Ω–∫–∏
# ======================
@dp.callback_query(F.data.startswith("zvonki_"))
async def zvonki_handler(callback: types.CallbackQuery):
    action = callback.data

    if action == "zvonki_weekday":
        schedule = "\n".join(ZVONKI_DEFAULT)
        await callback.message.edit_text(f"üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ (–±—É–¥–Ω–∏–µ –¥–Ω–∏):\n{schedule}")

    elif action == "zvonki_saturday":
        schedule = "\n".join(ZVONKI_SATURDAY)
        await callback.message.edit_text(f"üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ (—Å—É–±–±–æ—Ç–∞):\n{schedule}")

    await callback.answer()

# ======================
# –ê–¥–º–∏–Ω–∫–∞ ‚Äî –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
# ======================
@dp.callback_query(F.data == "admin_add")
async def admin_add_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (1-7):")
    await state.set_state(AddRaspState.day)
    await callback.answer()

@dp.message(AddRaspState.day)
async def add_rasp_day(message: types.Message, state: FSMContext):
    try:
        day = int(message.text)
        if not 1 <= day <= 7:
            raise ValueError
        await state.update_data(day=day)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ (0 - –ª—é–±–∞—è, 1 - –Ω–µ—á–µ—Ç–Ω–∞—è, 2 - —á–µ—Ç–Ω–∞—è):")
        await state.set_state(AddRaspState.week_type)
    except ValueError:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7.")

@dp.message(AddRaspState.week_type)
async def add_rasp_week_type(message: types.Message, state: FSMContext):
    try:
        week_type = int(message.text)
        if week_type not in [0, 1, 2]:
            raise ValueError
        await state.update_data(week_type=week_type)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
        await state.set_state(AddRaspState.text)
    except ValueError:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ 0, 1 –∏–ª–∏ 2.")

@dp.message(AddRaspState.text)
async def add_rasp_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = message.text.replace("\\n", "\n")
    await add_rasp(pool, DEFAULT_CHAT_ID, data["day"], data["week_type"], text)
    await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    await state.clear()

# ======================
# –ê–¥–º–∏–Ω–∫–∞ ‚Äî –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
# ======================
@dp.callback_query(F.data == "admin_clear")
async def admin_clear_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (1-7) –∏–ª–∏ 0 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö:")
    await state.set_state(ClearRaspState.day)
    await callback.answer()

@dp.message(ClearRaspState.day)
async def clear_rasp_day(message: types.Message, state: FSMContext):
    try:
        day = int(message.text)
        if day == 0:
            await delete_rasp(pool)
        elif 1 <= day <= 7:
            await delete_rasp(pool, day)
        else:
            raise ValueError
        await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
        await state.clear()
    except ValueError:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ 0 –∏–ª–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7.")

# ======================
# –ê–¥–º–∏–Ω–∫–∞ ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ç–Ω–æ—Å—Ç—å
# ======================
@dp.callback_query(F.data == "admin_setchet")
async def admin_setchet_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —á–µ—Ç–Ω–æ—Å—Ç—å (1 - –Ω–µ—á–µ—Ç–Ω–∞—è, 2 - —á–µ—Ç–Ω–∞—è):")
    await state.set_state(SetChetState.week_type)
    await callback.answer()

@dp.message(SetChetState.week_type)
async def setchet_handler(message: types.Message, state: FSMContext):
    try:
        week_type = int(message.text)
        if week_type not in [1, 2]:
            raise ValueError
        await set_week_type(pool, message.chat.id, week_type)
        await message.answer(f"‚úÖ –ß–µ—Ç–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {week_type} ({'–Ω–µ—á–µ—Ç–Ω–∞—è' if week_type==1 else '—á–µ—Ç–Ω–∞—è'})")
        await state.clear()
    except ValueError:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")

# ======================
# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
# ======================
async def send_today_rasp():
    now = datetime.datetime.now(TZ)
    day = now.isoweekday()
    week_number = now.isocalendar()[1]
    week_type = 1 if week_number % 2 else 2
    text = await get_rasp_for_day(pool, DEFAULT_CHAT_ID, day, week_type)
    if text:
        msg = format_rasp_message(day, week_type, text)
        await bot.send_message(DEFAULT_CHAT_ID, msg)

scheduler.add_job(send_today_rasp, CronTrigger(hour=1, minute=0))
scheduler.add_job(send_today_rasp, CronTrigger(hour=14, minute=0))

# ======================
# Main
# ======================
async def main():
    global pool
    pool = await get_pool()
    await init_db(pool)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
