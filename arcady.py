import asyncio
import os
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ChatPermissions
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from zoneinfo import ZoneInfo
from typing import List, Tuple, Dict
import aiomysql
import random
import ssl
import re
import aiohttp
import io
from bs4 import BeautifulSoup

TOKEN = os.getenv("BOT_TOKEN")
CHAT_IDS_STR = os.getenv("CHAT_ID", "")
ALLOWED_CHAT_IDS = [int(x.strip()) for x in CHAT_IDS_STR.split(",") if x.strip()]
DEFAULT_CHAT_ID = ALLOWED_CHAT_IDS[0] if ALLOWED_CHAT_IDS else 0
ALLOWED_USERS = [5228681344, 7620086223]
SPECIAL_USER_ID = []
DB_HOST = os.getenv("DB_HOST")
DB_PORT = int(os.getenv("DB_PORT", "3306"))
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_NAME = os.getenv("DB_NAME")
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
TZ = ZoneInfo("Asia/Omsk")
scheduler = AsyncIOScheduler(timezone=TZ)
ssl_ctx = ssl.create_default_context()
ssl_ctx.check_hostname = False
ssl_ctx.verify_mode = ssl.CERT_NONE


def is_allowed_chat(chat_id: int) -> bool:
    return chat_id in ALLOWED_CHAT_IDS

async def get_pool():
    return await aiomysql.create_pool(
        host=DB_HOST,
        port=DB_PORT,
        user=DB_USER,
        password=DB_PASSWORD,
        db=DB_NAME,
        ssl=ssl_ctx,
        autocommit=True
    )
async def init_db(pool):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS rasp (
                id INT AUTO_INCREMENT PRIMARY KEY,
                chat_id BIGINT,
                day INT,
                week_type INT,
                text TEXT
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS nicknames (
                user_id BIGINT PRIMARY KEY,
                nickname VARCHAR(255)
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS publish_times (
                id INT AUTO_INCREMENT PRIMARY KEY,
                hour INT NOT NULL,
                minute INT NOT NULL
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS anekdoty (
                id INT AUTO_INCREMENT PRIMARY KEY,
                text TEXT NOT NULL
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS subjects (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                rK BOOLEAN DEFAULT FALSE
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS special_users (
                user_id BIGINT PRIMARY KEY,
                signature VARCHAR(255) NOT NULL
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS rasp_detailed (
                id INT AUTO_INCREMENT PRIMARY KEY,
                chat_id BIGINT,
                day INT,
                week_type INT,
                pair_number INT,
                subject_id INT,
                cabinet VARCHAR(50),
                FOREIGN KEY (subject_id) REFERENCES subjects(id)
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS current_week_type (
                chat_id BIGINT PRIMARY KEY,
                week_type INT NOT NULL DEFAULT 1,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS teacher_messages (
                id INT AUTO_INCREMENT PRIMARY KEY,
                message_id BIGINT,
                from_user_id BIGINT,
                signature VARCHAR(255),
                message_text TEXT,
                message_type VARCHAR(50),
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )""")
            await conn.commit()
async def ensure_columns(pool):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SHOW COLUMNS FROM week_setting LIKE 'set_at'")
            row = await cur.fetchone()
            if not row:
                await cur.execute("ALTER TABLE week_setting ADD COLUMN set_at DATE")
async def set_nickname(pool, user_id: int, nickname: str):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO nicknames (user_id, nickname) 
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE nickname=%s
            """, (user_id, nickname, nickname))
async def get_nickname(pool, user_id: int) -> str | None:
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT nickname FROM nicknames WHERE user_id=%s", (user_id,))
            row = await cur.fetchone()
            return row[0] if row else None
async def add_publish_time(pool, hour: int, minute: int):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute(
                "INSERT INTO publish_times (hour, minute) VALUES (%s, %s)", 
                (hour, minute)
            )
            await conn.commit() 
async def get_publish_times(pool):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT id, hour, minute FROM publish_times ORDER BY hour, minute")
            rows = await cur.fetchall()
            return rows 
async def delete_publish_time(pool, pid: int):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("DELETE FROM publish_times WHERE id=%s", (pid,))
async def clear_publish_times(pool):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("DELETE FROM publish_times")
async def set_week_type(pool, chat_id, week_type):
    today = datetime.datetime.now(TZ).date()
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO week_setting (chat_id, week_type, set_at)
                VALUES (%s, %s, %s)
                ON DUPLICATE KEY UPDATE week_type=%s, set_at=%s
            """, (chat_id, week_type, today, week_type, today))

async def load_special_users(pool):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global SPECIAL_USER_ID
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT user_id FROM special_users")
            rows = await cur.fetchall()
            SPECIAL_USER_ID = [row[0] for row in rows]
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(SPECIAL_USER_ID)} —Å–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {SPECIAL_USER_ID}")




@dp.message(Command("–∞–∫–∏–∫", "–∞–∫ick"))
async def cmd_admin_kick(message: types.Message):

    if not is_allowed_chat(message.chat.id):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
    if message.chat.type not in ["group", "supergroup"]:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –≤ —á–∞—Ç–µ
    try:
        bot_member = await bot.get_chat_member(message.chat.id, bot.id)
        if bot_member.status not in ["administrator", "creator"]:
            await message.answer("‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ")
            return
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–ª–∞–π
    if not message.reply_to_message:
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /–∞–∫–∏–∫")
        return
    
    try:
        user_id = message.reply_to_message.from_user.id
        user_to_kick = message.reply_to_message.from_user
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –∫–∏–∫ —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if user_id == message.from_user.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
            return
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –∫–∏–∫ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ ALLOWED_USERS
        if user_id in ALLOWED_USERS:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –∫–∏–∫–Ω—É—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞
        try:
            target_member = await bot.get_chat_member(message.chat.id, user_id)
            if target_member.status == "creator":
                await message.answer("‚ùå –ù–µ –º–æ–≥—É –∫–∏–∫–Ω—É—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞")
                return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —Ü–µ–ª–∏: {e}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∏–∫
        await bot.ban_chat_member(message.chat.id, user_id)
        await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_kick.first_name} (@{user_to_kick.username or '–Ω–µ—Ç'}) –±—ã–ª –∫–∏–∫–Ω—É—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è
        await asyncio.sleep(30)
        await bot.unban_chat_member(message.chat.id, user_id)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ: {e}")

@dp.message(Command("–∞–º—É—Ç", "–∞mut"))
async def cmd_admin_mute(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not is_allowed_chat(message.chat.id):
        return

    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
    if message.chat.type not in ["group", "supergroup"]:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –≤ —á–∞—Ç–µ
    try:
        bot_member = await bot.get_chat_member(message.chat.id, bot.id)
        if bot_member.status not in ["administrator", "creator"]:
            await message.answer("‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ")
            return
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = message.text.split()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(args) < 3:
        await message.answer(
            "‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "‚Ä¢ /–∞–º—É—Ç 10 —Å–µ–∫—É–Ω–¥ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "‚Ä¢ /–∞–º—É—Ç 2 —á–∞—Å–∞ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "‚Ä¢ /–∞–º—É—Ç 30 –º–∏–Ω—É—Ç (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "‚Ä¢ /–∞–º—É—Ç 1 –¥–µ–Ω—å (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã: —Å–µ–∫—É–Ω–¥—ã, –º–∏–Ω—É—Ç—ã, —á–∞—Å—ã, –¥–Ω–∏"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–ª–∞–π
    if not message.reply_to_message:
        await message.answer("‚ö† –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å")
        return
    
    try:
        user_id = message.reply_to_message.from_user.id
        user_to_mute = message.reply_to_message.from_user
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –º—É—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if user_id == message.from_user.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
            return
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –º—É—Ç –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ ALLOWED_USERS
        if user_id in ALLOWED_USERS:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –∑–∞–º—É—Ç–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞
        try:
            target_member = await bot.get_chat_member(message.chat.id, user_id)
            if target_member.status == "creator":
                await message.answer("‚ùå –ù–µ –º–æ–≥—É –∑–∞–º—É—Ç–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞")
                return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —Ü–µ–ª–∏: {e}")
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è - –±–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π –∏ —Ç—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
        number_str = args[1]
        unit = args[2].lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–æ –≤–∞–ª–∏–¥–Ω–æ
        try:
            number = int(number_str)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: /–∞–º—É—Ç 10 —Å–µ–∫—É–Ω–¥")
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
        duration = 0
        if unit in ['—Å–µ–∫—É–Ω–¥', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫', '—Å']:
            duration = number
        elif unit in ['–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç—É', '–º–∏–Ω', '–º']:
            duration = number * 60
        elif unit in ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤', '—á']:
            duration = number * 3600
        elif unit in ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π', '–¥–Ω']:
            duration = number * 86400
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å–µ–∫—É–Ω–¥—ã, –º–∏–Ω—É—Ç—ã, —á–∞—Å—ã, –¥–Ω–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (30 –¥–Ω–µ–π)
        if duration > 2592000:  # 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞ - 30 –¥–Ω–µ–π")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (10 —Å–µ–∫—É–Ω–¥)
        if duration < 10:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞ - 10 —Å–µ–∫—É–Ω–¥")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É—Ç
        until_date = datetime.datetime.now() + datetime.timedelta(seconds=duration)
        
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=types.ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False,
                can_send_polls=False,
                can_invite_users=False,
                can_pin_messages=False,
                can_change_info=False
            ),
            until_date=until_date
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        time_display = format_duration(duration)
        await message.answer(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_mute.first_name} (@{user_to_mute.username or '–Ω–µ—Ç'}) –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {time_display} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")

@dp.message(Command("–∞—Ä–∞–∑–º—É—Ç", "–∞unmute"))
async def cmd_admin_unmute(message: types.Message):

    if not is_allowed_chat(message.chat.id):
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
    if message.chat.type not in ["group", "supergroup"]:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –≤ —á–∞—Ç–µ
    try:
        bot_member = await bot.get_chat_member(message.chat.id, bot.id)
        if bot_member.status not in ["administrator", "creator"]:
            await message.answer("‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ")
            return
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–ª–∞–π
    if not message.reply_to_message:
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /–∞—Ä–∞–∑–º—É—Ç")
        return
    
    try:
        user_id = message.reply_to_message.from_user.id
        user_to_unmute = message.reply_to_message.from_user
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=types.ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
                can_send_polls=True,
                can_invite_users=True,
                can_pin_messages=False,
                can_change_info=False
            )
        )
        
        await message.answer(f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_unmute.first_name} (@{user_to_unmute.username or '–Ω–µ—Ç'}) —Ä–∞–∑–º—å—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}")

@dp.message(Command("–∞—Å–ø–∞–º", "–∞spam"))
async def cmd_admin_spam_clean(message: types.Message):
    if not is_allowed_chat(message.chat.id):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
    if message.chat.type not in ["group", "supergroup"]:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–ª–∞–π
    if not message.reply_to_message:
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /–∞—Å–ø–∞–º")
        return
    
    try:
        spam_user_id = message.reply_to_message.from_user.id
        spam_user = message.reply_to_message.from_user
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        await message.delete()
        
        # –£–¥–∞–ª—è–µ–º —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.reply_to_message.delete()
        
        # –ö–∏–∫–∞–µ–º —Å–ø–∞–º–µ—Ä–∞
        await bot.ban_chat_member(message.chat.id, spam_user_id)
        
        await message.answer(f"üßπ –°–ø–∞–º –æ—Ç {spam_user.first_name} (@{spam_user.username or '–Ω–µ—Ç'}) —É–¥–∞–ª–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç")
        
        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
        await asyncio.sleep(60)
        await bot.unban_chat_member(message.chat.id, spam_user_id)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∞–º–∞: {e}")


def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º"""
    if seconds < 60:
        if seconds == 1:
            return "1 —Å–µ–∫—É–Ω–¥—É"
        elif 2 <= seconds <= 4:
            return f"{seconds} —Å–µ–∫—É–Ω–¥—ã"
        else:
            return f"{seconds} —Å–µ–∫—É–Ω–¥"
    elif seconds < 3600:
        minutes = seconds // 60
        if minutes == 1:
            return "1 –º–∏–Ω—É—Ç—É"
        elif 2 <= minutes <= 4:
            return f"{minutes} –º–∏–Ω—É—Ç—ã"
        else:
            return f"{minutes} –º–∏–Ω—É—Ç"
    elif seconds < 86400:
        hours = seconds // 3600
        if hours == 1:
            return "1 —á–∞—Å"
        elif 2 <= hours <= 4:
            return f"{hours} —á–∞—Å–∞"
        else:
            return f"{hours} —á–∞—Å–æ–≤"
    else:
        days = seconds // 86400
        if days == 1:
            return "1 –¥–µ–Ω—å"
        elif 2 <= days <= 4:
            return f"{days} –¥–Ω—è"
        else:
            return f"{days} –¥–Ω–µ–π"


async def get_current_week_type(pool, chat_id: int) -> int:
    """–ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —á–µ—Ç–Ω–æ—Å—Ç—å –∏–∑ –±–∞–∑—ã"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT week_type FROM current_week_type WHERE chat_id=%s", (chat_id,))
            row = await cur.fetchone()
            if row:
                return row[0]
            else:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ—á–µ—Ç–Ω—É—é –Ω–µ–¥–µ–ª—é
                await cur.execute("INSERT INTO current_week_type (chat_id, week_type) VALUES (%s, %s)", (chat_id, 1))
                return 1

async def set_current_week_type(pool, chat_id: int, week_type: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO current_week_type (chat_id, week_type) 
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE week_type=%s, updated_at=CURRENT_TIMESTAMP
            """, (chat_id, week_type, week_type))


async def save_teacher_message(pool, message_id: int, from_user_id: int, 
                              signature: str, message_text: str, message_type: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —á–∞—Ç—É)"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO teacher_messages (message_id, from_user_id, signature, message_text, message_type)
                VALUES (%s, %s, %s, %s, %s)
            """, (message_id, from_user_id, signature, message_text, message_type))

async def get_teacher_messages(pool, offset: int = 0, limit: int = 10) -> List[Tuple]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–≤—Å–µ —á–∞—Ç—ã)"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                SELECT id, message_id, signature, message_text, message_type, created_at
                FROM teacher_messages 
                ORDER BY created_at DESC 
                LIMIT %s OFFSET %s
            """, (limit, offset))
            return await cur.fetchall()

async def get_teacher_messages_count(pool) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT COUNT(*) FROM teacher_messages")
            result = await cur.fetchone()
            return result[0] if result else 0




DAYS = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]

def format_rasp_message(day_num, week_type, text):
    day_name = DAYS[day_num - 1]
    week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_type == 1 else "—á–µ—Ç–Ω–∞—è"
    return f"üìÖ {day_name} | –ù–µ–¥–µ–ª—è: {week_name}\n\n{text}"

ZVONKI_DEFAULT = [
    "1 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 08:30-09:15, 2 —É—Ä–æ–∫ 09:20-10:05",
    "2 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 10:15-11:00, 2 —É—Ä–æ–∫ 11:05-11:50",
    "3 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 12:40-13:25, 2 —É—Ä–æ–∫ 13:30-14:15",
    "4 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 14:25-15:10, 2 —É—Ä–æ–∫ 15:15-16:00",
    "5 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 16:05-17:35",
    "6 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 17:45-19:15"
]

ZVONKI_SATURDAY = [
    "1 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 08:30-09:15, 2 —É—Ä–æ–∫ 09:20-10:05",
    "2 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 10:15-11:00, 2 —É—Ä–æ–∫ 11:05-11:50",
    "3 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 12:00-12:45, 2 —É—Ä–æ–∫ 12:50-13:35",
    "4 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 13:45-15:15",
    "5 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 15:25-16:55",
    "6 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 17:05-18:50"
]

class ViewMessagesState(StatesGroup):
    browsing = State()
class SendMessageState(StatesGroup):
    active = State()
class SetChetState(StatesGroup):
    week_type = State()
class AddSubjectState(StatesGroup):
    name = State()
    type_choice = State()
    cabinet = State()
class DeleteTeacherMessageState(StatesGroup):
    message_id = State()
class DeleteSubjectState(StatesGroup):
    subject_choice = State()

class AddSpecialUserState(StatesGroup):
    user_id = State()
    signature = State()

class SetPublishTimeState(StatesGroup):
    time = State()  

class AddLessonState(StatesGroup):
    subject = State()
    week_type = State()
    day = State()
    pair_number = State()
    cabinet = State()

class SetCabinetState(StatesGroup):
    week_type = State()
    day = State()
    lesson = State()
    cabinet = State()
    pair_num = State()

class SetCabinetState(StatesGroup):
    week_type = State()
    day = State()
    subject = State()
    pair_number = State()
    cabinet = State()
class ClearPairState(StatesGroup):
    week_type = State()
    day = State()
    pair_number = State()
class ForwardModeState(StatesGroup):
    active = State()


async def get_special_user_signature(pool, user_id: int) -> str | None:
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT signature FROM special_users WHERE user_id=%s", (user_id,))
            row = await cur.fetchone()
            return row[0] if row else None

async def set_special_user_signature(pool, user_id: int, signature: str):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO special_users (user_id, signature) 
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE signature=%s
            """, (user_id, signature, signature))

async def delete_teacher_message(pool, message_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ ID (–∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤)"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("DELETE FROM teacher_messages WHERE id = %s", (message_id,))
            await conn.commit()
            return cur.rowcount > 0

@dp.callback_query(F.data == "send_message_chat")
async def send_message_chat_start(callback: types.CallbackQuery, state: FSMContext):
    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return
    if callback.from_user.id not in SPECIAL_USER_ID or callback.message.chat.type != "private":
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    signature = await get_special_user_signature(pool, callback.from_user.id)
    if not signature:
        signature = "–ü–†–û–í–ï–†–ö–ê"  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    await state.update_data(
        signature=signature,
        start_time=datetime.datetime.now(TZ)
    )
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–∞ 180 —Å–µ–∫—É–Ω–¥
    await state.set_state(SendMessageState.active)
    
    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ —Ä–µ–∂–∏–º–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É", callback_data="stop_forward_mode")]
    ])
    
    await callback.message.edit_text(
        f"‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 180 —Å–µ–∫—É–Ω–¥!\n"
        f"üìù –ü–æ–¥–ø–∏—Å—å: {signature}\n"
        f"‚è∞ –í—Ä–µ–º—è –¥–æ: {(datetime.datetime.now(TZ) + datetime.timedelta(seconds=180)).strftime('%H:%M:%S')}\n\n"
        f"–í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –≤ –±–µ—Å–µ–¥—É. –†–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã.",
        reply_markup=kb
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    asyncio.create_task(disable_forward_mode_after_timeout(callback.from_user.id, state))
    
    await callback.answer()

async def send_message_to_all_chats(message_text: str, photo=None, document=None, video=None, audio=None, voice=None, sticker=None, caption: str = ""):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã"""
    for chat_id in ALLOWED_CHAT_IDS:
        try:
            if photo:
                await bot.send_photo(chat_id, photo, caption=message_text + caption)
            elif document:
                await bot.send_document(chat_id, document, caption=message_text + caption)
            elif video:
                await bot.send_video(chat_id, video, caption=message_text + caption)
            elif audio:
                await bot.send_audio(chat_id, audio, caption=message_text + caption)
            elif voice:
                await bot.send_voice(chat_id, voice, caption=message_text + caption)
            elif sticker:
                await bot.send_sticker(chat_id, sticker)
            else:
                await bot.send_message(chat_id, message_text + caption)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

async def save_teacher_message_to_all_chats(message_ids: dict, from_user_id: int, signature: str, message_text: str, message_type: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤"""
    for chat_id, message_id in message_ids.items():
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    INSERT INTO teacher_messages (chat_id, message_id, from_user_id, signature, message_text, message_type)
                    VALUES (%s, %s, %s, %s, %s, %s)
                """, (chat_id, message_id, from_user_id, signature, message_text, message_type))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
@dp.callback_query(F.data == "stop_forward_mode")
async def stop_forward_mode_handler(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == SendMessageState.active.state:
        await state.clear()
        await callback.message.edit_text("‚èπÔ∏è –†–µ–∂–∏–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    else:
        await callback.answer("‚ùå –†–µ–∂–∏–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω", show_alert=True)
    await callback.answer()

@dp.message(SendMessageState.active)
async def process_forward_message(message: types.Message, state: FSMContext):
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /
    if message.text and message.text.startswith('/'):
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")
        return
    
    data = await state.get_data()
    signature = data.get("signature", "–ü–†–û–í–ï–†–ö–ê")
    
    prefix = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {signature}: "

    try:
        message_text = ""
        message_type = "text"
        sent_message_ids = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        if message.text:
            message_text = message.text
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
            for chat_id in ALLOWED_CHAT_IDS:
                try:
                    sent_message = await bot.send_message(chat_id, f"{prefix}{message.text}")
                    sent_message_ids.append(sent_message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
                    
        elif message.photo:
            message_text = message.caption or ""
            message_type = "photo"
            if message.caption and message.caption.startswith('/'):
                await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")
                return
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
            for chat_id in ALLOWED_CHAT_IDS:
                try:
                    sent_message = await bot.send_photo(chat_id, message.photo[-1].file_id, caption=prefix + (message.caption or ""))
                    sent_message_ids.append(sent_message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ —á–∞—Ç {chat_id}: {e}")
                    
        elif message.document:
            message_text = message.caption or ""
            message_type = "document"
            if message.caption and message.caption.startswith('/'):
                await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∏ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")
                return
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
            for chat_id in ALLOWED_CHAT_IDS:
                try:
                    sent_message = await bot.send_document(chat_id, message.document.file_id, caption=prefix + (message.caption or ""))
                    sent_message_ids.append(sent_message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —á–∞—Ç {chat_id}: {e}")
                    
        elif message.video:
            message_text = message.caption or ""
            message_type = "video"
            if message.caption and message.caption.startswith('/'):
                await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∏ –∫ –≤–∏–¥–µ–æ, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")
                return
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
            for chat_id in ALLOWED_CHAT_IDS:
                try:
                    sent_message = await bot.send_video(chat_id, message.video.file_id, caption=prefix + (message.caption or ""))
                    sent_message_ids.append(sent_message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ —á–∞—Ç {chat_id}: {e}")
                    
        elif message.audio:
            message_text = message.caption or ""
            message_type = "audio"
            if message.caption and message.caption.startswith('/'):
                await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∏ –∫ –∞—É–¥–∏–æ, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")
                return
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
            for chat_id in ALLOWED_CHAT_IDS:
                try:
                    sent_message = await bot.send_audio(chat_id, message.audio.file_id, caption=prefix + (message.caption or ""))
                    sent_message_ids.append(sent_message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ —á–∞—Ç {chat_id}: {e}")
                    
        elif message.voice:
            message_text = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            message_type = "voice"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
            for chat_id in ALLOWED_CHAT_IDS:
                try:
                    sent_message = await bot.send_voice(chat_id, message.voice.file_id, caption=prefix)
                    sent_message_ids.append(sent_message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
                    
        elif message.sticker:
            message_text = "—Å—Ç–∏–∫–µ—Ä"
            message_type = "sticker"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
            for chat_id in ALLOWED_CHAT_IDS:
                try:
                    sent_message = await bot.send_sticker(chat_id, message.sticker.file_id)
                    sent_message_ids.append(sent_message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —á–∞—Ç {chat_id}: {e}")
                    
        else:
            await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –û–î–ò–ù –†–ê–ó (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —á–∞—Ç—É)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π message_id –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if sent_message_ids:
            await save_teacher_message(
                pool, 
                sent_message_ids[0],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π ID
                message.from_user.id,
                signature,
                message_text,
                message_type
            )

        success_chats = len(sent_message_ids)
        total_chats = len(ALLOWED_CHAT_IDS)
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {success_chats} –∏–∑ {total_chats} –±–µ—Å–µ–¥!")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")


@dp.callback_query(F.data == "view_teacher_messages")
async def view_teacher_messages_start(callback: types.CallbackQuery, state: FSMContext):
    # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
    if callback.message.chat.id not in ALLOWED_CHAT_IDS:
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    if callback.message.chat.type not in ["group", "supergroup"]:
        await callback.answer("‚õî –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–µ", show_alert=True)
        return

    await show_teacher_messages_page(callback, state, page=0)
    await callback.answer()


@dp.callback_query(F.data == "menu_back_from_messages")
async def menu_back_from_messages_handler(callback: types.CallbackQuery, state: FSMContext):
    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return
    await menu_back_handler(callback, state)


async def show_teacher_messages_page(callback: types.CallbackQuery, state: FSMContext, page: int = 0):
    limit = 10
    offset = page * limit
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    messages = await get_teacher_messages(pool, offset, limit)
    total_count = await get_teacher_messages_count(pool)
    
    if not messages:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ])
        await callback.message.edit_text(
            "üìù –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=kb
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    keyboard = []
    for i, (msg_id, message_id, signature, text, msg_type, created_at) in enumerate(messages):
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        display_text = text[:50] + "..." if len(text) > 50 else text
        if not display_text:
            display_text = f"{msg_type} —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        emoji = "üìù" if msg_type == "text" else "üñºÔ∏è" if msg_type == "photo" else "üìé" if msg_type == "document" else "üéµ"
        button_text = f"{emoji} {signature}: {display_text}"
        
        keyboard.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"view_message_{msg_id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"messages_page_{page-1}"))
    
    nav_buttons.append(InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="menu_back"))
    
    if (page + 1) * limit < total_count:
        nav_buttons.append(InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚û°", callback_data=f"messages_page_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    page_info = f" (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})" if total_count > limit else ""
    await callback.message.edit_text(
        f"üìù –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π{page_info}\n\n"
        f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_count}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=kb
    )
    
    await state.update_data(current_page=page)

@dp.callback_query(F.data.startswith("view_message_"))
async def view_specific_message(callback: types.CallbackQuery):
    try:
        message_db_id = int(callback.data.split("_")[2])
        current_chat_id = callback.message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT message_id, signature, message_text, message_type, created_at
                    FROM teacher_messages 
                    WHERE id = %s
                """, (message_db_id,))
                
                message_data = await cur.fetchone()
        
        if not message_data:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        message_id, signature, text, msg_type, created_at = message_data
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if isinstance(created_at, datetime.datetime):
            date_str = created_at.strftime("%d.%m.%Y %H:%M")
        else:
            date_str = str(created_at)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–ï–ö–£–©–ï–ô –±–µ—Å–µ–¥–µ
        message_link = f"https://t.me/c/{str(current_chat_id).replace('-100', '')}/{message_id}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é", url=message_link)],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_messages_list")]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_info = f"üë®‚Äçüè´ –û—Ç: {signature}\n"
        message_info += f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        message_info += f"üìä –¢–∏–ø: {msg_type}\n\n"
        
        if text and text != "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" and text != "—Å—Ç–∏–∫–µ—Ä":
            message_info += f"üìù –¢–µ–∫—Å—Ç: {text}\n\n"
        
        message_info += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ –±–µ—Å–µ–¥–µ."
        
        await callback.message.edit_text(message_info, reply_markup=kb)
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
    await callback.answer()
async def show_teacher_messages_page(callback: types.CallbackQuery, state: FSMContext, page: int = 0):
    limit = 10
    offset = page * limit
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    messages = await get_teacher_messages(pool, offset, limit)
    total_count = await get_teacher_messages_count(pool)
    
    if not messages:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ])
        await callback.message.edit_text(
            "üìù –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=kb
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    keyboard = []
    for i, (msg_id, message_id, signature, text, msg_type, created_at) in enumerate(messages):
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        display_text = text[:50] + "..." if len(text) > 50 else text
        if not display_text:
            display_text = f"{msg_type} —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        emoji = "üìù" if msg_type == "text" else "üñºÔ∏è" if msg_type == "photo" else "üìé" if msg_type == "document" else "üéµ"
        button_text = f"{emoji} {signature}: {display_text}"
        
        keyboard.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"view_message_{msg_id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"messages_page_{page-1}"))
    
    nav_buttons.append(InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="menu_back"))
    
    if (page + 1) * limit < total_count:
        nav_buttons.append(InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚û°", callback_data=f"messages_page_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    page_info = f" (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})" if total_count > limit else ""
    await callback.message.edit_text(
        f"üìù –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π{page_info}\n\n"
        f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_count}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=kb
    )
    
    await state.update_data(current_page=page)

@dp.callback_query(F.data.startswith("view_message_"))
async def view_specific_message(callback: types.CallbackQuery):
    try:
        message_db_id = int(callback.data.split("_")[2])
        current_chat_id = callback.message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT message_id, signature, message_text, message_type, created_at
                    FROM teacher_messages 
                    WHERE id = %s
                """, (message_db_id,))
                
                message_data = await cur.fetchone()
        
        if not message_data:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        message_id, signature, text, msg_type, created_at = message_data
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if isinstance(created_at, datetime.datetime):
            date_str = created_at.strftime("%d.%m.%Y %H:%M")
        else:
            date_str = str(created_at)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–ï–ö–£–©–ï–ô –±–µ—Å–µ–¥–µ
        message_link = f"https://t.me/c/{str(current_chat_id).replace('-100', '')}/{message_id}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é", url=message_link)],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_messages_list")]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_info = f"üë®‚Äçüè´ –û—Ç: {signature}\n"
        message_info += f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        message_info += f"üìä –¢–∏–ø: {msg_type}\n\n"
        
        if text and text != "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" and text != "—Å—Ç–∏–∫–µ—Ä":
            message_info += f"üìù –¢–µ–∫—Å—Ç: {text}\n\n"
        
        message_info += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ –±–µ—Å–µ–¥–µ."
        
        await callback.message.edit_text(message_info, reply_markup=kb)
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
    await callback.answer()

@dp.callback_query(F.data == "back_to_messages_list")
async def back_to_messages_list(callback: types.CallbackQuery, state: FSMContext):
    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return
    data = await state.get_data()
    current_page = data.get('current_page', 0)
    await show_teacher_messages_page(callback, state, current_page)
    await callback.answer()


@dp.callback_query(F.data == "admin_add_special_user")
async def admin_add_special_user_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])

    await callback.message.edit_text(
        "üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
        reply_markup=kb
    )
    await state.set_state(AddSpecialUserState.user_id)
    await callback.answer()

@dp.message(AddSpecialUserState.user_id)
async def process_special_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())
        if user_id <= 0:
            raise ValueError("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        await state.update_data(user_id=user_id)
        await message.answer(
            f"‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
            "(–∫–∞–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π):"
        )
        await state.set_state(AddSpecialUserState.signature)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:")



@dp.message(AddSpecialUserState.signature)
async def process_special_user_signature(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    signature = message.text.strip()
    
    if not signature:
        await message.answer("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å:")
        return
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        await set_special_user_signature(pool, user_id, signature)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ SPECIAL_USER_ID –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        if user_id not in SPECIAL_USER_ID:
            SPECIAL_USER_ID.append(user_id)
        
        await message.answer(
            f"‚úÖ –°–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üë§ ID: {user_id}\n"
            f"üìù –ü–æ–¥–ø–∏—Å—å: {signature}\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–µ—Å–µ–¥—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é."
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é
        await message.answer("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    await state.clear()


def get_zvonki(is_saturday: bool):
    return "\n".join(ZVONKI_SATURDAY if is_saturday else ZVONKI_DEFAULT)

def main_menu(is_admin=False, is_special_user=False, is_group_chat=False):
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–µ
    if is_group_chat:
        buttons.append([InlineKeyboardButton(text="üë®‚Äçüè´ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–æ–≤", callback_data="view_teacher_messages")]),
        buttons.append([InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="menu_rasp")]),
        buttons.append([InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today_rasp")]),  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        buttons.append([InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="tomorrow_rasp")]),
        buttons.append([InlineKeyboardButton(text="‚è∞ –ó–≤–æ–Ω–∫–∏", callback_data="menu_zvonki")]),
        buttons.append([InlineKeyboardButton(text="üå§Ô∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", callback_data="menu_weather")])

    
    if is_admin:
        buttons.append([InlineKeyboardButton(text="‚öô –ê–¥–º–∏–Ω–∫–∞", callback_data="menu_admin")])
    if is_special_user:
        buttons.append([InlineKeyboardButton(text="‚úâ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–µ—Å–µ–¥—É", callback_data="send_message_chat")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def admin_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ç–Ω–æ—Å—Ç—å", callback_data="admin_setchet")],
        [InlineKeyboardButton(text="üìå –£–∑–Ω–∞—Ç—å —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏", callback_data="admin_show_chet")],

        [InlineKeyboardButton(text="üïí –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π", callback_data="admin_list_publish_times")],
        [InlineKeyboardButton(text="üìù –ó–∞–¥–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="admin_set_publish_time")],
        [InlineKeyboardButton(text="üïê –£–∑–Ω–∞—Ç—å –º–æ–µ –≤—Ä–µ–º—è", callback_data="admin_my_publish_time")],

        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É", callback_data="admin_add_lesson")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞—Ä—É", callback_data="admin_clear_pair")],

        [InlineKeyboardButton(text="üè´ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç", callback_data="admin_set_cabinet")],

        [InlineKeyboardButton(text="üìö –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="admin_add_subject")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="admin_delete_subject")],

        [InlineKeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_special_user")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_teacher_message")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
    ])
    return kb

@dp.callback_query(F.data == "today_rasp")
async def today_rasp_handler(callback: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    if not is_allowed_chat(callback.message.chat.id):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ callback
    chat_id = callback.message.chat.id
    
    now = datetime.datetime.now(TZ)
    target_date = now.date()
    day_to_show = now.isoweekday()
    
    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    if day_to_show == 7:
        target_date += datetime.timedelta(days=1)
        day_to_show = 1
        day_name = "–∑–∞–≤—Ç—Ä–∞ (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"
    else:
        day_name = "—Å–µ–≥–æ–¥–Ω—è"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    week_type = await get_current_week_type(pool, chat_id, target_date)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    text = await get_rasp_formatted(day_to_show, week_type, chat_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    day_names = {
        1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        2: "–í—Ç–æ—Ä–Ω–∏–∫", 
        3: "–°—Ä–µ–¥–∞",
        4: "–ß–µ—Ç–≤–µ—Ä–≥",
        5: "–ü—è—Ç–Ω–∏—Ü–∞",
        6: "–°—É–±–±–æ—Ç–∞"
    }
    
    week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_type == 1 else "—á–µ—Ç–Ω–∞—è"
    message = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name} ({day_names[day_to_show]}) | –ù–µ–¥–µ–ª—è: {week_name}\n\n{text}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT text FROM anekdoty ORDER BY RAND() LIMIT 1")
            row = await cur.fetchone()
            if row:
                message += f"\n\nüòÇ –ê–Ω–µ–∫–¥–æ—Ç:\n{row[0]}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
    ])
    
    await greet_and_send(callback.from_user, message, callback=callback, markup=kb)
    await callback.answer()


@dp.callback_query(F.data == "menu_weather")
async def menu_weather_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–≥–æ–¥—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üå§Ô∏è –ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="weather_today")],
        [InlineKeyboardButton(text="üå§Ô∏è –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="weather_tomorrow")],
        [InlineKeyboardButton(text="üìÖ –ü–æ–≥–æ–¥–∞ –Ω–∞ 7 –¥–Ω–µ–π", callback_data="weather_week")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
    ])
    
    await greet_and_send(
        callback.from_user,
        "üå§Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:",
        callback=callback,
        markup=kb
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("weather_"))
async def weather_period_handler(callback: types.CallbackQuery):
    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–≥–æ–¥—ã"""
    period = callback.data
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await callback.message.edit_text("üå§Ô∏è –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")
    
    try:
        if period == "weather_today":
            weather_data = await get_weather_today_formatted()
            title = "üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ –û–º—Å–∫–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
        elif period == "weather_tomorrow":
            weather_data = await get_weather_tomorrow_formatted()
            title = "üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ –û–º—Å–∫–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
        elif period == "weather_week":
            weather_data = await get_weather_week_formatted()
            title = "üìÖ –ü–æ–≥–æ–¥–∞ –≤ –û–º—Å–∫–µ –Ω–∞ 7 –¥–Ω–µ–π"
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥", show_alert=True)
            return
        
        message = f"{title}\n\n{weather_data}"
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üå§Ô∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="menu_weather")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]
        ])
        
        await callback.message.edit_text(message, reply_markup=kb)
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_weather")]
        ])
        await callback.message.edit_text(error_message, reply_markup=kb)
    
    await callback.answer()


async def get_weather_today_formatted() -> str:
    """–ö—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        soup = await get_weather_soup()
        if not soup:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
        
        result = "üìä –°–µ–π—á–∞—Å:\n"
        
        # –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        temp = await extract_current_temp(soup)
        if temp:
            result += f"üå° {temp}\n"
        
        # –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫
        feels_like = await extract_feels_like(soup)
        if feels_like:
            result += f"üí≠ {feels_like}\n"
        
        # –í–µ—Ç–µ—Ä
        wind = await extract_wind(soup)
        if wind:
            result += f"üí® {wind}\n"
        
        # –î–∞–≤–ª–µ–Ω–∏–µ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å
        pressure = await extract_pressure(soup)
        humidity = await extract_humidity(soup)
        
        if pressure and humidity:
            result += f"üìä {pressure}, {humidity}\n"
        
        result += "\nüìà –ü–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:\n"
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        time_forecast = await extract_time_forecast(soup)
        if time_forecast:
            result += time_forecast
        else:
            result += "‚Ä¢ –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
        
        return result
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –ø–æ–≥–æ–¥—ã: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"

async def get_weather_tomorrow_formatted() -> str:
    """–ö—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        soup = await get_weather_soup()
        if not soup:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
        
        result = "üìÖ –ó–∞–≤—Ç—Ä–∞:\n\n"
        
        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        tomorrow_data = await extract_tomorrow_data(soup)
        if tomorrow_data:
            result += tomorrow_data
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            result += await extract_tomorrow_alternative(soup)
        
        return result
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –ø–æ–≥–æ–¥—ã: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"

async def get_weather_week_formatted() -> str:
    """–ö—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        soup = await get_weather_soup()
        if not soup:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
        
        result = "üìÖ –ù–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        
        weekly_data = await extract_weekly_data(soup)
        if weekly_data:
            result += weekly_data
        else:
            result += "üìä –î–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n\n"
            result += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"
        
        return result
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π –ø–æ–≥–æ–¥—ã: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"


async def get_weather_soup():
    """–ü–æ–ª—É—á–∞–µ—Ç BeautifulSoup –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–≥–æ–¥—ã"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8'
        }
        
        url = "https://yandex.ru/pogoda/omsk"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, timeout=10) as response:
                if response.status != 200:
                    return None
                html = await response.text()
        
        return BeautifulSoup(html, 'html.parser')
    except Exception:
        return None

async def extract_current_temp(soup) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É"""
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        selectors = [
            '.temp__value',
            '[class*="temp__value"]',
            '[class*="current-weather__temp"]',
            '.weather__temp'
        ]
        
        for selector in selectors:
            elem = soup.select_one(selector)
            if elem and elem.text.strip():
                temp = elem.text.strip().replace('‚àí', '-')
                return f"{temp}¬∞C"
        
        return None
    except Exception:
        return None

async def extract_feels_like(soup) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç '–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫'"""
    try:
        # –ò—â–µ–º —Ç–µ–∫—Å—Ç —Å "–æ—â—É—â–∞–µ—Ç—Å—è"
        elements = soup.find_all(string=re.compile(r'–æ—â—É—â–∞–µ—Ç—Å—è', re.IGNORECASE))
        for elem in elements:
            parent = elem.parent
            if parent:
                text = parent.get_text(strip=True)
                # –£–ø—Ä–æ—â–∞–µ–º —Ç–µ–∫—Å—Ç
                if '–æ—â—É—â–∞–µ—Ç—Å—è' in text.lower():
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    temp_match = re.search(r'[+-]?\d+¬∞', text)
                    if temp_match:
                        return f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {temp_match.group()}"
        return None
    except Exception:
        return None

async def extract_condition(soup) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã"""
    try:
        selectors = [
            '[class*="condition"]',
            '[class*="weather__condition"]',
            '[class*="description"]'
        ]
        
        for selector in selectors:
            elem = soup.select_one(selector)
            if elem and elem.text.strip():
                text = elem.text.strip()
                if len(text) < 50:  # –ù–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    return text.capitalize()
        return None
    except Exception:
        return None

async def extract_wind(soup) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ç—Ä–µ"""
    try:
        elements = soup.find_all(string=re.compile(r'–≤–µ—Ç–µ—Ä|wind', re.IGNORECASE))
        for elem in elements:
            parent = elem.parent
            if parent:
                text = parent.get_text(strip=True)
                # –£–ø—Ä–æ—â–∞–µ–º —Ç–µ–∫—Å—Ç
                if '–≤–µ—Ç–µ—Ä' in text.lower():
                    # –ò—â–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞
                    wind_match = re.search(r'(\d+[,.]?\d*)\s*–º/—Å', text)
                    if wind_match:
                        return f"–í–µ—Ç–µ—Ä {wind_match.group(1)} –º/—Å"
        return None
    except Exception:
        return None

async def extract_pressure(soup) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–≤–ª–µ–Ω–∏–µ"""
    try:
        elements = soup.find_all(string=re.compile(r'–¥–∞–≤–ª–µ–Ω–∏–µ|pressure', re.IGNORECASE))
        for elem in elements:
            parent = elem.parent
            if parent:
                text = parent.get_text(strip=True)
                if '–¥–∞–≤–ª–µ–Ω–∏–µ' in text.lower():
                    # –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è
                    press_match = re.search(r'(\d+)\s*–º–º', text)
                    if press_match:
                        return f"–î–∞–≤–ª–µ–Ω–∏–µ {press_match.group(1)} –º–º"
        return None
    except Exception:
        return None

async def extract_humidity(soup) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç—å"""
    try:
        elements = soup.find_all(string=re.compile(r'–≤–ª–∞–∂–Ω–æ—Å—Ç—å|humidity', re.IGNORECASE))
        for elem in elements:
            parent = elem.parent
            if parent:
                text = parent.get_text(strip=True)
                if '–≤–ª–∞–∂–Ω–æ—Å—Ç—å' in text.lower():
                    # –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
                    hum_match = re.search(r'(\d+)%', text)
                    if hum_match:
                        return f"–í–ª–∞–∂–Ω–æ—Å—Ç—å {hum_match.group(1)}%"
        return None
    except Exception:
        return None

async def extract_time_forecast(soup) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
    try:
        result = ""
        
        # –ò—â–µ–º –±–ª–æ–∫–∏ —Å —É—Ç—Ä–æ–º/–¥–Ω–µ–º/–≤–µ—á–µ—Ä–æ–º/–Ω–æ—á—å—é
        time_periods = {
            '—É—Ç—Ä–æ–º': 'üåÖ –£—Ç—Ä–æ',
            '–¥–Ω–µ–º': '‚òÄ –î–µ–Ω—å', 
            '–≤–µ—á–µ—Ä–æ–º': 'üåá –í–µ—á–µ—Ä',
            '–Ω–æ—á—å—é': 'üåô –ù–æ—á—å'
        }
        
        for period_ru, period_emoji in time_periods.items():
            elements = soup.find_all(string=re.compile(period_ru, re.IGNORECASE))
            for elem in elements:
                parent_text = elem.parent.get_text(strip=True) if elem.parent else ""
                # –ò—â–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ —Ç–µ–∫—Å—Ç–µ
                temp_match = re.search(r'([+-]?\d+)¬∞', parent_text)
                if temp_match:
                    result += f"‚Ä¢ {period_emoji}: {temp_match.group(1)}¬∞C\n"
                    break
        
        return result if result else None
    except Exception:
        return None

async def extract_tomorrow_data(soup) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        # –ò—â–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        elements = soup.find_all(string=re.compile(r'–∑–∞–≤—Ç—Ä–∞|tomorrow', re.IGNORECASE))
        
        for elem in elements:
            parent = elem.parent
            if parent:
                # –ò—â–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                parent_text = parent.get_text()
                temp_matches = re.findall(r'([+-]?\d+)¬∞', parent_text)
                
                if len(temp_matches) >= 2:
                    day_temp = temp_matches[0]
                    night_temp = temp_matches[1]
                    
                    result = f"üåÖ –î–Ω–µ–º: {day_temp}¬∞C\n"
                    result += f"üåô –ù–æ—á—å—é: {night_temp}¬∞C\n\n"
                    
                    # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
                    condition_match = re.search(r'([–∞-—è—ë]+(?:\s+[–∞-—è—ë]+){0,3})', parent_text.lower())
                    if condition_match and '–∑–∞–≤—Ç—Ä–∞' not in condition_match.group(1):
                        result += f"‚òÅ {condition_match.group(1).capitalize()}\n"
                    
                    return result
        
        return "üìä –î–∞–Ω–Ω—ã–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"
    except Exception:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"

async def extract_tomorrow_alternative(soup) -> str:
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        # –ò—â–µ–º –≤—Å–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        all_text = soup.get_text()
        temp_matches = re.findall(r'([+-]?\d+)¬∞', all_text)
        
        if len(temp_matches) >= 4:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–µ 4 –∑–Ω–∞—á–µ–Ω–∏—è - —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
            tomorrow_day = temp_matches[2] if len(temp_matches) > 2 else "?"
            tomorrow_night = temp_matches[3] if len(temp_matches) > 3 else "?"
            
            result = f"üåÖ –î–Ω–µ–º: {tomorrow_day}¬∞C\n"
            result += f"üåô –ù–æ—á—å—é: {tomorrow_night}¬∞C\n\n"
            result += "üí° –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑, —É—Ç–æ—á–Ω–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã"
            
            return result
        
        return "üìä –î–∞–Ω–Ω—ã–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    except Exception:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"

async def extract_weekly_data(soup) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        # –ò—â–µ–º –≤—Å–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        all_text = soup.get_text()
        temp_matches = re.findall(r'([+-]?\d+)¬∞', all_text)
        
        if len(temp_matches) >= 14:
            result = ""
            days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
            
            for i in range(7):
                if i * 2 + 1 < len(temp_matches):
                    day_temp = temp_matches[i * 2]
                    night_temp = temp_matches[i * 2 + 1]
                    result += f"‚Ä¢ {days[i]}: {day_temp}¬∞ / {night_temp}¬∞\n"
            
            return result
        else:
            return None
    except Exception:
        return None

@dp.callback_query(F.data == "admin_add_lesson")
async def admin_add_lesson_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT name FROM subjects")
            subjects = await cur.fetchall()
    
    buttons = []
    for subj in subjects:
        buttons.append([InlineKeyboardButton(text=subj[0], callback_data=f"choose_subject_{subj[0]}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=kb)
    await state.set_state(AddLessonState.subject)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
@dp.callback_query(F.data.startswith("choose_subject_"))
async def choose_subject(callback: types.CallbackQuery, state: FSMContext):
    subject = callback.data[len("choose_subject_"):]
    await state.update_data(subject=subject)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–∞—è", callback_data="week_1")],
        [InlineKeyboardButton(text="2Ô∏è‚É£ –ß–µ—Ç–Ω–∞—è", callback_data="week_2")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏:", reply_markup=kb)
    await state.set_state(AddLessonState.week_type)

@dp.callback_query(F.data.startswith("week_"))
async def choose_week(callback: types.CallbackQuery, state: FSMContext):
    week_type = int(callback.data[-1])
    await state.update_data(week_type=week_type)
    
    buttons = []
    for i, day in enumerate(DAYS):
        buttons.append([InlineKeyboardButton(text=day, callback_data=f"day_{i+1}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=kb)
    await state.set_state(AddLessonState.day)

@dp.callback_query(F.data.startswith("day_"))
async def choose_day(callback: types.CallbackQuery, state: FSMContext):
    day = int(callback.data[len("day_"):])
    await state.update_data(day=day)
    
    buttons = []
    for i in range(1, 7):
        buttons.append([InlineKeyboardButton(text=str(i), callback_data=f"pair_{i}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã:", reply_markup=kb)
    await state.set_state(AddLessonState.pair_number)


@dp.callback_query(F.data == "admin_add_subject")
async def admin_add_subject_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])

    await callback.message.edit_text(
        "üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:",
        reply_markup=kb
    )
    await state.set_state(AddSubjectState.name)
    await callback.answer()

@dp.message(AddSubjectState.name)
async def process_subject_name(message: types.Message, state: FSMContext):
    subject_name = message.text.strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if subject_name.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '‚ùå –æ—Ç–º–µ–Ω–∞']:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        await state.clear()
        return
        
    if not subject_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    
    await state.update_data(name=subject_name)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè´ –° —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º", callback_data="subject_type_fixed")],
        [InlineKeyboardButton(text="üî¢ –° –∑–∞–ø—Ä–æ—Å–æ–º –∫–∞–±–∏–Ω–µ—Ç–∞ (rK)", callback_data="subject_type_rk")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])
    
    await message.answer(
        f"üìù –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞:",
        reply_markup=kb
    )
    await state.set_state(AddSubjectState.type_choice)

@dp.message(AddSubjectState.cabinet)
async def process_subject_cabinet(message: types.Message, state: FSMContext):
    cabinet = message.text.strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if cabinet.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '‚ùå –æ—Ç–º–µ–Ω–∞']:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        await state.clear()
        return
        
    data = await state.get_data()
    subject_name = data["name"]
    
    if not cabinet:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç:")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º
    full_subject_name = f"{subject_name} {cabinet}"
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("INSERT INTO subjects (name, rK) VALUES (%s, %s)", (full_subject_name, False))
    
    await message.answer(
        f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ: {full_subject_name}\n"
        f"üè´ –¢–∏–ø: —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º\n\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ "
        f"–∫–∞–±–∏–Ω–µ—Ç –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é
    await message.answer("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
    await state.clear()
    
    await callback.answer()

@dp.message(AddSubjectState.cabinet)
async def process_subject_cabinet(message: types.Message, state: FSMContext):
    cabinet = message.text.strip()
    data = await state.get_data()
    subject_name = data["name"]
    
    if not cabinet:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç:")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º
    full_subject_name = f"{subject_name} {cabinet}"
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("INSERT INTO subjects (name, rK) VALUES (%s, %s)", (full_subject_name, False))
    
    await message.answer(
        f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ: {full_subject_name}\n"
        f"üè´ –¢–∏–ø: —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º\n\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ "
        f"–∫–∞–±–∏–Ω–µ—Ç –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é
    await message.answer("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
    await state.clear()

@dp.callback_query(F.data == "admin_delete_subject")
async def admin_delete_subject_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT id, name, rK FROM subjects ORDER BY name")
            subjects = await cur.fetchall()
    
    if not subjects:
        await callback.message.edit_text("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    keyboard = []
    for subject_id, name, rk in subjects:
        type_icon = "üî¢" if rk else "üè´"
        button_text = f"{type_icon} {name}"
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"delete_subject_{subject_id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "üè´ - —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º\n"
        "üî¢ - —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–∞–±–∏–Ω–µ—Ç–∞ (rK)",
        reply_markup=kb
    )
    await state.set_state(DeleteSubjectState.subject_choice)
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_subject_"))
async def process_delete_subject(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "menu_admin":
        await callback.message.edit_text("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        await state.clear()
        await callback.answer()
        return
    
    subject_id = int(callback.data[len("delete_subject_"):])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT name, rK FROM subjects WHERE id=%s", (subject_id,))
            subject = await cur.fetchone()
            
            if not subject:
                await callback.message.edit_text("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await callback.answer()
                return
            
            name, rk = subject
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            await cur.execute("SELECT COUNT(*) FROM rasp_detailed WHERE subject_id=%s", (subject_id,))
            usage_count = (await cur.fetchone())[0]
            
            if usage_count > 0:
                # –ü—Ä–µ–¥–º–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å —É—Ä–æ–∫–∞–º–∏", callback_data=f"confirm_delete_subject_{subject_id}")],
                    [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete_subject")]
                ])
                
                await callback.message.edit_text(
                    f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n\n"
                    f"–ü—Ä–µ–¥–º–µ—Ç '{name}' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {usage_count} —É—Ä–æ–∫(–∞—Ö) —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n"
                    f"–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏?",
                    reply_markup=kb
                )
            else:
                # –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É
                await cur.execute("DELETE FROM subjects WHERE id=%s", (subject_id,))
                await callback.message.edit_text(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{name}' —É–¥–∞–ª–µ–Ω.")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
                await callback.message.answer("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
                await state.clear()
    
    await callback.answer()


@dp.callback_query(F.data.startswith("confirm_delete_subject_"))
async def confirm_delete_subject(callback: types.CallbackQuery):
    subject_id = int(callback.data[len("confirm_delete_subject_"):])
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            await cur.execute("SELECT name FROM subjects WHERE id=%s", (subject_id,))
            subject_name = (await cur.fetchone())[0]
            
            # –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫–∏ —Å —ç—Ç–∏–º –ø—Ä–µ–¥–º–µ—Ç–æ–º
            await cur.execute("DELETE FROM rasp_detailed WHERE subject_id=%s", (subject_id,))
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º –ø—Ä–µ–¥–º–µ—Ç
            await cur.execute("DELETE FROM subjects WHERE id=%s", (subject_id,))
    
    await callback.message.edit_text(
        f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã."
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    await callback.message.answer("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
    await callback.answer()

@dp.callback_query(F.data == "menu_back")
async def menu_back_handler(callback: types.CallbackQuery, state: FSMContext):
    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤ –õ–° –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return

    try:
        await state.clear()
    except Exception:
        pass
    
    is_admin = (callback.from_user.id in ALLOWED_USERS) and is_private
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    is_special_user = False
    if is_private:
        signature = await get_special_user_signature(pool, callback.from_user.id)
        is_special_user = signature is not None
    
    try:
        await callback.message.delete()
        await greet_and_send(
            callback.from_user, 
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
            chat_id=callback.message.chat.id, 
            markup=main_menu(is_admin=is_admin, is_special_user=is_special_user, is_group_chat=not is_private)
        )
    except Exception:
        try:
            await greet_and_send(
                callback.from_user, 
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                callback=callback, 
                markup=main_menu(is_admin=is_admin, is_special_user=is_special_user, is_group_chat=not is_private)
            )
        except Exception:
            await greet_and_send(
                callback.from_user, 
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                chat_id=callback.message.chat.id, 
                markup=main_menu(is_admin=is_admin, is_special_user=is_special_user, is_group_chat=not is_private)
            )

    await callback.answer()



@dp.callback_query(F.data == "cancel_delete_subject")
async def cancel_delete_subject(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await menu_back_handler(callback, state)
    await callback.answer()

@dp.callback_query(F.data.startswith("pair_"))
async def choose_pair(callback: types.CallbackQuery, state: FSMContext):
    pair_number = int(callback.data[len("pair_"):])
    await state.update_data(pair_number=pair_number)
    
    data = await state.get_data()
    subject_name = data["subject"]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–µ–¥–º–µ—Ç–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç (rK)
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT rK FROM subjects WHERE name=%s", (subject_name,))
                result = await cur.fetchone()
                is_rk = result[0] if result else False
        
        if is_rk:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —Å rK - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã:")
            await state.set_state(AddLessonState.cabinet)
        else:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –±–µ–∑ rK - –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–∞–±–∏–Ω–µ—Ç –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            import re
            # –ò—â–µ–º –∫–∞–±–∏–Ω–µ—Ç –≤ –∫–æ–Ω—Ü–µ –Ω–∞–∑–≤–∞–Ω–∏—è (—É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫–∏, —Å–ª–µ—à–∏, –±—É–∫–≤—ã)
            cabinet_match = re.search(r'(\s+)(\d+\.?\d*[–∞-—è]?|\d+\.?\d*/\d+\.?\d*|—Å–ø/–∑|–∞–∫—Ç–æ–≤—ã–π –∑–∞–ª|—Å–ø–æ—Ä—Ç–∑–∞–ª)$', subject_name)
            
            if cabinet_match:
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–∞–±–∏–Ω–µ—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ - –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ
                cabinet = cabinet_match.group(2)
                # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ—Ç –∫–∞–±–∏–Ω–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                clean_subject_name = subject_name.replace(cabinet_match.group(0), '').strip()
            else:
                # –ï—Å–ª–∏ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –Ω–µ—Ç
                cabinet = "–ù–µ —É–∫–∞–∑–∞–Ω"
                clean_subject_name = subject_name
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–±–∏–Ω–µ—Ç
            await state.update_data(cabinet=cabinet)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫ (–ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ!)
            async with pool.acquire() as conn:
                async with conn.cursor() as cur:
                    # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥–º–µ—Ç–∞
                    await cur.execute("SELECT id FROM subjects WHERE name=%s", (subject_name,))
                    subject_result = await cur.fetchone()
                    if not subject_result:
                        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                        await state.clear()
                        return
                    
                    subject_id = subject_result[0]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    await cur.execute("""
                        INSERT INTO rasp_detailed (chat_id, day, week_type, pair_number, subject_id, cabinet)
                        VALUES (%s, %s, %s, %s, %s, %s)
                    """, (DEFAULT_CHAT_ID, data["day"], data["week_type"], pair_number, subject_id, cabinet))
            
            # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            display_name = clean_subject_name
            
            await callback.message.edit_text(
                f"‚úÖ –£—Ä–æ–∫ '{display_name}' –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"üìÖ –î–µ–Ω—å: {DAYS[data['day']-1]}\n"
                f"üî¢ –ü–∞—Ä–∞: {pair_number}\n"
                f"üè´ –ö–∞–±–∏–Ω–µ—Ç: {cabinet}\n\n"
                f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                reply_markup=admin_menu()
            )
            await state.clear()
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ choose_pair: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: {e}")
        await state.clear()

@dp.message(AddLessonState.cabinet)
async def set_cabinet(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cabinet = message.text.strip()
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT id FROM subjects WHERE name=%s", (data["subject"],))
            subject_id = (await cur.fetchone())[0]
            await cur.execute("""
                INSERT INTO rasp_detailed (chat_id, day, week_type, pair_number, subject_id, cabinet)
                VALUES (%s, %s, %s, %s, %s, %s)
            """, (DEFAULT_CHAT_ID, data["day"], data["week_type"], data["pair_number"], subject_id, cabinet))
    
    await message.answer(
        f"‚úÖ –£—Ä–æ–∫ '{data['subject']}' –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"üìÖ –î–µ–Ω—å: {DAYS[data['day']-1]}\n" 
        f"üî¢ –ü–∞—Ä–∞: {data['pair_number']}\n"
        f"üè´ –ö–∞–±–∏–Ω–µ—Ç: {cabinet} (–≤—Ä—É—á–Ω—É—é)\n\n"
        f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_menu()
    )
    await state.clear()

@dp.callback_query(F.data.startswith("addlesson_"))
async def choose_lesson(callback: types.CallbackQuery, state: FSMContext):
    lesson = callback.data[len("addlesson_"):]
    await state.update_data(lesson=lesson)
    if lesson.endswith("rK"):
        await greet_and_send(callback.from_user, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏:", callback=callback,
                             markup=InlineKeyboardMarkup(inline_keyboard=[
                                 [InlineKeyboardButton(text="1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–∞—è", callback_data="cab_week_1")],
                                 [InlineKeyboardButton(text="2Ô∏è‚É£ –ß–µ—Ç–Ω–∞—è", callback_data="cab_week_2")]
                             ]))
        await state.set_state(SetCabinetState.week_type)
    else:
        await greet_and_send(callback.from_user, f"–£—Ä–æ–∫ '{lesson}' –¥–æ–±–∞–≤–ª–µ–Ω —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", callback=callback)
        await state.clear()

@dp.callback_query(F.data == "admin_set_cabinet")
async def admin_set_cabinet_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–∞—è", callback_data="cab_week_1")],
        [InlineKeyboardButton(text="2Ô∏è‚É£ –ß–µ—Ç–Ω–∞—è", callback_data="cab_week_2")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])
    await greet_and_send(callback.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏:", callback=callback, markup=kb)
    await state.set_state(SetCabinetState.week_type)
    await callback.answer()

@dp.callback_query(F.data.startswith("cab_week_"))
async def set_cab_week(callback: types.CallbackQuery, state: FSMContext):
    week_type = int(callback.data[-1])
    await state.update_data(week_type=week_type)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=day, callback_data=f"cab_day_{i+1}")] 
        for i, day in enumerate(DAYS)
    ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    )
    await greet_and_send(callback.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", callback=callback, markup=kb)
    await state.set_state(SetCabinetState.day)
    await callback.answer()

@dp.callback_query(F.data.startswith("cab_day_"))
async def set_cab_day(callback: types.CallbackQuery, state: FSMContext):
    day = int(callback.data[len("cab_day_"):])
    await state.update_data(day=day)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(i), callback_data=f"cab_pair_{i}")] for i in range(1, 7)
    ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    )
    await greet_and_send(callback.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã:", callback=callback, markup=kb)
    await state.set_state(SetCabinetState.pair_number)
    await callback.answer()

@dp.message(SetCabinetState.cabinet)
async def set_cabinet_final(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cabinet = message.text.strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if cabinet.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '‚ùå –æ—Ç–º–µ–Ω–∞']:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        await state.clear()
        return
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                SELECT id FROM rasp_detailed
                WHERE chat_id=%s AND day=%s AND week_type=%s AND pair_number=%s
            """, (DEFAULT_CHAT_ID, data["day"], data["week_type"], data["pair_number"]))
            row = await cur.fetchone()
            if row:
                await cur.execute("""
                    UPDATE rasp_detailed
                    SET cabinet=%s
                    WHERE id=%s
                """, (cabinet, row[0]))
            else:
                await cur.execute("""
                    INSERT INTO rasp_detailed (chat_id, day, week_type, pair_number, cabinet)
                    VALUES (%s, %s, %s, %s, %s)
                """, (DEFAULT_CHAT_ID, data["day"], data["week_type"], data["pair_number"], cabinet))
    await greet_and_send(message.from_user,
                         f"‚úÖ –ö–∞–±–∏–Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –¥–µ–Ω—å {DAYS[data['day']-1]}, –ø–∞—Ä–∞ {data['pair_number']}, –∫–∞–±–∏–Ω–µ—Ç {cabinet}",
                         message=message)
    await greet_and_send(message.from_user, "‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", message=message, markup=admin_menu())
    await state.clear()

@dp.callback_query(F.data == "admin_clear_pair")
async def admin_clear_pair_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–∞—è", callback_data="clr_week_1")],
        [InlineKeyboardButton(text="2Ô∏è‚É£ –ß–µ—Ç–Ω–∞—è", callback_data="clr_week_2")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])
    await greet_and_send(callback.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏:", callback=callback, markup=kb)
    await state.set_state(ClearPairState.week_type)
    await callback.answer()

@dp.callback_query(F.data.startswith("clr_week_"))
async def clear_pair_week(callback: types.CallbackQuery, state: FSMContext):
    week_type = int(callback.data[-1])
    await state.update_data(week_type=week_type)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=day, callback_data=f"clr_day_{i+1}")]
        for i, day in enumerate(DAYS)
    ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    )
    await greet_and_send(callback.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", callback=callback, markup=kb)
    await state.set_state(ClearPairState.day)
    await callback.answer()

@dp.callback_query(F.data.startswith("clr_day_"))
async def clear_pair_day(callback: types.CallbackQuery, state: FSMContext):
    day = int(callback.data[len("clr_day_"):])
    await state.update_data(day=day)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(i), callback_data=f"clr_pair_{i}")] for i in range(1, 7)
    ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    )
    await greet_and_send(callback.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã:", callback=callback, markup=kb)
    await state.set_state(ClearPairState.pair_number)
    await callback.answer()

@dp.callback_query(F.data.startswith("clr_pair_"))
async def clear_pair_number(callback: types.CallbackQuery, state: FSMContext):
    pair_number = int(callback.data[len("clr_pair_"):])
    data = await state.get_data()

    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
            await cur.execute("""
                SELECT id FROM rasp_detailed
                WHERE chat_id=%s AND day=%s AND week_type=%s AND pair_number=%s
            """, (DEFAULT_CHAT_ID, data["day"], data["week_type"], pair_number))
            row = await cur.fetchone()

            if row:
                # –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ NULL –∏ –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ NULL ‚Üí –≤ –≤—ã–≤–æ–¥–µ –±—É–¥–µ—Ç "–°–≤–æ–±–æ–¥–Ω–æ"
                await cur.execute("""
                    UPDATE rasp_detailed
                    SET subject_id=NULL, cabinet=NULL
                    WHERE id=%s
                """, (row[0],))
            else:
                # —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞–ª–æ—Å—å "–°–≤–æ–±–æ–¥–Ω–æ"
                await cur.execute("""
                    INSERT INTO rasp_detailed (chat_id, day, week_type, pair_number, subject_id, cabinet)
                    VALUES (%s, %s, %s, %s, NULL, NULL)
                """, (DEFAULT_CHAT_ID, data["day"], data["week_type"], pair_number))

    await greet_and_send(callback.from_user,
                         f"‚úÖ –ü–∞—Ä–∞ {pair_number} ({DAYS[data['day']-1]}, –Ω–µ–¥–µ–ª—è {data['week_type']}) –æ—á–∏—â–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —Ç–∞–º '–°–≤–æ–±–æ–¥–Ω–æ'.",
                         callback=callback)
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "admin_delete_teacher_message")
async def admin_delete_teacher_message_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ (–ë–ï–ó chat_id –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
    messages = await get_teacher_messages(pool, limit=20)
    
    if not messages:
        await callback.message.edit_text(
            "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n\n"
            "‚ùå –í –±–∞–∑–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    keyboard = []
    for i, (msg_id, message_id, signature, text, msg_type, created_at) in enumerate(messages):
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        display_text = text[:30] + "..." if len(text) > 30 else text
        if not display_text:
            display_text = f"{msg_type}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if isinstance(created_at, datetime.datetime):
            date_str = created_at.strftime("%d.%m %H:%M")
        else:
            date_str = str(created_at)
        
        button_text = f"{signature}: {display_text} ({date_str})"
        
        keyboard.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"delete_teacher_msg_{msg_id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=kb
    )
    await callback.answer()

@dp.callback_query(F.data == "menu_admin_from_delete")
async def menu_admin_from_delete_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await state.clear()
    await callback.message.edit_text("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("delete_teacher_msg_"))
async def process_delete_teacher_message(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "menu_admin":
        await callback.message.edit_text("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        await state.clear()
        await callback.answer()
        return
    
    try:
        message_db_id = int(callback.data[len("delete_teacher_msg_"):])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT signature, message_text, message_type, created_at
                    FROM teacher_messages WHERE id = %s
                """, (message_db_id,))
                message_data = await cur.fetchone()
        
        if not message_data:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        signature, text, msg_type, created_at = message_data
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if isinstance(created_at, datetime.datetime):
            date_str = created_at.strftime("%d.%m.%Y %H:%M")
        else:
            date_str = str(created_at)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        # –í —Ñ—É–Ω–∫—Ü–∏–∏ process_delete_teacher_message –∑–∞–º–µ–Ω–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ —ç—Ç—É:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_msg_{message_db_id}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="menu_admin_from_delete")]
        ])
                
        message_info = f"üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
        message_info += f"üë®‚Äçüè´ –û—Ç: {signature}\n"
        message_info += f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        message_info += f"üìä –¢–∏–ø: {msg_type}\n"
        
        if text and text != "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" and text != "—Å—Ç–∏–∫–µ—Ä":
            message_info += f"üìù –¢–µ–∫—Å—Ç: {text}\n"
        
        await callback.message.edit_text(message_info, reply_markup=kb)
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("confirm_delete_msg_"))
async def confirm_delete_teacher_message(callback: types.CallbackQuery):
    try:
        message_db_id = int(callback.data[len("confirm_delete_msg_"):])
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = await delete_teacher_message(pool, message_db_id)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                reply_markup=admin_menu()
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.\n\n"
                "‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                reply_markup=admin_menu()
            )
            
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}\n\n"
            "‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=admin_menu()
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data == "cancel_delete_msg")
async def cancel_delete_teacher_message(callback: types.CallbackQuery):
    # –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º menu_back –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await menu_back_handler(callback, None)
    await callback.answer()


@dp.callback_query(F.data == "admin_my_publish_time")
async def admin_my_publish_time(callback: types.CallbackQuery):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –≤ –õ–°", show_alert=True)
        return
    
    now = datetime.datetime.now(TZ)
    times = await get_publish_times(pool)
    if not times:
        text = "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ."
    else:
        future_times = sorted([(h, m) for _, h, m in times if (h, m) > (now.hour, now.minute)])
        if future_times:
            hh, mm = future_times[0]
            msg = f"–°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–µ–≥–æ–¥–Ω—è –≤ –û–º—Å–∫–µ: {hh:02d}:{mm:02d}"
        else:
            hh, mm = sorted([(h, m) for _, h, m in times])[0]
            msg = f"–°–µ–≥–æ–¥–Ω—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç. –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤—Ç—Ä–∞ –≤ –û–º—Å–∫–µ: {hh:02d}:{mm:02d}"
        text = msg
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_admin")]
    ])
    
    await greet_and_send(callback.from_user, text, callback=callback, markup=kb)
    await callback.answer()

@dp.callback_query(F.data == "admin_edit")
async def admin_edit_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return
    await greet_and_send(callback.from_user, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (1-6):", callback=callback)
    await state.set_state(EditRaspState.day)
    await callback.answer()

async def greet_and_send(user: types.User, text: str, message: types.Message = None, callback: types.CallbackQuery = None, markup=None, chat_id: int | None = None, include_joke: bool = False, include_week_info: bool = False):
    if include_joke:
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT text FROM anekdoty ORDER BY RAND() LIMIT 1")
                row = await cur.fetchone()
                if row:
                    text += f"\n\nüòÇ –ê–Ω–µ–∫–¥–æ—Ç:\n{row[0]}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    week_info = ""
    if include_week_info:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        week_info = ""
        if include_week_info:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            target_chat_id = chat_id or (message.chat.id if message else (callback.message.chat.id if callback else DEFAULT_CHAT_ID))
            current_week = await get_current_week_type(pool, target_chat_id)
            week_name = "–ù–µ—á–µ—Ç–Ω–∞—è" if current_week == 1 else "–ß–µ—Ç–Ω–∞—è"
            week_info = f"\n\nüìÖ –°–µ–π—á–∞—Å –Ω–µ–¥–µ–ª—è: {week_name}"
    
    nickname = await get_nickname(pool, user.id)
    greet = f"üëã –°–∞–ª–∞–º, {nickname}!\n\n" if nickname else "üëã –°–∞–ª–∞–º!\n\n"
    full_text = greet + text + week_info
    
    if callback:
        try:
            await callback.message.edit_text(full_text, reply_markup=markup)
        except:
            await callback.message.answer(full_text, reply_markup=markup)
    elif message:
        try:
            await message.answer(full_text, reply_markup=markup)
        except:
            await bot.send_message(chat_id=message.chat.id, text=full_text, reply_markup=markup)
    elif chat_id is not None:
        await bot.send_message(chat_id=chat_id, text=full_text, reply_markup=markup)
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω chat_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –õ–°
        await bot.send_message(chat_id=user.id, text=full_text, reply_markup=markup)

async def get_rasp_formatted(day, week_type, chat_id: int = DEFAULT_CHAT_ID):
    msg_lines = []
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute(
                """SELECT r.pair_number, COALESCE(r.cabinet, '') as cabinet, COALESCE(s.name, '–°–≤–æ–±–æ–¥–Ω–æ') as name
                   FROM rasp_detailed r
                   LEFT JOIN subjects s ON r.subject_id = s.id
                   WHERE r.chat_id=%s AND r.day=%s AND r.week_type=%s
                   ORDER BY r.pair_number""",
                (chat_id, day, week_type)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π chat_id
            )
            rows = await cur.fetchall()
    
    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è –µ—Å—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    max_pair = 0
    pairs_dict = {}
    for row in rows:
        pair_num = row[0]
        pairs_dict[pair_num] = row
        if pair_num > max_pair:
            max_pair = pair_num
    
    if max_pair == 0:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ."
    
    for i in range(1, max_pair + 1):
        if i in pairs_dict:
            row = pairs_dict[i]
            cabinet = row[1]
            subject_name = row[2]
            
            if subject_name == "–°–≤–æ–±–æ–¥–Ω–æ":
                msg_lines.append(f"{i}. –°–≤–æ–±–æ–¥–Ω–æ")
            else:
                # –î–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ - –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                import re
                # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ç–æ—á–µ–∫
                clean_subject_name = re.sub(r'\s+(\d+\.?\d*[–∞-—è]?|\d+\.?\d*/\d+\.?\d*|—Å–ø/–∑|–∞–∫—Ç–æ–≤—ã–π –∑–∞–ª|—Å–ø–æ—Ä—Ç–∑–∞–ª)$', '', subject_name).strip()
                
                if cabinet and cabinet != "–ù–µ —É–∫–∞–∑–∞–Ω":
                    # –ï—Å–ª–∏ –∫–∞–±–∏–Ω–µ—Ç —É–∫–∞–∑–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    msg_lines.append(f"{i}. {cabinet} {clean_subject_name}")
                else:
                    # –ï—Å–ª–∏ –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ—Ç - –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                    cabinet_match = re.search(r'(\s+)(\d+\.?\d*[–∞-—è]?|\d+\.?\d*/\d+\.?\d*|—Å–ø/–∑|–∞–∫—Ç–æ–≤—ã–π –∑–∞–ª|—Å–ø–æ—Ä—Ç–∑–∞–ª)$', subject_name)
                    if cabinet_match:
                        extracted_cabinet = cabinet_match.group(2)
                        msg_lines.append(f"{i}. {extracted_cabinet} {clean_subject_name}")
                    else:
                        msg_lines.append(f"{i}. {clean_subject_name}")
        else:
            msg_lines.append(f"{i}. –°–≤–æ–±–æ–¥–Ω–æ")
    
    return "\n".join(msg_lines)

def _job_id_for_time(hour: int, minute: int) -> str:
    return f"publish_{hour:02d}_{minute:02d}"
async def reschedule_publish_jobs(pool):
    try:
        for job in list(scheduler.get_jobs()):
            if job.id.startswith("publish_"):
                try:
                    scheduler.remove_job(job.id)
                except Exception:
                    pass
    except Exception:
        pass
    times = await get_publish_times(pool)
    for row in times:
        pid, hour, minute = row
        job_id = _job_id_for_time(hour, minute)
        try:
            scheduler.add_job(send_today_rasp, CronTrigger(hour=hour, minute=minute, timezone=TZ), id=job_id)
        except Exception:
            pass
@dp.message(Command("–∞—Ä–∫–∞–¥–∏–π", "–∞–∫—Ä–∞–¥—ã–π", "–∞–∫—Ä–∞–¥–∏–π", "–∞—Ä–∫–∞—à–∞", "–∫–æ—Ç–æ–≤", "arkadiy", "arkadiy@arcadiyis07_bot"))
async def trigger_handler(message: types.Message):
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –õ–° –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
    is_private = message.chat.type == "private"
    is_allowed_chat = message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await message.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
        return
    
    is_admin = (message.from_user.id in ALLOWED_USERS) and is_private
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    is_special_user = False
    if is_private:
        signature = await get_special_user_signature(pool, message.from_user.id)
        is_special_user = signature is not None

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞, –∞ –Ω–µ DEFAULT_CHAT_ID
    current_chat_id = message.chat.id

    await greet_and_send(
        message.from_user,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        message=message,
        markup=main_menu(is_admin=is_admin, is_special_user=is_special_user, is_group_chat=not is_private),
        include_week_info=True,
        chat_id=current_chat_id  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chat_id
    )

@dp.callback_query(F.data.startswith("menu_"))
async def menu_handler(callback: types.CallbackQuery, state: FSMContext):
    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤ –õ–° –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return
        
    action = callback.data
    if action == "menu_rasp":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=day, callback_data=f"rasp_day_{i+1}")]
                for i, day in enumerate(DAYS)
            ] + [[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]]
        )
        await greet_and_send(callback.from_user, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", callback=callback, markup=kb)
        await callback.answer()
    elif action == "menu_zvonki":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ë—É–¥–Ω–∏–µ –¥–Ω–∏", callback_data="zvonki_weekday")],
            [InlineKeyboardButton(text="üìÖ –°—É–±–±–æ—Ç–∞", callback_data="zvonki_saturday")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ])
        await greet_and_send(callback.from_user, "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", callback=callback, markup=kb)
        await callback.answer()
    elif action == "menu_admin":
        if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
            await callback.answer("‚õî –ê–¥–º–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
            return
        await greet_and_send(callback.from_user, "‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", callback=callback, markup=admin_menu())
        await callback.answer()
    elif action == "menu_back":
        await menu_back_handler(callback, state)

@dp.callback_query(F.data == "tomorrow_rasp")
async def tomorrow_rasp_handler(callback: types.CallbackQuery):

    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return

    now = datetime.datetime.now(TZ)
    hour = now.hour
    day = now.isoweekday()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –¥–ª—è –ø–æ–∫–∞–∑–∞ (–ª–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–µ)
    if hour >= 18:
        target_date = now.date() + datetime.timedelta(days=1)
        day_to_show = target_date.isoweekday()
        if day_to_show == 7:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            day_to_show = 1
            target_date += datetime.timedelta(days=1)
            day_name = "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"
        else:
            day_name = "–∑–∞–≤—Ç—Ä–∞"
    else:
        target_date = now.date()
        day_to_show = day
        day_name = "—Å–µ–≥–æ–¥–Ω—è"
        if day_to_show == 7:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            day_to_show = 1
            target_date += datetime.timedelta(days=1)
            day_name = "–∑–∞–≤—Ç—Ä–∞ (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"
        else:
            # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏ –≤—Ä–µ–º—è –¥–æ 18:00, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤—Ç—Ä–∞
            target_date += datetime.timedelta(days=1)
            day_to_show = target_date.isoweekday()
            if day_to_show == 7:  # –ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                day_to_show = 1
                target_date += datetime.timedelta(days=1)
                day_name = "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"
            else:
                day_name = "–∑–∞–≤—Ç—Ä–∞"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –Ω–µ–¥–µ–ª–∏
    week_type = await get_current_week_type(pool, DEFAULT_CHAT_ID, target_date)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    text = await get_rasp_formatted(day_to_show, week_type)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    day_names = {
        1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        2: "–í—Ç–æ—Ä–Ω–∏–∫", 
        3: "–°—Ä–µ–¥–∞",
        4: "–ß–µ—Ç–≤–µ—Ä–≥",
        5: "–ü—è—Ç–Ω–∏—Ü–∞",
        6: "–°—É–±–±–æ—Ç–∞"
    }
    
    week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_type == 1 else "—á–µ—Ç–Ω–∞—è"
    message = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name} ({day_names[day_to_show]}) | –ù–µ–¥–µ–ª—è: {week_name}\n\n{text}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT text FROM anekdoty ORDER BY RAND() LIMIT 1")
            row = await cur.fetchone()
            if row:
                message += f"\n\nüòÇ –ê–Ω–µ–∫–¥–æ—Ç:\n{row[0]}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
    ])
    
    await greet_and_send(callback.from_user, message, callback=callback, markup=kb)
    await callback.answer()

@dp.callback_query(F.data.startswith("rasp_day_"))
async def on_rasp_day(callback: types.CallbackQuery):

    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return

    parts = callback.data.split("_")
    try:
        day = int(parts[-1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è", show_alert=True)
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–∞—è", callback_data=f"rasp_show_{day}_1")],
        [InlineKeyboardButton(text="2Ô∏è‚É£ –ß–µ—Ç–Ω–∞—è", callback_data=f"rasp_show_{day}_2")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_rasp")]
    ])
    await greet_and_send(callback.from_user, f"üìÖ {DAYS[day-1]} ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", callback=callback, markup=kb)
    await callback.answer()

@dp.message(Command("–Ω–∏–∫–Ω–µ–π–º"))
async def cmd_set_nickname(message: types.Message):

    if not is_allowed_chat(message.chat.id):
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–Ω–∏–∫–Ω–µ–π–º <–≤–∞—à –Ω–∏–∫–Ω–µ–π–º>")
        return
    nickname = parts[1].strip()
    user_id = message.from_user.id 
    try:
        await set_nickname(pool, user_id, nickname)
        await message.answer(f"‚úÖ –í–∞—à –Ω–∏–∫–Ω–µ–π–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {nickname}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∏–∫–Ω–µ–π–º–∞: {e}")
@dp.message(Command("–∞–Ω–µ–∫–¥–æ—Ç"))
async def cmd_anekdot(message: types.Message):

    if not is_allowed_chat(message.chat.id):
        return
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT text FROM anekdoty ORDER BY RAND() LIMIT 1")
            row = await cur.fetchone()
            if row:
                await message.answer(f"üòÇ –ê–Ω–µ–∫–¥–æ—Ç:\n\n{row[0]}")
            else:
                await message.answer("‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç–æ–≤.")
@dp.callback_query(F.data.startswith("rasp_show_"))
async def on_rasp_show(callback: types.CallbackQuery):

    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return

    parts = callback.data.split("_")
    day = int(parts[2])
    week_type = int(parts[3])
    text = await get_rasp_formatted(day, week_type)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"rasp_day_{day}")]
    ])
    
    await greet_and_send(callback.from_user, f"üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{text}", callback=callback, markup=kb, include_joke=True)
    await callback.answer()

@dp.callback_query(F.data.startswith("zvonki_"))
async def zvonki_handler(callback: types.CallbackQuery):
    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return
    action = callback.data

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_zvonki")]
    ])

    if action == "zvonki_weekday":
        schedule = get_zvonki(is_saturday=False)
        await greet_and_send(
            callback.from_user,
            f"üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ (–±—É–¥–Ω–∏–µ –¥–Ω–∏):\n{schedule}",
            callback=callback,
            markup=kb,
            include_joke=True 
        )
    elif action == "zvonki_saturday":
        schedule = get_zvonki(is_saturday=True)
        await greet_and_send(
            callback.from_user,
            f"üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ (—Å—É–±–±–æ—Ç–∞):\n{schedule}",
            callback=callback,
            markup=kb,
            include_joke=True  
        )
    await callback.answer()

@dp.callback_query(F.data == "admin_show_chet")
async def admin_show_chet(callback: types.CallbackQuery):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –≤ –õ–°", show_alert=True)
        return
    
    chat_id = callback.message.chat.id
    current = await get_current_week_type(pool, chat_id)
    current_str = "–Ω–µ—á–µ—Ç–Ω–∞—è (1)" if current == 1 else "—á–µ—Ç–Ω–∞—è (2)"
    
    msg = f"–¢–µ–∫—É—â–∞—è —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏: {current_str}"
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_admin")]
    ])
    
    await greet_and_send(callback.from_user, msg, callback=callback, markup=kb)
    await callback.answer()

@dp.callback_query(F.data == "admin_list_publish_times")
async def admin_list_publish_times(callback: types.CallbackQuery):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –≤ –õ–°", show_alert=True)
        return
    
    rows = await get_publish_times(pool)
    if not rows:
        text = "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–µ –∑–∞–¥–∞–Ω–æ."
    else:
        lines = [f"{rid}: {hour:02d}:{minute:02d} (–û–º—Å–∫)" for rid, hour, minute in rows]
        text = "–¢–µ–∫—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–û–º—Å–∫):\n" + "\n".join(lines)
        text += "\n\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delptime <id>"
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_admin")]
    ])
    
    await greet_and_send(callback.from_user, text, callback=callback, markup=kb)
    await callback.answer()
# –í —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
@dp.callback_query(F.data == "admin_set_publish_time")
async def admin_set_publish_time(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –≤ –õ–°", show_alert=True)
        return
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])
    
    await greet_and_send(
        callback.from_user,
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –ø–æ –û–º—Å–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20:00):",
        callback=callback,
        markup=kb
    )
    await state.set_state(SetPublishTimeState.time)

@dp.message(Command("delptime"))
async def cmd_delptime(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delptime <id> (id –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–π)")
        return
    try:
        pid = int(parts[1])
        await delete_publish_time(pool, pid)
        await reschedule_publish_jobs(pool)
        await message.answer(f"‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å id={pid} —É–¥–∞–ª–µ–Ω–æ –∏ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
@dp.message(SetPublishTimeState.time)
async def set_publish_time_handler(message: types.Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
        await state.clear()
        return
    txt = message.text.strip()
    m = re.match(r"^(\d{1,2}):(\d{1,2})$", txt)
    if not m:
        await message.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 20:00")
        return
    hh = int(m.group(1))
    mm = int(m.group(2))
    if not (0 <= hh <= 23 and 0 <= mm <= 59):
        await message.answer("‚ö† –ß–∞—Å—ã 0-23, –º–∏–Ω—É—Ç—ã 0-59.")
        return
    try:
        await add_publish_time(pool, hh, mm)
        await reschedule_publish_jobs(pool) 
        await message.answer(f"‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {hh:02d}:{mm:02d} (–û–º—Å–∫).")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    finally:
        await state.clear()

@dp.callback_query(F.data == "admin_setchet")
async def admin_setchet_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî¥ –ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", callback_data="set_week_1")],
        [InlineKeyboardButton(text="üîµ –ß–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", callback_data="set_week_2")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])
    
    await greet_and_send(
        callback.from_user, 
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:", 
        callback=callback, 
        markup=kb
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("set_week_"))
async def set_week_type_handler(callback: types.CallbackQuery):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return
    
    week_type = int(callback.data.split("_")[2])
    chat_id = callback.message.chat.id
    
    try:
        await set_current_week_type(pool, chat_id, week_type)
        week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_type == 1 else "—á–µ—Ç–Ω–∞—è"
        
        await callback.message.edit_text(
            f"‚úÖ –ß–µ—Ç–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {week_name} –Ω–µ–¥–µ–ª—è\n\n"
            f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=admin_menu()
        )
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–µ—Ç–Ω–æ—Å—Ç–∏: {e}\n\n"
            f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=admin_menu()
        )
    
    await callback.answer()

@dp.message(SetChetState.week_type)
async def setchet_handler(message: types.Message, state: FSMContext):
    try:
        week_type = int(message.text)
        if week_type not in [1, 2]:
            raise ValueError
        await set_week_type(pool, DEFAULT_CHAT_ID, week_type)
        await greet_and_send(
            message.from_user,
            f"‚úÖ –ß–µ—Ç–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {week_type} ({'–Ω–µ—á–µ—Ç–Ω–∞—è' if week_type==1 else '—á–µ—Ç–Ω–∞—è'})",
            message=message
        )
        await state.clear()
    except ValueError:
        await greet_and_send(message.from_user, "‚ö† –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.", message=message)

async def send_today_rasp():
    for chat_id in ALLOWED_CHAT_IDS:
        try:
            now = datetime.datetime.now(TZ)
            hour = now.hour
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if hour >= 18:
                target_date = now.date() + datetime.timedelta(days=1)
                day_to_post = target_date.isoweekday()
                day_name = "–∑–∞–≤—Ç—Ä–∞"
                
                if day_to_post == 7:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    target_date += datetime.timedelta(days=1)
                    day_to_post = 1
                    day_name = "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"
            else:
                target_date = now.date()
                day_to_post = now.isoweekday()
                day_name = "—Å–µ–≥–æ–¥–Ω—è"
                
                if day_to_post == 7:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    target_date += datetime.timedelta(days=1)
                    day_to_post = 1
                    day_name = "–∑–∞–≤—Ç—Ä–∞ (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"
            
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —á–µ—Ç–Ω–æ—Å—Ç—å –∏–∑ –±–∞–∑—ã
            week_type = await get_current_week_type(pool, chat_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            text = await get_rasp_formatted(day_to_post, week_type, chat_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            day_names = {
                1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞",
                4: "–ß–µ—Ç–≤–µ—Ä–≥", 5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞"
            }
            
            week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_type == 1 else "—á–µ—Ç–Ω–∞—è"
            msg = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name} ({day_names[day_to_post]}) | –ù–µ–¥–µ–ª—è: {week_name}\n\n{text}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç
            async with pool.acquire() as conn:
                async with conn.cursor() as cur:
                    await cur.execute("SELECT text FROM anekdoty ORDER BY RAND() LIMIT 1")
                    row = await cur.fetchone()
                    if row:
                        msg += f"\n\nüòÇ –ê–Ω–µ–∫–¥–æ—Ç:\n{row[0]}"
            
            await bot.send_message(chat_id, msg)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")  

async def main():
    global pool
    pool = await get_pool()
    await init_db(pool)
    await ensure_columns(pool)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await load_special_users(pool)
    
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await reschedule_publish_jobs(pool)
    
    scheduler.start()
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
    jobs = scheduler.get_jobs()
    print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: {len(jobs)}")
    for job in jobs:
        print(f"–ó–∞–¥–∞–Ω–∏–µ: {job.id}, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {job.next_run_time}")
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())