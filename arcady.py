import subprocess
import shutil
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
import json
import tempfile
import asyncio
import os
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ChatPermissions
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from zoneinfo import ZoneInfo
from typing import List, Tuple, Dict
import aiomysql
import random
import ssl
import re
import aiohttp
import io
from bs4 import BeautifulSoup

TOKEN = os.getenv("BOT_TOKEN")
CHAT_IDS_STR = os.getenv("CHAT_ID", "")
ALLOWED_CHAT_IDS = [int(x.strip()) for x in CHAT_IDS_STR.split(",") if x.strip()]
DEFAULT_CHAT_ID = ALLOWED_CHAT_IDS[0] if ALLOWED_CHAT_IDS else 0
ALLOWED_USERS = [5228681344, 7620086223]
SPECIAL_USER_ID = []
DB_HOST = os.getenv("DB_HOST")
DB_PORT = int(os.getenv("DB_PORT", "3306"))
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_NAME = os.getenv("DB_NAME")
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
TZ = ZoneInfo("Asia/Omsk")
scheduler = AsyncIOScheduler(timezone=TZ)
ssl_ctx = ssl.create_default_context()
ssl_ctx.check_hostname = False
ssl_ctx.verify_mode = ssl.CERT_NONE


async def create_database_backup():
    """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MySQL"""
    try:
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î...")
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        timestamp = datetime.datetime.now(TZ).strftime('%Y%m%d_%H%M%S')
        backup_filename = f"backup_{timestamp}.sql"
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–∞
        with tempfile.TemporaryDirectory() as temp_dir:
            backup_path = os.path.join(temp_dir, backup_filename)
            
            print(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å: {backup_path}")
            print(f"üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î: {DB_HOST}:{DB_PORT}, –±–∞–∑–∞: {DB_NAME}")
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ MySQL
            dump_cmd = [
                'mysqldump',
                f'-h{DB_HOST}',
                f'-P{DB_PORT}',
                f'-u{DB_USER}',
                f'-p{DB_PASSWORD}',
                '--single-transaction',
                '--skip-lock-tables',
                DB_NAME
            ]
            
            print(f"üîß –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {' '.join(dump_cmd).replace(DB_PASSWORD, '***')}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∞–º–ø
            with open(backup_path, 'w') as backup_file:
                process = await asyncio.create_subprocess_exec(
                    *dump_cmd,
                    stdout=backup_file,
                    stderr=asyncio.subprocess.PIPE
                )
                
                _, stderr = await process.communicate()
                
                print(f"üîß –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ mysqldump: {process.returncode}")
                
                if process.returncode != 0:
                    error_msg = stderr.decode() if stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ –ë–î: {error_msg}")
                    return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if os.path.exists(backup_path):
                file_size = os.path.getsize(backup_path)
                print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞: {file_size} bytes")
                
                if file_size > 0:
                    print(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path} ({file_size} bytes)")
                    
                    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    with open(backup_path, 'r') as f:
                        first_lines = f.read(100)
                    print(f"üìù –ù–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞: {first_lines}")
                    
                    return backup_path
                else:
                    print("‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –ø—É—Å—Ç–æ–π")
                    return None
            else:
                print("‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return None
                
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
        import traceback
        print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return None

async def create_database_backup_python():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –±—ç–∫–∞–ø–∞ —á–µ—Ä–µ–∑ Python (–±–µ–∑ mysqldump)"""
    try:
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º Python-–±—ç–∫–∞–ø...")
        
        timestamp = datetime.datetime.now(TZ).strftime('%Y%m%d_%H%M%S')
        backup_filename = f"backup_python_{timestamp}.sql"
        
        with tempfile.TemporaryDirectory() as temp_dir:
            backup_path = os.path.join(temp_dir, backup_filename)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            async with pool.acquire() as conn:
                async with conn.cursor() as cur:
                    await cur.execute("SHOW TABLES")
                    tables = [row[0] for row in await cur.fetchall()]
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {tables}")
            
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write("-- Backup created by Python\n")
                f.write(f"-- Date: {datetime.datetime.now(TZ)}\n")
                f.write(f"-- Database: {DB_NAME}\n\n")
                
                for table in tables:
                    f.write(f"\n-- Table: {table}\n")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                    async with pool.acquire() as conn:
                        async with conn.cursor() as cur:
                            await cur.execute(f"SHOW CREATE TABLE `{table}`")
                            create_table = await cur.fetchone()
                            if create_table:
                                f.write(f"{create_table[1]};\n\n")
                            
                            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                            await cur.execute(f"SELECT * FROM `{table}`")
                            rows = await cur.fetchall()
                            
                            if rows:
                                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
                                await cur.execute(f"DESCRIBE `{table}`")
                                columns = [col[0] for col in await cur.fetchall()]
                                
                                for row in rows:
                                    values = []
                                    for value in row:
                                        if value is None:
                                            values.append("NULL")
                                        elif isinstance(value, (int, float)):
                                            values.append(str(value))
                                        else:
                                            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                                            escaped_value = str(value).replace("'", "''").replace("\\", "\\\\")
                                            values.append(f"'{escaped_value}'")
                                    
                                    f.write(f"INSERT INTO `{table}` ({', '.join([f'`{col}`' for col in columns])}) VALUES ({', '.join(values)});\n")
                            
                            f.write("\n")
            
            if os.path.exists(backup_path) and os.path.getsize(backup_path) > 0:
                print(f"‚úÖ Python-–±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
                return backup_path
            else:
                print("‚ùå Python-–±—ç–∫–∞–ø –Ω–µ —É–¥–∞–ª—Å—è")
                return None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Python-–±—ç–∫–∞–ø–∞: {e}")
        import traceback
        print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return None


async def upload_to_google_drive(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ Google Drive"""
    try:
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ Google Drive...")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        credentials_json = os.getenv("GOOGLE_DRIVE_CREDENTIALS_JSON")
        
        if credentials_json:
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            try:
                creds_data = json.loads(credentials_json)
                SCOPES = ['https://www.googleapis.com/auth/drive']
                creds = service_account.Credentials.from_service_account_info(
                    creds_data, scopes=SCOPES
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
                return False
        else:
            # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± —Å —Ñ–∞–π–ª–æ–º
            credentials_file = os.getenv("GOOGLE_DRIVE_CREDENTIALS_FILE", "credentials.json")
            print(f"üìÅ –ò—â–µ–º —Ñ–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {credentials_file}")
            
            if not os.path.exists(credentials_file):
                print(f"‚ùå –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            print("‚úÖ –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω")
            SCOPES = ['https://www.googleapis.com/auth/drive']
            creds = service_account.Credentials.from_service_account_file(
                credentials_file, scopes=SCOPES
            )

        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
        service = build('drive', 'v3', credentials=creds)
        
        file_name = os.path.basename(file_path)
        file_metadata = {
            'name': file_name,
            'mimeType': 'application/sql'
        }
        
        folder_id = os.getenv("GOOGLE_DRIVE_FOLDER_ID")
        if folder_id:
            print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–ø–∫—É: {folder_id}")
            file_metadata['parents'] = [folder_id]
        
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {file_name}")
        media = MediaFileUpload(file_path, resumable=True)
        file = service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id, name'
        ).execute()
        
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ Google Drive! ID: {file.get('id')}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive: {e}")
        return False

async def backup_database_job():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –ë–î...")
        
        # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
        backup_path = await create_database_backup()
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º Python-–º–µ—Ç–æ–¥
        if not backup_path:
            print("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –±—ç–∫–∞–ø–∞...")
            backup_path = await create_database_backup_python()
        
        if not backup_path:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ë–î –Ω–∏ –æ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Google Drive
        success = await upload_to_google_drive(backup_path)
        if success:
            print("‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ Google Drive")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            for admin_id in ALLOWED_USERS:
                try:
                    await bot.send_message(
                        admin_id, 
                        f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n"
                        f"üìÅ –§–∞–π–ª: {os.path.basename(backup_path)}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {datetime.datetime.now(TZ).strftime('%d.%m.%Y %H:%M')}"
                    )
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±—ç–∫–∞–ø –Ω–∞ Google Drive")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –±—ç–∫–∞–ø–∞: {e}")
        import traceback
        print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")

@dp.message(Command("backup"))
async def cmd_backup(message: types.Message):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    await message.answer("üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    backup_path = await create_database_backup()
    if not backup_path:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ë–î")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Google Drive
    success = await upload_to_google_drive(backup_path)
    if success:
        await message.answer(
            f"‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ Google Drive!\n"
            f"üìÅ –§–∞–π–ª: {os.path.basename(backup_path)}"
        )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±—ç–∫–∞–ø –Ω–∞ Google Drive")


@dp.message(Command("test_backup"))
async def cmd_test_backup(message: types.Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –±—ç–∫–∞–ø–∞"""
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    await message.answer("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –±—ç–∫–∞–ø–∞...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
    await message.answer("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ (mysqldump)...")
    backup_path1 = await create_database_backup()
    
    if backup_path1:
        await message.answer("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        await message.answer("‚ùå –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Python –º–µ—Ç–æ–¥
    await message.answer("2. –¢–µ—Å—Ç–∏—Ä—É–µ–º Python –º–µ—Ç–æ–¥...")
    backup_path2 = await create_database_backup_python()
    
    if backup_path2:
        await message.answer("‚úÖ Python –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ Google Drive
        success = await upload_to_google_drive(backup_path2)
        if success:
            await message.answer("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Google Drive —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            await message.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Google Drive –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        await message.answer("‚ùå Python –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

def is_allowed_chat(chat_id: int) -> bool:
    return chat_id in ALLOWED_CHAT_IDS

async def get_pool():
    return await aiomysql.create_pool(
        host=DB_HOST,
        port=DB_PORT,
        user=DB_USER,
        password=DB_PASSWORD,
        db=DB_NAME,
        ssl=ssl_ctx,
        autocommit=True
    )
async def init_db(pool):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS rasp (
                id INT AUTO_INCREMENT PRIMARY KEY,
                chat_id BIGINT,
                day INT,
                week_type INT,
                text TEXT
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS birthdays (
                id INT AUTO_INCREMENT PRIMARY KEY,
                user_name VARCHAR(255) NOT NULL,
                birth_date DATE NOT NULL,
                added_by_user_id BIGINT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS nicknames (
                user_id BIGINT PRIMARY KEY,
                nickname VARCHAR(255)
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS publish_times (
                id INT AUTO_INCREMENT PRIMARY KEY,
                hour INT NOT NULL,
                minute INT NOT NULL
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS anekdoty (
                id INT AUTO_INCREMENT PRIMARY KEY,
                text TEXT NOT NULL
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS subjects (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                rK BOOLEAN DEFAULT FALSE
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS special_users (
                user_id BIGINT PRIMARY KEY,
                signature VARCHAR(255) NOT NULL
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS rasp_detailed (
                id INT AUTO_INCREMENT PRIMARY KEY,
                chat_id BIGINT,
                day INT,
                week_type INT,
                pair_number INT,
                subject_id INT,
                cabinet VARCHAR(50),
                FOREIGN KEY (subject_id) REFERENCES subjects(id)
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS current_week_type (
                chat_id BIGINT PRIMARY KEY,
                week_type INT NOT NULL DEFAULT 1,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )""")
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS teacher_messages (
                id INT AUTO_INCREMENT PRIMARY KEY,
                message_id BIGINT,
                from_user_id BIGINT,
                signature VARCHAR(255),
                message_text TEXT,
                message_type VARCHAR(50),
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )""")
            # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π (–±–µ–∑ chat_id - –æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö)
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS homework (
                id INT AUTO_INCREMENT PRIMARY KEY,
                subject_id INT,
                due_date DATE,
                task_text TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (subject_id) REFERENCES subjects(id)
            )""")

            await conn.commit()

async def ensure_columns(pool):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SHOW COLUMNS FROM week_setting LIKE 'set_at'")
            row = await cur.fetchone()
            if not row:
                await cur.execute("ALTER TABLE week_setting ADD COLUMN set_at DATE")

async def ensure_birthday_columns(pool):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É birthdays"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ added_by_user_id
            await cur.execute("SHOW COLUMNS FROM birthdays LIKE 'added_by_user_id'")
            row = await cur.fetchone()
            if not row:
                await cur.execute("ALTER TABLE birthdays ADD COLUMN added_by_user_id BIGINT")
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ added_by_user_id –≤ —Ç–∞–±–ª–∏—Ü—É birthdays")


async def sync_rasp_to_all_chats(source_chat_id: int):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ –≤–æ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ"""
    try:
        synced_count = 0
        
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                # –ö–æ–ø–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ –≤–æ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                for chat_id in ALLOWED_CHAT_IDS:
                    if chat_id == source_chat_id:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç
                    
                    # –û—á–∏—â–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ
                    await cur.execute("DELETE FROM rasp_detailed WHERE chat_id=%s", (chat_id,))
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
                    await cur.execute("""
                        INSERT INTO rasp_detailed (chat_id, day, week_type, pair_number, subject_id, cabinet)
                        SELECT %s, day, week_type, pair_number, subject_id, cabinet 
                        FROM rasp_detailed 
                        WHERE chat_id=%s
                    """, (chat_id, source_chat_id))
                    
                    synced_count += 1
        
        print(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ {synced_count} —á–∞—Ç–æ–≤.")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return False

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
async def add_homework(pool, subject_id: int, due_date: str, task_text: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑—É (–æ–±—â–µ–µ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤)"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ DD.MM.YYYY –≤ YYYY-MM-DD –¥–ª—è MySQL
    try:
        due_date_mysql = datetime.datetime.strptime(due_date, '%d.%m.%Y').strftime('%Y-%m-%d')
    except ValueError:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO homework (subject_id, due_date, task_text)
                VALUES (%s, %s, %s)
            """, (subject_id, due_date_mysql, task_text))

async def get_all_homework(pool, limit: int = 50) -> List[Tuple]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤)"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                SELECT h.id, s.name, h.due_date, h.task_text, h.created_at
                FROM homework h
                JOIN subjects s ON h.subject_id = s.id
                ORDER BY h.due_date ASC, h.created_at DESC
                LIMIT %s
            """, (limit,))
            return await cur.fetchall()

async def get_homework_by_date(pool, date: str) -> List[Tuple]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É (–æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤)"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if '.' in date:
        try:
            date = datetime.datetime.strptime(date, '%d.%m.%Y').strftime('%Y-%m-%d')
        except ValueError:
            return []
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                SELECT h.id, s.name, h.due_date, h.task_text, h.created_at
                FROM homework h
                JOIN subjects s ON h.subject_id = s.id
                WHERE h.due_date = %s
                ORDER BY h.created_at DESC
            """, (date,))
            return await cur.fetchall()

async def get_homework_by_id(pool, homework_id: int) -> Tuple:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                SELECT h.id, s.name, h.due_date, h.task_text, h.created_at, h.subject_id
                FROM homework h
                JOIN subjects s ON h.subject_id = s.id
                WHERE h.id = %s
            """, (homework_id,))
            return await cur.fetchone()

async def update_homework(pool, homework_id: int, subject_id: int, due_date: str, task_text: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    current_hw = await get_homework_by_id(pool, homework_id)
    if not current_hw:
        raise ValueError("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ï—Å–ª–∏ subject_id –Ω–µ —É–∫–∞–∑–∞–Ω (None), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π
    if subject_id is None:
        subject_id = current_hw[5]  # current_subject_id
    
    # –ï—Å–ª–∏ due_date –Ω–µ —É–∫–∞–∑–∞–Ω (None), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π
    if due_date is None:
        due_date = current_hw[2]  # current_due_date
        if isinstance(due_date, datetime.date):
            due_date = due_date.strftime('%Y-%m-%d')
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É (–º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ DD.MM.YYYY)
    if isinstance(due_date, str) and '.' in due_date:
        due_date_mysql = datetime.datetime.strptime(due_date, '%d.%m.%Y').strftime('%Y-%m-%d')
    else:
        due_date_mysql = due_date
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                UPDATE homework 
                SET subject_id=%s, due_date=%s, task_text=%s
                WHERE id=%s
            """, (subject_id, due_date_mysql, task_text, homework_id))

async def delete_homework(pool, homework_id: int):
    """–£–¥–∞–ª—è–µ—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("DELETE FROM homework WHERE id=%s", (homework_id,))

async def has_homework_for_date(pool, date: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if '.' in date:
        try:
            date = datetime.datetime.strptime(date, '%d.%m.%Y').strftime('%Y-%m-%d')
        except ValueError:
            return False
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT COUNT(*) FROM homework WHERE due_date=%s", (date,))
            result = await cur.fetchone()
            return result[0] > 0 if result else False

async def set_nickname(pool, user_id: int, nickname: str):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO nicknames (user_id, nickname) 
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE nickname=%s
            """, (user_id, nickname, nickname))
async def get_nickname(pool, user_id: int) -> str | None:
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT nickname FROM nicknames WHERE user_id=%s", (user_id,))
            row = await cur.fetchone()
            return row[0] if row else None
async def add_publish_time(pool, hour: int, minute: int):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute(
                "INSERT INTO publish_times (hour, minute) VALUES (%s, %s)", 
                (hour, minute)
            )
            await conn.commit() 
async def get_publish_times(pool):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT id, hour, minute FROM publish_times ORDER BY hour, minute")
            rows = await cur.fetchall()
            return rows 
async def delete_publish_time(pool, pid: int):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("DELETE FROM publish_times WHERE id=%s", (pid,))
async def clear_publish_times(pool):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("DELETE FROM publish_times")
async def set_week_type(pool, chat_id, week_type):
    today = datetime.datetime.now(TZ).date()
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO week_setting (chat_id, week_type, set_at)
                VALUES (%s, %s, %s)
                ON DUPLICATE KEY UPDATE week_type=%s, set_at=%s
            """, (chat_id, week_type, today, week_type, today))

async def load_special_users(pool):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global SPECIAL_USER_ID
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT user_id FROM special_users")
            rows = await cur.fetchall()
            SPECIAL_USER_ID = [row[0] for row in rows]
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(SPECIAL_USER_ID)} —Å–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {SPECIAL_USER_ID}")




@dp.message(Command("–∞–∫–∏–∫", "–∞–∫ick"))
async def cmd_admin_kick(message: types.Message):

    if not is_allowed_chat(message.chat.id):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
    if message.chat.type not in ["group", "supergroup"]:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –≤ —á–∞—Ç–µ
    try:
        bot_member = await bot.get_chat_member(message.chat.id, bot.id)
        if bot_member.status not in ["administrator", "creator"]:
            await message.answer("‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ")
            return
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–ª–∞–π
    if not message.reply_to_message:
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /–∞–∫–∏–∫")
        return
    
    try:
        user_id = message.reply_to_message.from_user.id
        user_to_kick = message.reply_to_message.from_user
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –∫–∏–∫ —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if user_id == message.from_user.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
            return
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –∫–∏–∫ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ ALLOWED_USERS
        if user_id in ALLOWED_USERS:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –∫–∏–∫–Ω—É—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞
        try:
            target_member = await bot.get_chat_member(message.chat.id, user_id)
            if target_member.status == "creator":
                await message.answer("‚ùå –ù–µ –º–æ–≥—É –∫–∏–∫–Ω—É—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞")
                return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —Ü–µ–ª–∏: {e}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∏–∫
        await bot.ban_chat_member(message.chat.id, user_id)
        await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_kick.first_name} (@{user_to_kick.username or '–Ω–µ—Ç'}) –±—ã–ª –∫–∏–∫–Ω—É—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è
        await asyncio.sleep(30)
        await bot.unban_chat_member(message.chat.id, user_id)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ: {e}")

@dp.message(Command("–∞–º—É—Ç", "–∞mut"))
async def cmd_admin_mute(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not is_allowed_chat(message.chat.id):
        return

    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
    if message.chat.type not in ["group", "supergroup"]:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –≤ —á–∞—Ç–µ
    try:
        bot_member = await bot.get_chat_member(message.chat.id, bot.id)
        if bot_member.status not in ["administrator", "creator"]:
            await message.answer("‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ")
            return
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = message.text.split()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(args) < 3:
        await message.answer(
            "‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "‚Ä¢ /–∞–º—É—Ç 10 —Å–µ–∫—É–Ω–¥ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "‚Ä¢ /–∞–º—É—Ç 2 —á–∞—Å–∞ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "‚Ä¢ /–∞–º—É—Ç 30 –º–∏–Ω—É—Ç (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "‚Ä¢ /–∞–º—É—Ç 1 –¥–µ–Ω—å (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã: —Å–µ–∫—É–Ω–¥—ã, –º–∏–Ω—É—Ç—ã, —á–∞—Å—ã, –¥–Ω–∏"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–ª–∞–π
    if not message.reply_to_message:
        await message.answer("‚ö† –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å")
        return
    
    try:
        user_id = message.reply_to_message.from_user.id
        user_to_mute = message.reply_to_message.from_user
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –º—É—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if user_id == message.from_user.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
            return
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –º—É—Ç –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ ALLOWED_USERS
        if user_id in ALLOWED_USERS:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –∑–∞–º—É—Ç–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞
        try:
            target_member = await bot.get_chat_member(message.chat.id, user_id)
            if target_member.status == "creator":
                await message.answer("‚ùå –ù–µ –º–æ–≥—É –∑–∞–º—É—Ç–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞")
                return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —Ü–µ–ª–∏: {e}")
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è - –±–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π –∏ —Ç—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
        number_str = args[1]
        unit = args[2].lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–æ –≤–∞–ª–∏–¥–Ω–æ
        try:
            number = int(number_str)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: /–∞–º—É—Ç 10 —Å–µ–∫—É–Ω–¥")
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
        duration = 0
        if unit in ['—Å–µ–∫—É–Ω–¥', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫', '—Å']:
            duration = number
        elif unit in ['–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç—É', '–º–∏–Ω', '–º']:
            duration = number * 60
        elif unit in ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤', '—á']:
            duration = number * 3600
        elif unit in ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π', '–¥–Ω']:
            duration = number * 86400
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å–µ–∫—É–Ω–¥—ã, –º–∏–Ω—É—Ç—ã, —á–∞—Å—ã, –¥–Ω–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (30 –¥–Ω–µ–π)
        if duration > 2592000:  # 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞ - 30 –¥–Ω–µ–π")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (10 —Å–µ–∫—É–Ω–¥)
        if duration < 10:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞ - 10 —Å–µ–∫—É–Ω–¥")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É—Ç
        until_date = datetime.datetime.now() + datetime.timedelta(seconds=duration)
        
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=types.ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False,
                can_send_polls=False,
                can_invite_users=False,
                can_pin_messages=False,
                can_change_info=False
            ),
            until_date=until_date
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        time_display = format_duration(duration)
        await message.answer(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_mute.first_name} (@{user_to_mute.username or '–Ω–µ—Ç'}) –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {time_display} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")

@dp.message(Command("–∞—Ä–∞–∑–º—É—Ç", "–∞unmute"))
async def cmd_admin_unmute(message: types.Message):

    if not is_allowed_chat(message.chat.id):
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
    if message.chat.type not in ["group", "supergroup"]:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –≤ —á–∞—Ç–µ
    try:
        bot_member = await bot.get_chat_member(message.chat.id, bot.id)
        if bot_member.status not in ["administrator", "creator"]:
            await message.answer("‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ")
            return
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–ª–∞–π
    if not message.reply_to_message:
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /–∞—Ä–∞–∑–º—É—Ç")
        return
    
    try:
        user_id = message.reply_to_message.from_user.id
        user_to_unmute = message.reply_to_message.from_user
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=types.ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
                can_send_polls=True,
                can_invite_users=True,
                can_pin_messages=False,
                can_change_info=False
            )
        )
        
        await message.answer(f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_unmute.first_name} (@{user_to_unmute.username or '–Ω–µ—Ç'}) —Ä–∞–∑–º—å—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}")

@dp.message(Command("–∞—Å–ø–∞–º", "–∞spam"))
async def cmd_admin_spam_clean(message: types.Message):
    if not is_allowed_chat(message.chat.id):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
    if message.chat.type not in ["group", "supergroup"]:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–ª–∞–π
    if not message.reply_to_message:
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /–∞—Å–ø–∞–º")
        return
    
    try:
        spam_user_id = message.reply_to_message.from_user.id
        spam_user = message.reply_to_message.from_user
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        await message.delete()
        
        # –£–¥–∞–ª—è–µ–º —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.reply_to_message.delete()
        
        # –ö–∏–∫–∞–µ–º —Å–ø–∞–º–µ—Ä–∞
        await bot.ban_chat_member(message.chat.id, spam_user_id)
        
        await message.answer(f"üßπ –°–ø–∞–º –æ—Ç {spam_user.first_name} (@{spam_user.username or '–Ω–µ—Ç'}) —É–¥–∞–ª–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç")
        
        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
        await asyncio.sleep(60)
        await bot.unban_chat_member(message.chat.id, spam_user_id)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∞–º–∞: {e}")


def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º"""
    if seconds < 60:
        if seconds == 1:
            return "1 —Å–µ–∫—É–Ω–¥—É"
        elif 2 <= seconds <= 4:
            return f"{seconds} —Å–µ–∫—É–Ω–¥—ã"
        else:
            return f"{seconds} —Å–µ–∫—É–Ω–¥"
    elif seconds < 3600:
        minutes = seconds // 60
        if minutes == 1:
            return "1 –º–∏–Ω—É—Ç—É"
        elif 2 <= minutes <= 4:
            return f"{minutes} –º–∏–Ω—É—Ç—ã"
        else:
            return f"{minutes} –º–∏–Ω—É—Ç"
    elif seconds < 86400:
        hours = seconds // 3600
        if hours == 1:
            return "1 —á–∞—Å"
        elif 2 <= hours <= 4:
            return f"{hours} —á–∞—Å–∞"
        else:
            return f"{hours} —á–∞—Å–æ–≤"
    else:
        days = seconds // 86400
        if days == 1:
            return "1 –¥–µ–Ω—å"
        elif 2 <= days <= 4:
            return f"{days} –¥–Ω—è"
        else:
            return f"{days} –¥–Ω–µ–π"


async def get_current_week_type(pool, chat_id: int = None) -> int:
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —á–µ—Ç–Ω–æ—Å—Ç—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω–æ–π –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞"""
    COMMON_CHAT_ID = 0
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
            await cur.execute("SELECT week_type, updated_at FROM current_week_type WHERE chat_id=%s", (COMMON_CHAT_ID,))
            row = await cur.fetchone()
            
            now = datetime.datetime.now(TZ)
            today = now.date()
            current_weekday = today.isoweekday()  # 1-–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 7-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            
            if row:
                week_type, last_updated = row
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º last_updated –≤ date
                if isinstance(last_updated, datetime.datetime):
                    last_updated_date = last_updated.date()
                else:
                    last_updated_date = last_updated
                
                # –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ö–û–ì–î–ê –ú–ï–ù–Ø–¢–¨ –ß–ï–¢–ù–û–°–¢–¨:
                # –ú–µ–Ω—è–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å –≤ –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –î–û —ç—Ç–æ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
                if current_weekday == 1:  # –°–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                    # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É —ç—Ç–æ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ (—Å–µ–≥–æ–¥–Ω—è)
                    this_monday = today
                    
                    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –î–û —ç—Ç–æ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ - –º–µ–Ω—è–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å
                    if last_updated_date < this_monday:
                        week_type = 2 if week_type == 1 else 1
                        await cur.execute("""
                            UPDATE current_week_type 
                            SET week_type=%s, updated_at=%s 
                            WHERE chat_id=%s
                        """, (week_type, today, COMMON_CHAT_ID))
                        print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–µ–¥–µ–ª—è –Ω–∞: {'–Ω–µ—á–µ—Ç–Ω–∞—è' if week_type == 1 else '—á–µ—Ç–Ω–∞—è'}")
                
                return week_type
            else:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ—á–µ—Ç–Ω—É—é –Ω–µ–¥–µ–ª—é
                week_type = 1
                await cur.execute("INSERT INTO current_week_type (chat_id, week_type, updated_at) VALUES (%s, %s, %s)", 
                                 (COMMON_CHAT_ID, week_type, today))
                return week_type

async def set_current_week_type(pool, chat_id: int = None, week_type: int = None):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏ (–æ–±—â—É—é –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤)"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π chat_id –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—â–µ–π —á–µ—Ç–Ω–æ—Å—Ç–∏
    COMMON_CHAT_ID = 0  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–±—â–µ–π —á–µ—Ç–Ω–æ—Å—Ç–∏
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO current_week_type (chat_id, week_type) 
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE week_type=%s, updated_at=CURRENT_TIMESTAMP
            """, (COMMON_CHAT_ID, week_type, week_type))

async def save_teacher_message(pool, message_id: int, from_user_id: int, 
                              signature: str, message_text: str, message_type: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —á–∞—Ç—É)"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO teacher_messages (message_id, from_user_id, signature, message_text, message_type)
                VALUES (%s, %s, %s, %s, %s)
            """, (message_id, from_user_id, signature, message_text, message_type))

async def get_teacher_messages(pool, offset: int = 0, limit: int = 10) -> List[Tuple]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–≤—Å–µ —á–∞—Ç—ã)"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                SELECT id, message_id, signature, message_text, message_type, created_at
                FROM teacher_messages 
                ORDER BY created_at DESC 
                LIMIT %s OFFSET %s
            """, (limit, offset))
            return await cur.fetchall()

async def get_teacher_messages_count(pool) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT COUNT(*) FROM teacher_messages")
            result = await cur.fetchone()
            return result[0] if result else 0




DAYS = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]

def format_rasp_message(day_num, week_type, text):
    day_name = DAYS[day_num - 1]
    week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_type == 1 else "—á–µ—Ç–Ω–∞—è"
    return f"üìÖ {day_name} | –ù–µ–¥–µ–ª—è: {week_name}\n\n{text}"

ZVONKI_DEFAULT = [
    "1 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 08:30-09:15, 2 —É—Ä–æ–∫ 09:20-10:05",
    "2 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 10:15-11:00, 2 —É—Ä–æ–∫ 11:05-11:50",
    "3 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 12:40-13:25, 2 —É—Ä–æ–∫ 13:30-14:15",
    "4 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 14:25-15:10, 2 —É—Ä–æ–∫ 15:15-16:00",
    "5 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 16:05-17:35",
    "6 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 17:45-19:15"
]

ZVONKI_SATURDAY = [
    "1 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 08:30-09:15, 2 —É—Ä–æ–∫ 09:20-10:05",
    "2 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 10:15-11:00, 2 —É—Ä–æ–∫ 11:05-11:50",
    "3 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 12:00-12:45, 2 —É—Ä–æ–∫ 12:50-13:35",
    "4 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 13:45-15:15",
    "5 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 15:25-16:55",
    "6 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 17:05-18:50"
]
class ViewMessagesState(StatesGroup):
    browsing = State()
class SendMessageState(StatesGroup):
    active = State()
class SetChetState(StatesGroup):
    week_type = State()
class AddSubjectState(StatesGroup):
    name = State()
    type_choice = State()
    cabinet = State()
class DeleteTeacherMessageState(StatesGroup):
    message_id = State()
class DeleteSubjectState(StatesGroup):
    subject_choice = State()
class AddSpecialUserState(StatesGroup):
    user_id = State()
    signature = State()
class SetPublishTimeState(StatesGroup):
    time = State()  
class AddLessonState(StatesGroup):
    subject = State()
    week_type = State()
    day = State()
    pair_number = State()
    cabinet = State()
class SetCabinetState(StatesGroup):
    week_type = State()
    day = State()
    lesson = State()
    cabinet = State()
    pair_num = State()
class SetCabinetState(StatesGroup):
    week_type = State()
    day = State()
    subject = State()
    pair_number = State()
    cabinet = State()
class ClearPairState(StatesGroup):
    week_type = State()
    day = State()
    pair_number = State()
class ForwardModeState(StatesGroup):
    active = State()
class AddHomeworkState(StatesGroup):
    due_date = State()
    subject = State()
    task_text = State()
class EditHomeworkState(StatesGroup):
    homework_id = State()
    due_date = State()
    subject = State()
    task_text = State()
class DeleteHomeworkState(StatesGroup):
    homework_id = State()


async def add_birthday(pool, user_name: str, birth_date: str, added_by_user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –±–∞–∑—É (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —á–∞—Ç—É)"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ DD.MM.YYYY –≤ YYYY-MM-DD –¥–ª—è MySQL
        birth_date_mysql = datetime.datetime.strptime(birth_date, '%d.%m.%Y').strftime('%Y-%m-%d')
    except ValueError:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO birthdays (user_name, birth_date, added_by_user_id)
                VALUES (%s, %s, %s)
            """, (user_name, birth_date_mysql, added_by_user_id))

async def get_today_birthdays(pool):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.datetime.now(TZ).date()
    today_str = today.strftime('%m-%d')  # –§–æ—Ä–º–∞—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –¥–∞—Ç—É: {today_str}")
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                SELECT id, user_name, birth_date
                FROM birthdays 
                WHERE DATE_FORMAT(birth_date, '%m-%d') = %s
            """, (today_str,))
            results = await cur.fetchall()
            
            print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π: {len(results)}")
            for result in results:
                print(f"  - {result[1]}: {result[2]}")
            
            return results

async def get_all_birthdays(pool):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                SELECT id, user_name, birth_date, added_by_user_id, created_at
                FROM birthdays 
                ORDER BY DATE_FORMAT(birth_date, '%m-%d')
            """)
            return await cur.fetchall()

async def delete_birthday(pool, birthday_id: int):
    """–£–¥–∞–ª—è–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("DELETE FROM birthdays WHERE id=%s", (birthday_id,))

@dp.message(Command("adddr"))
async def cmd_add_birthday(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤ –õ–° (—Ñ–æ—Ä–º–∞—Ç: /adddr –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –õ–° –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if message.chat.type != "private" or message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    parts = message.text.split()
    
    if len(parts) < 3:
        await message.answer(
            "‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adddr –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/adddr –ï–≥–æ—Ä 15.05.1990\n"
            "/adddr –ò–≤–∞–Ω_–ò–≤–∞–Ω–æ–≤ 20.12.1985"
        )
        return

    # –î–∞—Ç–∞ –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    date_str = parts[-1]
    
    # –ò–º—è - —ç—Ç–æ –≤—Å—ë –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–æ–π –∏ –¥–∞—Ç–æ–π
    name_parts = parts[1:-1]  # –í—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π (–∫–æ–º–∞–Ω–¥–∞) –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π (–¥–∞—Ç–∞)
    name = ' '.join(name_parts)
    
    if not name:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        birth_date = datetime.datetime.strptime(date_str, '%d.%m.%Y').date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
        today = datetime.datetime.now(TZ).date()
        if birth_date > today:
            await message.answer("‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
        await add_birthday(pool, name, date_str, message.from_user.id)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        age = today.year - birth_date.year
        if today.month < birth_date.month or (today.month == birth_date.month and today.day < birth_date.day):
            age -= 1
        
        await message.answer(
            f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {date_str}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n\n"
            f"–¢–µ–ø–µ—Ä—å {name} –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ –≤—Å–µ—Ö –±–µ—Å–µ–¥–∞—Ö!"
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
            "–ü—Ä–∏–º–µ—Ä: /adddr –ï–≥–æ—Ä 15.05.1990"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")

async def check_birthdays():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ –≤—Å–µ –±–µ—Å–µ–¥—ã"""
    try:
        print("üéÇ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è...")
        birthdays = await get_today_birthdays(pool)
        
        if not birthdays:
            print("üéÇ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è")
            return
        
        print(f"üéÇ –ù–∞–π–¥–µ–Ω–æ {len(birthdays)} –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        for birthday in birthdays:
            birthday_id, user_name, birth_date = birthday
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            print(f"üéÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {user_name}, –¥–∞—Ç–∞: {birth_date}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
            today = datetime.datetime.now(TZ).date()
            birth_date_obj = birth_date if isinstance(birth_date, datetime.date) else datetime.datetime.strptime(str(birth_date), '%Y-%m-%d').date()
            age = today.year - birth_date_obj.year
            
            # –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–æ–∑—Ä–∞—Å—Ç
            if today.month < birth_date_obj.month or (today.month == birth_date_obj.month and today.day < birth_date_obj.day):
                age -= 1
            
            print(f"üéÇ {user_name} –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è {age} –ª–µ—Ç")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
            message_text = (
                f"üéâ –° –î–ù–ï–ú –†–û–ñ–î–ï–ù–ò–Ø, {user_name.upper()}! üéâ\n\n"
                f"–í —ç—Ç–æ–º –≥–æ–¥—É —Ç–µ–±–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å —Ü–µ–ª—ã—Ö {age} –ª–µ—Ç!\n\n"
                f"–û—Ç —Å–µ—Ä–¥—Ü–∞ –∏ –ø–æ—á–µ–∫ –¥–∞—Ä—é —Ç–µ–±–µ —Ü–≤–µ—Ç–æ—á–µ–∫ üíê"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ –í–°–ï –±–µ—Å–µ–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            success_count = 0
            for chat_id in ALLOWED_CHAT_IDS:
                try:
                    await bot.send_message(chat_id, message_text)
                    success_count += 1
                    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {user_name} –≤ —á–∞—Ç {chat_id}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è {user_name} –≤ —á–∞—Ç {chat_id}: {e}")
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è {user_name}")
                
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")


async def get_special_user_signature(pool, user_id: int) -> str | None:
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT signature FROM special_users WHERE user_id=%s", (user_id,))
            row = await cur.fetchone()
            return row[0] if row else None

async def set_special_user_signature(pool, user_id: int, signature: str):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO special_users (user_id, signature) 
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE signature=%s
            """, (user_id, signature, signature))

async def delete_teacher_message(pool, message_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ ID (–∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤)"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("DELETE FROM teacher_messages WHERE id = %s", (message_id,))
            await conn.commit()
            return cur.rowcount > 0

@dp.callback_query(F.data == "send_message_chat")
async def send_message_chat_start(callback: types.CallbackQuery, state: FSMContext):
    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return
    if callback.from_user.id not in SPECIAL_USER_ID or callback.message.chat.type != "private":
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    signature = await get_special_user_signature(pool, callback.from_user.id)
    if not signature:
        signature = "–ü–†–û–í–ï–†–ö–ê"  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    await state.update_data(
        signature=signature,
        start_time=datetime.datetime.now(TZ)
    )
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–∞ 180 —Å–µ–∫—É–Ω–¥
    await state.set_state(SendMessageState.active)
    
    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ —Ä–µ–∂–∏–º–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É", callback_data="stop_forward_mode")]
    ])
    
    await callback.message.edit_text(
        f"‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 180 —Å–µ–∫—É–Ω–¥!\n"
        f"üìù –ü–æ–¥–ø–∏—Å—å: {signature}\n"
        f"‚è∞ –í—Ä–µ–º—è –¥–æ: {(datetime.datetime.now(TZ) + datetime.timedelta(seconds=180)).strftime('%H:%M:%S')}\n\n"
        f"–í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –≤ –±–µ—Å–µ–¥—É. –†–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã.",
        reply_markup=kb
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    asyncio.create_task(disable_forward_mode_after_timeout(callback.from_user.id, state))
    
    await callback.answer()

async def send_message_to_all_chats(message_text: str, photo=None, document=None, video=None, audio=None, voice=None, sticker=None, caption: str = ""):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã"""
    for chat_id in ALLOWED_CHAT_IDS:
        try:
            if photo:
                await bot.send_photo(chat_id, photo, caption=message_text + caption)
            elif document:
                await bot.send_document(chat_id, document, caption=message_text + caption)
            elif video:
                await bot.send_video(chat_id, video, caption=message_text + caption)
            elif audio:
                await bot.send_audio(chat_id, audio, caption=message_text + caption)
            elif voice:
                await bot.send_voice(chat_id, voice, caption=message_text + caption)
            elif sticker:
                await bot.send_sticker(chat_id, sticker)
            else:
                await bot.send_message(chat_id, message_text + caption)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

async def save_teacher_message_to_all_chats(message_ids: dict, from_user_id: int, signature: str, message_text: str, message_type: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤"""
    for chat_id, message_id in message_ids.items():
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    INSERT INTO teacher_messages (chat_id, message_id, from_user_id, signature, message_text, message_type)
                    VALUES (%s, %s, %s, %s, %s, %s)
                """, (chat_id, message_id, from_user_id, signature, message_text, message_type))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
@dp.callback_query(F.data == "stop_forward_mode")
async def stop_forward_mode_handler(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == SendMessageState.active.state:
        await state.clear()
        await callback.message.edit_text("‚èπÔ∏è –†–µ–∂–∏–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    else:
        await callback.answer("‚ùå –†–µ–∂–∏–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω", show_alert=True)
    await callback.answer()

@dp.message(SendMessageState.active)
async def process_forward_message(message: types.Message, state: FSMContext):
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /
    if message.text and message.text.startswith('/'):
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")
        return
    
    data = await state.get_data()
    signature = data.get("signature", "–ü–†–û–í–ï–†–ö–ê")
    
    prefix = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {signature}: "

    try:
        message_text = ""
        message_type = "text"
        sent_message_ids = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        if message.text:
            message_text = message.text
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
            for chat_id in ALLOWED_CHAT_IDS:
                try:
                    sent_message = await bot.send_message(chat_id, f"{prefix}{message.text}")
                    sent_message_ids.append(sent_message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
                    
        elif message.photo:
            message_text = message.caption or ""
            message_type = "photo"
            if message.caption and message.caption.startswith('/'):
                await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")
                return
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
            for chat_id in ALLOWED_CHAT_IDS:
                try:
                    sent_message = await bot.send_photo(chat_id, message.photo[-1].file_id, caption=prefix + (message.caption or ""))
                    sent_message_ids.append(sent_message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ —á–∞—Ç {chat_id}: {e}")
                    
        elif message.document:
            message_text = message.caption or ""
            message_type = "document"
            if message.caption and message.caption.startswith('/'):
                await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∏ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")
                return
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
            for chat_id in ALLOWED_CHAT_IDS:
                try:
                    sent_message = await bot.send_document(chat_id, message.document.file_id, caption=prefix + (message.caption or ""))
                    sent_message_ids.append(sent_message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —á–∞—Ç {chat_id}: {e}")
                    
        elif message.video:
            message_text = message.caption or ""
            message_type = "video"
            if message.caption and message.caption.startswith('/'):
                await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∏ –∫ –≤–∏–¥–µ–æ, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")
                return
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
            for chat_id in ALLOWED_CHAT_IDS:
                try:
                    sent_message = await bot.send_video(chat_id, message.video.file_id, caption=prefix + (message.caption or ""))
                    sent_message_ids.append(sent_message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ —á–∞—Ç {chat_id}: {e}")
                    
        elif message.audio:
            message_text = message.caption or ""
            message_type = "audio"
            if message.caption and message.caption.startswith('/'):
                await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∏ –∫ –∞—É–¥–∏–æ, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")
                return
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
            for chat_id in ALLOWED_CHAT_IDS:
                try:
                    sent_message = await bot.send_audio(chat_id, message.audio.file_id, caption=prefix + (message.caption or ""))
                    sent_message_ids.append(sent_message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ —á–∞—Ç {chat_id}: {e}")
                    
        elif message.voice:
            message_text = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            message_type = "voice"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
            for chat_id in ALLOWED_CHAT_IDS:
                try:
                    sent_message = await bot.send_voice(chat_id, message.voice.file_id, caption=prefix)
                    sent_message_ids.append(sent_message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
                    
        elif message.sticker:
            message_text = "—Å—Ç–∏–∫–µ—Ä"
            message_type = "sticker"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
            for chat_id in ALLOWED_CHAT_IDS:
                try:
                    sent_message = await bot.send_sticker(chat_id, message.sticker.file_id)
                    sent_message_ids.append(sent_message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —á–∞—Ç {chat_id}: {e}")
                    
        else:
            await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –û–î–ò–ù –†–ê–ó (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —á–∞—Ç—É)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π message_id –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if sent_message_ids:
            await save_teacher_message(
                pool, 
                sent_message_ids[0],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π ID
                message.from_user.id,
                signature,
                message_text,
                message_type
            )

        success_chats = len(sent_message_ids)
        total_chats = len(ALLOWED_CHAT_IDS)
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {success_chats} –∏–∑ {total_chats} –±–µ—Å–µ–¥!")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")


@dp.callback_query(F.data == "view_teacher_messages")
async def view_teacher_messages_start(callback: types.CallbackQuery, state: FSMContext):
    # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
    if callback.message.chat.id not in ALLOWED_CHAT_IDS:
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    if callback.message.chat.type not in ["group", "supergroup"]:
        await callback.answer("‚õî –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–µ", show_alert=True)
        return

    await show_teacher_messages_page(callback, state, page=0)
    await callback.answer()


@dp.callback_query(F.data == "menu_back_from_messages")
async def menu_back_from_messages_handler(callback: types.CallbackQuery, state: FSMContext):
    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return
    await menu_back_handler(callback, state)


async def show_teacher_messages_page(callback: types.CallbackQuery, state: FSMContext, page: int = 0):
    limit = 10
    offset = page * limit
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    messages = await get_teacher_messages(pool, offset, limit)
    total_count = await get_teacher_messages_count(pool)
    
    if not messages:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ])
        await callback.message.edit_text(
            "üìù –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=kb
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    keyboard = []
    for i, (msg_id, message_id, signature, text, msg_type, created_at) in enumerate(messages):
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        display_text = text[:50] + "..." if len(text) > 50 else text
        if not display_text:
            display_text = f"{msg_type} —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        emoji = "üìù" if msg_type == "text" else "üñºÔ∏è" if msg_type == "photo" else "üìé" if msg_type == "document" else "üéµ"
        button_text = f"{emoji} {signature}: {display_text}"
        
        keyboard.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"view_message_{msg_id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"messages_page_{page-1}"))
    
    nav_buttons.append(InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="menu_back"))
    
    if (page + 1) * limit < total_count:
        nav_buttons.append(InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚û°", callback_data=f"messages_page_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    page_info = f" (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})" if total_count > limit else ""
    await callback.message.edit_text(
        f"üìù –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π{page_info}\n\n"
        f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_count}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=kb
    )
    
    await state.update_data(current_page=page)

@dp.callback_query(F.data.startswith("view_message_"))
async def view_specific_message(callback: types.CallbackQuery):
    try:
        message_db_id = int(callback.data.split("_")[2])
        current_chat_id = callback.message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT message_id, signature, message_text, message_type, created_at
                    FROM teacher_messages 
                    WHERE id = %s
                """, (message_db_id,))
                
                message_data = await cur.fetchone()
        
        if not message_data:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        message_id, signature, text, msg_type, created_at = message_data
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if isinstance(created_at, datetime.datetime):
            date_str = created_at.strftime("%d.%m.%Y %H:%M")
        else:
            date_str = str(created_at)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–ï–ö–£–©–ï–ô –±–µ—Å–µ–¥–µ
        message_link = f"https://t.me/c/{str(current_chat_id).replace('-100', '')}/{message_id}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é", url=message_link)],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_messages_list")]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_info = f"üë®‚Äçüè´ –û—Ç: {signature}\n"
        message_info += f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        message_info += f"üìä –¢–∏–ø: {msg_type}\n\n"
        
        if text and text != "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" and text != "—Å—Ç–∏–∫–µ—Ä":
            message_info += f"üìù –¢–µ–∫—Å—Ç: {text}\n\n"
        
        message_info += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ –±–µ—Å–µ–¥–µ."
        
        await callback.message.edit_text(message_info, reply_markup=kb)
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
    await callback.answer()
async def show_teacher_messages_page(callback: types.CallbackQuery, state: FSMContext, page: int = 0):
    limit = 10
    offset = page * limit
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    messages = await get_teacher_messages(pool, offset, limit)
    total_count = await get_teacher_messages_count(pool)
    
    if not messages:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ])
        await callback.message.edit_text(
            "üìù –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=kb
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    keyboard = []
    for i, (msg_id, message_id, signature, text, msg_type, created_at) in enumerate(messages):
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        display_text = text[:50] + "..." if len(text) > 50 else text
        if not display_text:
            display_text = f"{msg_type} —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        emoji = "üìù" if msg_type == "text" else "üñºÔ∏è" if msg_type == "photo" else "üìé" if msg_type == "document" else "üéµ"
        button_text = f"{emoji} {signature}: {display_text}"
        
        keyboard.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"view_message_{msg_id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"messages_page_{page-1}"))
    
    nav_buttons.append(InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="menu_back"))
    
    if (page + 1) * limit < total_count:
        nav_buttons.append(InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚û°", callback_data=f"messages_page_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    page_info = f" (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})" if total_count > limit else ""
    await callback.message.edit_text(
        f"üìù –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π{page_info}\n\n"
        f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_count}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=kb
    )
    
    await state.update_data(current_page=page)

@dp.callback_query(F.data.startswith("view_message_"))
async def view_specific_message(callback: types.CallbackQuery):
    try:
        message_db_id = int(callback.data.split("_")[2])
        current_chat_id = callback.message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT message_id, signature, message_text, message_type, created_at
                    FROM teacher_messages 
                    WHERE id = %s
                """, (message_db_id,))
                
                message_data = await cur.fetchone()
        
        if not message_data:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        message_id, signature, text, msg_type, created_at = message_data
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if isinstance(created_at, datetime.datetime):
            date_str = created_at.strftime("%d.%m.%Y %H:%M")
        else:
            date_str = str(created_at)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–ï–ö–£–©–ï–ô –±–µ—Å–µ–¥–µ
        message_link = f"https://t.me/c/{str(current_chat_id).replace('-100', '')}/{message_id}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é", url=message_link)],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_messages_list")]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_info = f"üë®‚Äçüè´ –û—Ç: {signature}\n"
        message_info += f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        message_info += f"üìä –¢–∏–ø: {msg_type}\n\n"
        
        if text and text != "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" and text != "—Å—Ç–∏–∫–µ—Ä":
            message_info += f"üìù –¢–µ–∫—Å—Ç: {text}\n\n"
        
        message_info += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ –±–µ—Å–µ–¥–µ."
        
        await callback.message.edit_text(message_info, reply_markup=kb)
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
    await callback.answer()

@dp.callback_query(F.data == "back_to_messages_list")
async def back_to_messages_list(callback: types.CallbackQuery, state: FSMContext):
    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return
    data = await state.get_data()
    current_page = data.get('current_page', 0)
    await show_teacher_messages_page(callback, state, current_page)
    await callback.answer()


@dp.callback_query(F.data == "admin_add_special_user")
async def admin_add_special_user_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])

    await callback.message.edit_text(
        "üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
        reply_markup=kb
    )
    await state.set_state(AddSpecialUserState.user_id)
    await callback.answer()

@dp.message(AddSpecialUserState.user_id)
async def process_special_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())
        if user_id <= 0:
            raise ValueError("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        await state.update_data(user_id=user_id)
        await message.answer(
            f"‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
            "(–∫–∞–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π):"
        )
        await state.set_state(AddSpecialUserState.signature)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:")



@dp.message(AddSpecialUserState.signature)
async def process_special_user_signature(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    signature = message.text.strip()
    
    if not signature:
        await message.answer("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å:")
        return
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        await set_special_user_signature(pool, user_id, signature)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ SPECIAL_USER_ID –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        if user_id not in SPECIAL_USER_ID:
            SPECIAL_USER_ID.append(user_id)
        
        await message.answer(
            f"‚úÖ –°–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üë§ ID: {user_id}\n"
            f"üìù –ü–æ–¥–ø–∏—Å—å: {signature}\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–µ—Å–µ–¥—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é."
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é
        await message.answer("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    await state.clear()


def get_zvonki(is_saturday: bool):
    return "\n".join(ZVONKI_SATURDAY if is_saturday else ZVONKI_DEFAULT)

def main_menu(is_admin=False, is_special_user=False, is_group_chat=False):
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–µ
    if is_group_chat:
        buttons.append([InlineKeyboardButton(text="üë®‚Äçüè´ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–æ–≤", callback_data="view_teacher_messages")]),
        buttons.append([InlineKeyboardButton(text="üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="menu_homework")]),  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        buttons.append([InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="menu_rasp")]),
        buttons.append([InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today_rasp")]),
        buttons.append([InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="tomorrow_rasp")]),
        buttons.append([InlineKeyboardButton(text="‚è∞ –ó–≤–æ–Ω–∫–∏", callback_data="menu_zvonki")]),

    
    if is_admin:
        buttons.append([InlineKeyboardButton(text="‚öô –ê–¥–º–∏–Ω–∫–∞", callback_data="menu_admin")])
    if is_special_user:
        buttons.append([InlineKeyboardButton(text="‚úâ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–µ—Å–µ–¥—É", callback_data="send_message_chat")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def admin_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ç–Ω–æ—Å—Ç—å", callback_data="admin_setchet")],
        [InlineKeyboardButton(text="üìå –£–∑–Ω–∞—Ç—å —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏", callback_data="admin_show_chet")],

        [InlineKeyboardButton(text="üïí –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π", callback_data="admin_list_publish_times")],
        [InlineKeyboardButton(text="üìù –ó–∞–¥–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="admin_set_publish_time")],
        [InlineKeyboardButton(text="üïê –£–∑–Ω–∞—Ç—å –º–æ–µ –≤—Ä–µ–º—è", callback_data="admin_my_publish_time")],

        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É", callback_data="admin_add_lesson")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞—Ä—É", callback_data="admin_clear_pair")],

        [InlineKeyboardButton(text="üè´ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç", callback_data="admin_set_cabinet")],

        [InlineKeyboardButton(text="üìö –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="admin_add_subject")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="admin_delete_subject")],

        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
        [InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_add_homework")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_edit_homework")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_delete_homework")],

        [InlineKeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_special_user")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_teacher_message")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
    ])
    return kb

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –≤ –±–µ—Å–µ–¥–∞—Ö
@dp.callback_query(F.data == "menu_homework")
async def menu_homework_handler(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
    if not is_allowed_chat(callback.message.chat.id):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return

    homework_list = await get_all_homework(pool)
    
    if not homework_list:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ])
        await callback.message.edit_text(
            "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.",
            reply_markup=kb
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
    homework_text = "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n"
    for hw_id, subject_name, due_date, task_text, created_at in homework_list:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        due_date_obj = due_date if isinstance(due_date, datetime.date) else datetime.datetime.strptime(str(due_date), '%Y-%m-%d').date()
        due_date_str = due_date_obj.strftime("%d.%m.%Y")
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
        short_task = task_text[:100] + "..." if len(task_text) > 100 else task_text
        
        homework_text += f"üìÖ {due_date_str} | {subject_name}\n"
        homework_text += f"üìù {short_task}\n"
        homework_text += "‚îÄ" * 30 + "\n"
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
    ])
    
    await callback.message.edit_text(homework_text, reply_markup=kb)
    await callback.answer()

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
@dp.callback_query(F.data == "admin_add_homework")
async def admin_add_homework_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])

    await callback.message.edit_text(
        "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.12.2024):",
        reply_markup=kb
    )
    await state.set_state(AddHomeworkState.due_date)
    await callback.answer()

@dp.message(AddHomeworkState.due_date)
async def process_homework_due_date(message: types.Message, state: FSMContext):
    due_date_str = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if due_date_str.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '‚ùå –æ—Ç–º–µ–Ω–∞']:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    try:
        due_date = datetime.datetime.strptime(due_date_str, '%d.%m.%Y').date()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –±—É–¥–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î
        await state.update_data(due_date=due_date_str)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT id, name FROM subjects ORDER BY name")
                subjects = await cur.fetchall()
        
        if not subjects:
            await message.answer("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã.")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        keyboard = []
        for subject_id, name in subjects:
            keyboard.append([InlineKeyboardButton(text=name, callback_data=f"hw_subject_{subject_id}")])
        
        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await message.answer(
            f"üìÖ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {due_date_str}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
            reply_markup=kb
        )
        await state.set_state(AddHomeworkState.subject)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.12.2024):")

@dp.callback_query(F.data.startswith("hw_subject_"))
async def process_homework_subject(callback: types.CallbackQuery, state: FSMContext):
    subject_id = int(callback.data[len("hw_subject_"):])
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT name FROM subjects WHERE id=%s", (subject_id,))
            subject_name = (await cur.fetchone())[0]
    
    await state.update_data(subject_id=subject_id, subject_name=subject_name)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])
    
    await callback.message.edit_text(
        f"üìÖ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {(await state.get_data())['due_date']}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=kb
    )
    await state.set_state(AddHomeworkState.task_text)
    await callback.answer()

@dp.message(AddHomeworkState.task_text)
async def process_homework_task_text(message: types.Message, state: FSMContext):
    task_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if task_text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '‚ùå –æ—Ç–º–µ–Ω–∞']:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        await state.clear()
        return
    
    if not task_text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:")
        return
    
    data = await state.get_data()
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (–±–µ–∑ chat_id - –æ–±—â–µ–µ –¥–ª—è –≤—Å–µ—Ö)
        await add_homework(pool, data['subject_id'], data['due_date'], task_text)
        
        await message.answer(
            f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üìÖ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {data['due_date']}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {data['subject_name']}\n"
            f"üìù –ó–∞–¥–∞–Ω–∏–µ: {task_text}\n\n"
            f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=admin_menu()
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
    
    await state.clear()

@dp.callback_query(F.data == "admin_edit_homework")
async def admin_edit_homework_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return

    homework_list = await get_all_homework(pool)
    
    if not homework_list:
        await callback.message.edit_text(
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n\n"
            "‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
    keyboard = []
    for hw_id, subject_name, due_date, task_text, created_at in homework_list:
        due_date_obj = due_date if isinstance(due_date, datetime.date) else datetime.datetime.strptime(str(due_date), '%Y-%m-%d').date()
        due_date_str = due_date_obj.strftime("%d.%m.%Y")
        
        short_task = task_text[:30] + "..." if len(task_text) > 30 else task_text
        button_text = f"{due_date_str} | {subject_name}: {short_task}"
        
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"edit_hw_{hw_id}")])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=kb
    )
    await state.set_state(EditHomeworkState.homework_id)
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_hw_"))
async def process_edit_homework_select(callback: types.CallbackQuery, state: FSMContext):
    homework_id = int(callback.data[len("edit_hw_"):])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
    homework = await get_homework_by_id(pool, homework_id)
    if not homework:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    hw_id, subject_name, due_date, task_text, created_at, subject_id = homework
    
    await state.update_data(
        homework_id=hw_id,
        current_subject_id=subject_id,
        current_subject_name=subject_name,
        current_due_date=due_date,
        current_task_text=task_text
    )
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])
    
    due_date_str = due_date.strftime("%d.%m.%Y") if isinstance(due_date, datetime.date) else due_date
    
    await callback.message.edit_text(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
        f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {due_date_str}\n"
        f"üìö –¢–µ–∫—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
        f"üìù –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {task_text}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é:",
        reply_markup=kb
    )
    await state.set_state(EditHomeworkState.due_date)
    await callback.answer()

@dp.message(EditHomeworkState.due_date)
async def process_edit_homework_due_date(message: types.Message, state: FSMContext):
    if message.text.strip().lower() == '/skip':
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã
        await state.update_data(new_due_date=None)
    else:
        due_date_str = message.text.strip()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            datetime.datetime.strptime(due_date_str, '%d.%m.%Y')
            await state.update_data(new_due_date=due_date_str)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ /skip:")
            return
    
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT id, name FROM subjects ORDER BY name")
            subjects = await cur.fetchall()
    
    keyboard = []
    for subject_id, name in subjects:
        keyboard.append([InlineKeyboardButton(text=name, callback_data=f"edit_hw_subject_{subject_id}")])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    new_date_info = data.get('new_due_date', '–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é')
    await message.answer(
        f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞: {new_date_info}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /skip —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π:",
        reply_markup=kb
    )
    await state.set_state(EditHomeworkState.subject)

@dp.callback_query(F.data.startswith("edit_hw_subject_"))
async def process_edit_homework_subject(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "menu_admin":
        await callback.message.edit_text("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        await state.clear()
        await callback.answer()
        return
    
    subject_id = int(callback.data[len("edit_hw_subject_"):])
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT name FROM subjects WHERE id=%s", (subject_id,))
            subject_name = (await cur.fetchone())[0]
    
    await state.update_data(new_subject_id=subject_id, new_subject_name=subject_name)
    
    data = await state.get_data()
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])
    
    new_date_info = data.get('new_due_date', '—Ç–µ–∫—É—â–∞—è')
    new_subject_info = data.get('new_subject_name', '—Ç–µ–∫—É—â–∏–π')
    
    await callback.message.edit_text(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
        f"üìÖ –î–∞—Ç–∞: {new_date_info}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {new_subject_info}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ /skip —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π:",
        reply_markup=kb
    )
    await state.set_state(EditHomeworkState.task_text)
    await callback.answer()

@dp.message(EditHomeworkState.subject)
async def process_edit_homework_subject_skip(message: types.Message, state: FSMContext):
    if message.text.strip().lower() == '/skip':
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        data = await state.get_data()
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
        ])
        
        new_date_info = data.get('new_due_date', '—Ç–µ–∫—É—â–∞—è')
        
        await message.answer(
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
            f"üìÖ –î–∞—Ç–∞: {new_date_info}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: —Ç–µ–∫—É—â–∏–π\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ /skip —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π:",
            reply_markup=kb
        )
        await state.set_state(EditHomeworkState.task_text)
    else:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –Ω–µ /skip, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–Ω–æ–≤–∞
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT id, name FROM subjects ORDER BY name")
                subjects = await cur.fetchall()
        
        keyboard = []
        for subject_id, name in subjects:
            keyboard.append([InlineKeyboardButton(text=name, callback_data=f"edit_hw_subject_{subject_id}")])
        
        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /skip —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π:",
            reply_markup=kb
        )


@dp.message(EditHomeworkState.task_text)
async def process_edit_homework_task_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    if message.text.strip().lower() == '/skip':
        new_task_text = data['current_task_text']
    else:
        new_task_text = message.text.strip()
        if not new_task_text:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ /skip:")
            return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    subject_id = data.get('new_subject_id', data['current_subject_id'])
    due_date = data.get('new_due_date', data['current_due_date'])
    
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ YYYY-MM-DD
    if isinstance(due_date, str) and '.' in due_date:
        try:
            due_date = datetime.datetime.strptime(due_date, '%d.%m.%Y').strftime('%Y-%m-%d')
        except ValueError:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return
    
    try:
        await update_homework(pool, data['homework_id'], subject_id, due_date, new_task_text)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        updated_hw = await get_homework_by_id(pool, data['homework_id'])
        if updated_hw:
            hw_id, subject_name, due_date, task_text, created_at, subject_id = updated_hw
            due_date_str = due_date.strftime("%d.%m.%Y") if isinstance(due_date, datetime.date) else due_date
            
            await message.answer(
                f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                f"üìÖ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {due_date_str}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
                f"üìù –ó–∞–¥–∞–Ω–∏–µ: {task_text}\n\n"
                f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                reply_markup=admin_menu()
            )
        else:
            await message.answer(
                "‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                reply_markup=admin_menu()
            )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
    
    await state.clear()

@dp.callback_query(F.data == "admin_delete_homework")
async def admin_delete_homework_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return

    homework_list = await get_all_homework(pool)
    
    if not homework_list:
        await callback.message.edit_text(
            "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n\n"
            "‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
    keyboard = []
    for hw_id, subject_name, due_date, task_text, created_at in homework_list:
        due_date_obj = due_date if isinstance(due_date, datetime.date) else datetime.datetime.strptime(str(due_date), '%Y-%m-%d').date()
        due_date_str = due_date_obj.strftime("%d.%m.%Y")
        
        short_task = task_text[:30] + "..." if len(task_text) > 30 else task_text
        button_text = f"{due_date_str} | {subject_name}: {short_task}"
        
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"delete_hw_{hw_id}")])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=kb
    )
    await state.set_state(DeleteHomeworkState.homework_id)
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_hw_"))
async def process_delete_homework_select(callback: types.CallbackQuery, state: FSMContext):
    homework_id = int(callback.data[len("delete_hw_"):])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
    homework = await get_homework_by_id(pool, homework_id)
    if not homework:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    hw_id, subject_name, due_date, task_text, created_at, subject_id = homework
    
    due_date_str = due_date.strftime("%d.%m.%Y") if isinstance(due_date, datetime.date) else due_date
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_hw_{hw_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="menu_admin")]
    ])
    
    await callback.message.edit_text(
        f"üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
        f"üìÖ –î–∞—Ç–∞: {due_date_str}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
        f"üìù –ó–∞–¥–∞–Ω–∏–µ: {task_text}\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ?",
        reply_markup=kb
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_delete_hw_"))
async def process_confirm_delete_homework(callback: types.CallbackQuery):
    homework_id = int(callback.data[len("confirm_delete_hw_"):])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        homework = await get_homework_by_id(pool, homework_id)
        if homework:
            hw_id, subject_name, due_date, task_text, created_at, subject_id = homework
            due_date_str = due_date.strftime("%d.%m.%Y") if isinstance(due_date, datetime.date) else due_date
            
            await delete_homework(pool, homework_id)
            
            await callback.message.edit_text(
                f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!\n\n"
                f"üìÖ –î–∞—Ç–∞: {due_date_str}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n"
                f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                reply_markup=admin_menu()
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                reply_markup=admin_menu()
            )
            
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}\n\n"
            f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=admin_menu()
        )
    
    await callback.answer()



@dp.callback_query(F.data == "admin_add_lesson")
async def admin_add_lesson_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT name FROM subjects")
            subjects = await cur.fetchall()
    
    buttons = []
    for subj in subjects:
        buttons.append([InlineKeyboardButton(text=subj[0], callback_data=f"choose_subject_{subj[0]}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=kb)
    await state.set_state(AddLessonState.subject)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
@dp.callback_query(F.data.startswith("choose_subject_"))
async def choose_subject(callback: types.CallbackQuery, state: FSMContext):
    subject = callback.data[len("choose_subject_"):]
    await state.update_data(subject=subject)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–∞—è", callback_data="week_1")],
        [InlineKeyboardButton(text="2Ô∏è‚É£ –ß–µ—Ç–Ω–∞—è", callback_data="week_2")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏:", reply_markup=kb)
    await state.set_state(AddLessonState.week_type)

@dp.callback_query(F.data.startswith("week_"))
async def choose_week(callback: types.CallbackQuery, state: FSMContext):
    week_type = int(callback.data[-1])
    await state.update_data(week_type=week_type)
    
    buttons = []
    for i, day in enumerate(DAYS):
        buttons.append([InlineKeyboardButton(text=day, callback_data=f"day_{i+1}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=kb)
    await state.set_state(AddLessonState.day)

@dp.callback_query(F.data.startswith("day_"))
async def choose_day(callback: types.CallbackQuery, state: FSMContext):
    day = int(callback.data[len("day_"):])
    await state.update_data(day=day)
    
    buttons = []
    for i in range(1, 7):
        buttons.append([InlineKeyboardButton(text=str(i), callback_data=f"pair_{i}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã:", reply_markup=kb)
    await state.set_state(AddLessonState.pair_number)


@dp.callback_query(F.data == "admin_add_subject")
async def admin_add_subject_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])

    await callback.message.edit_text(
        "üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:",
        reply_markup=kb
    )
    await state.set_state(AddSubjectState.name)
    await callback.answer()

@dp.message(AddSubjectState.name)
async def process_subject_name(message: types.Message, state: FSMContext):
    subject_name = message.text.strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if subject_name.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '‚ùå –æ—Ç–º–µ–Ω–∞']:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        await state.clear()
        return
        
    if not subject_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    
    await state.update_data(name=subject_name)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè´ –° —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º", callback_data="subject_type_fixed")],
        [InlineKeyboardButton(text="üî¢ –° –∑–∞–ø—Ä–æ—Å–æ–º –∫–∞–±–∏–Ω–µ—Ç–∞ (rK)", callback_data="subject_type_rk")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])
    
    await message.answer(
        f"üìù –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞:",
        reply_markup=kb
    )
    await state.set_state(AddSubjectState.type_choice)

@dp.message(AddSubjectState.cabinet)
async def process_subject_cabinet(message: types.Message, state: FSMContext):
    cabinet = message.text.strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if cabinet.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '‚ùå –æ—Ç–º–µ–Ω–∞']:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        await state.clear()
        return
        
    data = await state.get_data()
    subject_name = data["name"]
    
    if not cabinet:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç:")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º
    full_subject_name = f"{subject_name} {cabinet}"
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("INSERT INTO subjects (name, rK) VALUES (%s, %s)", (full_subject_name, False))
    
    await message.answer(
        f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ: {full_subject_name}\n"
        f"üè´ –¢–∏–ø: —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º\n\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ "
        f"–∫–∞–±–∏–Ω–µ—Ç –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é
    await message.answer("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
    await state.clear()
    
    await callback.answer()

@dp.message(AddSubjectState.cabinet)
async def process_subject_cabinet(message: types.Message, state: FSMContext):
    cabinet = message.text.strip()
    data = await state.get_data()
    subject_name = data["name"]
    
    if not cabinet:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç:")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º
    full_subject_name = f"{subject_name} {cabinet}"
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("INSERT INTO subjects (name, rK) VALUES (%s, %s)", (full_subject_name, False))
    
    await message.answer(
        f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ: {full_subject_name}\n"
        f"üè´ –¢–∏–ø: —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º\n\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ "
        f"–∫–∞–±–∏–Ω–µ—Ç –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é
    await message.answer("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
    await state.clear()

@dp.callback_query(F.data == "admin_delete_subject")
async def admin_delete_subject_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT id, name, rK FROM subjects ORDER BY name")
            subjects = await cur.fetchall()
    
    if not subjects:
        await callback.message.edit_text("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    keyboard = []
    for subject_id, name, rk in subjects:
        type_icon = "üî¢" if rk else "üè´"
        button_text = f"{type_icon} {name}"
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"delete_subject_{subject_id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "üè´ - —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º\n"
        "üî¢ - —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–∞–±–∏–Ω–µ—Ç–∞ (rK)",
        reply_markup=kb
    )
    await state.set_state(DeleteSubjectState.subject_choice)
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_subject_"))
async def process_delete_subject(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "menu_admin":
        await callback.message.edit_text("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        await state.clear()
        await callback.answer()
        return
    
    subject_id = int(callback.data[len("delete_subject_"):])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT name, rK FROM subjects WHERE id=%s", (subject_id,))
            subject = await cur.fetchone()
            
            if not subject:
                await callback.message.edit_text("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await callback.answer()
                return
            
            name, rk = subject
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            await cur.execute("SELECT COUNT(*) FROM rasp_detailed WHERE subject_id=%s", (subject_id,))
            usage_count = (await cur.fetchone())[0]
            
            if usage_count > 0:
                # –ü—Ä–µ–¥–º–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å —É—Ä–æ–∫–∞–º–∏", callback_data=f"confirm_delete_subject_{subject_id}")],
                    [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete_subject")]
                ])
                
                await callback.message.edit_text(
                    f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n\n"
                    f"–ü—Ä–µ–¥–º–µ—Ç '{name}' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {usage_count} —É—Ä–æ–∫(–∞—Ö) —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n"
                    f"–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏?",
                    reply_markup=kb
                )
            else:
                # –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É
                await cur.execute("DELETE FROM subjects WHERE id=%s", (subject_id,))
                await callback.message.edit_text(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{name}' —É–¥–∞–ª–µ–Ω.")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
                await callback.message.answer("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
                await state.clear()
    
    await callback.answer()


@dp.callback_query(F.data.startswith("confirm_delete_subject_"))
async def confirm_delete_subject(callback: types.CallbackQuery):
    subject_id = int(callback.data[len("confirm_delete_subject_"):])
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            await cur.execute("SELECT name FROM subjects WHERE id=%s", (subject_id,))
            subject_name = (await cur.fetchone())[0]
            
            # –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫–∏ —Å —ç—Ç–∏–º –ø—Ä–µ–¥–º–µ—Ç–æ–º
            await cur.execute("DELETE FROM rasp_detailed WHERE subject_id=%s", (subject_id,))
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º –ø—Ä–µ–¥–º–µ—Ç
            await cur.execute("DELETE FROM subjects WHERE id=%s", (subject_id,))
    
    await callback.message.edit_text(
        f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã."
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    await callback.message.answer("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
    await callback.answer()

@dp.callback_query(F.data == "menu_back")
async def menu_back_handler(callback: types.CallbackQuery, state: FSMContext):
    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤ –õ–° –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return

    try:
        await state.clear()
    except Exception:
        pass
    
    is_admin = (callback.from_user.id in ALLOWED_USERS) and is_private
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    is_special_user = False
    if is_private:
        signature = await get_special_user_signature(pool, callback.from_user.id)
        is_special_user = signature is not None
    
    try:
        await callback.message.delete()
        await greet_and_send(
            callback.from_user, 
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
            chat_id=callback.message.chat.id, 
            markup=main_menu(is_admin=is_admin, is_special_user=is_special_user, is_group_chat=not is_private)
        )
    except Exception:
        try:
            await greet_and_send(
                callback.from_user, 
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                callback=callback, 
                markup=main_menu(is_admin=is_admin, is_special_user=is_special_user, is_group_chat=not is_private)
            )
        except Exception:
            await greet_and_send(
                callback.from_user, 
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                chat_id=callback.message.chat.id, 
                markup=main_menu(is_admin=is_admin, is_special_user=is_special_user, is_group_chat=not is_private)
            )

    await callback.answer()



@dp.callback_query(F.data == "cancel_delete_subject")
async def cancel_delete_subject(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await menu_back_handler(callback, state)
    await callback.answer()

@dp.callback_query(F.data.startswith("subject_type_"))
async def process_subject_type_choice(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    try:
        subject_type = callback.data[len("subject_type_"):]
        data = await state.get_data()
        subject_name = data["name"]
        
        if subject_type == "fixed":
            # –ü—Ä–µ–¥–º–µ—Ç —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
            ])
            
            await callback.message.edit_text(
                f"üìù –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
                f"üè´ –¢–∏–ø: —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞:",
                reply_markup=kb
            )
            await state.set_state(AddSubjectState.cabinet)
            
        elif subject_type == "rk":
            # –ü—Ä–µ–¥–º–µ—Ç —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–∞–±–∏–Ω–µ—Ç–∞ (rK)
            async with pool.acquire() as conn:
                async with conn.cursor() as cur:
                    await cur.execute("INSERT INTO subjects (name, rK) VALUES (%s, %s)", (subject_name, True))
            
            await callback.message.edit_text(
                f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ: {subject_name}\n"
                f"üî¢ –¢–∏–ø: —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–∞–±–∏–Ω–µ—Ç–∞ (rK)\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ "
                f"–∫–∞–±–∏–Ω–µ—Ç –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.",
                reply_markup=admin_menu()
            )
            await state.clear()
        
        await callback.answer()
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
        await state.clear()
        await callback.answer()


@dp.callback_query(F.data.startswith("pair_"))
async def choose_pair(callback: types.CallbackQuery, state: FSMContext):
    pair_number = int(callback.data[len("pair_"):])
    await state.update_data(pair_number=pair_number)
    
    data = await state.get_data()
    subject_name = data["subject"]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–µ–¥–º–µ—Ç–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç (rK)
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT id, rK FROM subjects WHERE name=%s", (subject_name,))
                result = await cur.fetchone()
                if not result:
                    await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                    await state.clear()
                    return
                    
                subject_id, is_rk = result
        
        if is_rk:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —Å rK - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
            ])
            await callback.message.edit_text(
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
                f"üî¢ –¢–∏–ø: —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–∞–±–∏–Ω–µ—Ç–∞\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã:",
                reply_markup=kb
            )
            await state.set_state(AddLessonState.cabinet)
        else:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –±–µ–∑ rK - –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–∞–±–∏–Ω–µ—Ç –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            import re
            cabinet_match = re.search(r'(\s+)(\d+\.?\d*[–∞-—è]?|\d+\.?\d*/\d+\.?\d*|—Å–ø/–∑|–∞–∫—Ç–æ–≤—ã–π –∑–∞–ª|—Å–ø–æ—Ä—Ç–∑–∞–ª)$', subject_name)
            
            if cabinet_match:
                cabinet = cabinet_match.group(2)
                clean_subject_name = subject_name.replace(cabinet_match.group(0), '').strip()
            else:
                cabinet = "–ù–µ —É–∫–∞–∑–∞–Ω"
                clean_subject_name = subject_name
            
            await state.update_data(cabinet=cabinet)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –í–°–ï–• —á–∞—Ç–æ–≤
            async with pool.acquire() as conn:
                async with conn.cursor() as cur:
                    # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –í–°–ï–• —á–∞—Ç–æ–≤
                    for chat_id in ALLOWED_CHAT_IDS:
                        await cur.execute("""
                            INSERT INTO rasp_detailed (chat_id, day, week_type, pair_number, subject_id, cabinet)
                            VALUES (%s, %s, %s, %s, %s, %s)
                        """, (chat_id, data["day"], data["week_type"], pair_number, subject_id, cabinet))
            
            display_name = clean_subject_name
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            source_chat_id = ALLOWED_CHAT_IDS[0]
            await sync_rasp_to_all_chats(source_chat_id)
            
            await callback.message.edit_text(
                f"‚úÖ –£—Ä–æ–∫ '{display_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤–æ –≤—Å–µ —á–∞—Ç—ã!\n"
                f"üìÖ –î–µ–Ω—å: {DAYS[data['day']-1]}\n"
                f"üî¢ –ü–∞—Ä–∞: {pair_number}\n"
                f"üè´ –ö–∞–±–∏–Ω–µ—Ç: {cabinet}\n\n"
                f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                reply_markup=admin_menu()
            )
            await state.clear()
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ choose_pair: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: {e}")
        await state.clear()

@dp.message(AddLessonState.cabinet)
async def set_cabinet(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cabinet = message.text.strip()
    
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT id FROM subjects WHERE name=%s", (data["subject"],))
            subject_id = (await cur.fetchone())[0]
            await cur.execute("""
                INSERT INTO rasp_detailed (chat_id, day, week_type, pair_number, subject_id, cabinet)
                VALUES (%s, %s, %s, %s, %s, %s)
            """, (DEFAULT_CHAT_ID, data["day"], data["week_type"], data["pair_number"], subject_id, cabinet))
    
    await message.answer(
        f"‚úÖ –£—Ä–æ–∫ '{data['subject']}' –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"üìÖ –î–µ–Ω—å: {DAYS[data['day']-1]}\n" 
        f"üî¢ –ü–∞—Ä–∞: {data['pair_number']}\n"
        f"üè´ –ö–∞–±–∏–Ω–µ—Ç: {cabinet} (–≤—Ä—É—á–Ω—É—é)\n\n"
        f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_menu()
    )
    await state.clear()

@dp.callback_query(F.data.startswith("addlesson_"))
async def choose_lesson(callback: types.CallbackQuery, state: FSMContext):
    lesson = callback.data[len("addlesson_"):]
    await state.update_data(lesson=lesson)
    if lesson.endswith("rK"):
        await greet_and_send(callback.from_user, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏:", callback=callback,
                             markup=InlineKeyboardMarkup(inline_keyboard=[
                                 [InlineKeyboardButton(text="1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–∞—è", callback_data="cab_week_1")],
                                 [InlineKeyboardButton(text="2Ô∏è‚É£ –ß–µ—Ç–Ω–∞—è", callback_data="cab_week_2")]
                             ]))
        await state.set_state(SetCabinetState.week_type)
    else:
        await greet_and_send(callback.from_user, f"–£—Ä–æ–∫ '{lesson}' –¥–æ–±–∞–≤–ª–µ–Ω —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", callback=callback)
        await state.clear()

@dp.callback_query(F.data == "admin_set_cabinet")
async def admin_set_cabinet_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–∞—è", callback_data="cab_week_1")],
        [InlineKeyboardButton(text="2Ô∏è‚É£ –ß–µ—Ç–Ω–∞—è", callback_data="cab_week_2")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])
    await greet_and_send(callback.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏:", callback=callback, markup=kb)
    await state.set_state(SetCabinetState.week_type)
    await callback.answer()

@dp.callback_query(F.data.startswith("cab_week_"))
async def set_cab_week(callback: types.CallbackQuery, state: FSMContext):
    week_type = int(callback.data[-1])
    await state.update_data(week_type=week_type)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=day, callback_data=f"cab_day_{i+1}")] 
        for i, day in enumerate(DAYS)
    ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    )
    await greet_and_send(callback.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", callback=callback, markup=kb)
    await state.set_state(SetCabinetState.day)
    await callback.answer()

@dp.callback_query(F.data.startswith("cab_day_"))
async def set_cab_day(callback: types.CallbackQuery, state: FSMContext):
    day = int(callback.data[len("cab_day_"):])
    await state.update_data(day=day)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(i), callback_data=f"cab_pair_{i}")] for i in range(1, 7)
    ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    )
    await greet_and_send(callback.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã:", callback=callback, markup=kb)
    await state.set_state(SetCabinetState.pair_number)
    await callback.answer()

@dp.message(SetCabinetState.cabinet)
async def set_cabinet_final(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cabinet = message.text.strip()
    
    if cabinet.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '‚ùå –æ—Ç–º–µ–Ω–∞']:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        await state.clear()
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –í–°–ï–• —á–∞—Ç–æ–≤
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            for chat_id in ALLOWED_CHAT_IDS:
                await cur.execute("""
                    SELECT id FROM rasp_detailed
                    WHERE chat_id=%s AND day=%s AND week_type=%s AND pair_number=%s
                """, (chat_id, data["day"], data["week_type"], data["pair_number"]))
                row = await cur.fetchone()
                if row:
                    await cur.execute("""
                        UPDATE rasp_detailed
                        SET cabinet=%s
                        WHERE id=%s
                    """, (cabinet, row[0]))
                else:
                    await cur.execute("""
                        INSERT INTO rasp_detailed (chat_id, day, week_type, pair_number, cabinet)
                        VALUES (%s, %s, %s, %s, %s)
                    """, (chat_id, data["day"], data["week_type"], data["pair_number"], cabinet))
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    source_chat_id = ALLOWED_CHAT_IDS[0]
    await sync_rasp_to_all_chats(source_chat_id)
    
    await message.answer(
        f"‚úÖ –ö–∞–±–∏–Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤!\n"
        f"üìÖ –î–µ–Ω—å: {DAYS[data['day']-1]}\n"
        f"üî¢ –ü–∞—Ä–∞: {data['pair_number']}\n"
        f"üè´ –ö–∞–±–∏–Ω–µ—Ç: {cabinet}\n\n"
        f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_menu()
    )
    await state.clear()

@dp.callback_query(F.data == "admin_clear_pair")
async def admin_clear_pair_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–∞—è", callback_data="clr_week_1")],
        [InlineKeyboardButton(text="2Ô∏è‚É£ –ß–µ—Ç–Ω–∞—è", callback_data="clr_week_2")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])
    await greet_and_send(callback.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏:", callback=callback, markup=kb)
    await state.set_state(ClearPairState.week_type)
    await callback.answer()

@dp.callback_query(F.data.startswith("clr_week_"))
async def clear_pair_week(callback: types.CallbackQuery, state: FSMContext):
    week_type = int(callback.data[-1])
    await state.update_data(week_type=week_type)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=day, callback_data=f"clr_day_{i+1}")]
        for i, day in enumerate(DAYS)
    ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    )
    await greet_and_send(callback.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", callback=callback, markup=kb)
    await state.set_state(ClearPairState.day)
    await callback.answer()

@dp.callback_query(F.data.startswith("clr_day_"))
async def clear_pair_day(callback: types.CallbackQuery, state: FSMContext):
    day = int(callback.data[len("clr_day_"):])
    await state.update_data(day=day)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(i), callback_data=f"clr_pair_{i}")] for i in range(1, 7)
    ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    )
    await greet_and_send(callback.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã:", callback=callback, markup=kb)
    await state.set_state(ClearPairState.pair_number)
    await callback.answer()

@dp.callback_query(F.data.startswith("clr_pair_"))
async def clear_pair_number(callback: types.CallbackQuery, state: FSMContext):
    pair_number = int(callback.data[len("clr_pair_"):])
    data = await state.get_data()

    # –û—á–∏—â–∞–µ–º –ø–∞—Ä—É –¥–ª—è –í–°–ï–• —á–∞—Ç–æ–≤
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            for chat_id in ALLOWED_CHAT_IDS:
                # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
                await cur.execute("""
                    SELECT id FROM rasp_detailed
                    WHERE chat_id=%s AND day=%s AND week_type=%s AND pair_number=%s
                """, (chat_id, data["day"], data["week_type"], pair_number))
                row = await cur.fetchone()

                if row:
                    # –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ NULL –∏ –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ NULL
                    await cur.execute("""
                        UPDATE rasp_detailed
                        SET subject_id=NULL, cabinet=NULL
                        WHERE id=%s
                    """, (row[0],))
                else:
                    # —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å
                    await cur.execute("""
                        INSERT INTO rasp_detailed (chat_id, day, week_type, pair_number, subject_id, cabinet)
                        VALUES (%s, %s, %s, %s, NULL, NULL)
                    """, (chat_id, data["day"], data["week_type"], pair_number))

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    source_chat_id = ALLOWED_CHAT_IDS[0]
    await sync_rasp_to_all_chats(source_chat_id)

    await callback.message.edit_text(
        f"‚úÖ –ü–∞—Ä–∞ {pair_number} ({DAYS[data['day']-1]}, –Ω–µ–¥–µ–ª—è {data['week_type']}) –æ—á–∏—â–µ–Ω–∞ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö.",
        reply_markup=admin_menu()
    )
    await state.clear()
    await callback.answer()

@dp.message(Command("sync_rasp"))
async def sync_rasp_all_chats(message: types.Message):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ–∂–¥—É –≤—Å–µ–º–∏ —á–∞—Ç–∞–º–∏"""
    if message.from_user.id not in ALLOWED_USERS:
        return
    
    try:
        main_chat_id = ALLOWED_CHAT_IDS[0]
        synced_count = 0
        
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                # –ö–æ–ø–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –≤–æ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                for chat_id in ALLOWED_CHAT_IDS[1:]:  # –í—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
                    # –û—á–∏—â–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ
                    await cur.execute("DELETE FROM rasp_detailed WHERE chat_id=%s", (chat_id,))
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞
                    await cur.execute("""
                        INSERT INTO rasp_detailed (chat_id, day, week_type, pair_number, subject_id, cabinet)
                        SELECT %s, day, week_type, pair_number, subject_id, cabinet 
                        FROM rasp_detailed 
                        WHERE chat_id=%s
                    """, (chat_id, main_chat_id))
                    
                    synced_count += 1
        
        await message.answer(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ {synced_count} —á–∞—Ç–æ–≤.")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")


@dp.callback_query(F.data == "admin_delete_teacher_message")
async def admin_delete_teacher_message_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ (–ë–ï–ó chat_id –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
    messages = await get_teacher_messages(pool, limit=20)
    
    if not messages:
        await callback.message.edit_text(
            "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n\n"
            "‚ùå –í –±–∞–∑–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    keyboard = []
    for i, (msg_id, message_id, signature, text, msg_type, created_at) in enumerate(messages):
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        display_text = text[:30] + "..." if len(text) > 30 else text
        if not display_text:
            display_text = f"{msg_type}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if isinstance(created_at, datetime.datetime):
            date_str = created_at.strftime("%d.%m %H:%M")
        else:
            date_str = str(created_at)
        
        button_text = f"{signature}: {display_text} ({date_str})"
        
        keyboard.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"delete_teacher_msg_{msg_id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=kb
    )
    await callback.answer()

@dp.callback_query(F.data == "menu_admin_from_delete")
async def menu_admin_from_delete_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await state.clear()
    await callback.message.edit_text("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("delete_teacher_msg_"))
async def process_delete_teacher_message(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "menu_admin":
        await callback.message.edit_text("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        await state.clear()
        await callback.answer()
        return
    
    try:
        message_db_id = int(callback.data[len("delete_teacher_msg_"):])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT signature, message_text, message_type, created_at
                    FROM teacher_messages WHERE id = %s
                """, (message_db_id,))
                message_data = await cur.fetchone()
        
        if not message_data:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        signature, text, msg_type, created_at = message_data
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if isinstance(created_at, datetime.datetime):
            date_str = created_at.strftime("%d.%m.%Y %H:%M")
        else:
            date_str = str(created_at)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        # –í —Ñ—É–Ω–∫—Ü–∏–∏ process_delete_teacher_message –∑–∞–º–µ–Ω–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ —ç—Ç—É:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_msg_{message_db_id}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="menu_admin_from_delete")]
        ])
                
        message_info = f"üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
        message_info += f"üë®‚Äçüè´ –û—Ç: {signature}\n"
        message_info += f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        message_info += f"üìä –¢–∏–ø: {msg_type}\n"
        
        if text and text != "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" and text != "—Å—Ç–∏–∫–µ—Ä":
            message_info += f"üìù –¢–µ–∫—Å—Ç: {text}\n"
        
        await callback.message.edit_text(message_info, reply_markup=kb)
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("confirm_delete_msg_"))
async def confirm_delete_teacher_message(callback: types.CallbackQuery):
    try:
        message_db_id = int(callback.data[len("confirm_delete_msg_"):])
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = await delete_teacher_message(pool, message_db_id)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                reply_markup=admin_menu()
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.\n\n"
                "‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                reply_markup=admin_menu()
            )
            
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}\n\n"
            "‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=admin_menu()
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data == "cancel_delete_msg")
async def cancel_delete_teacher_message(callback: types.CallbackQuery):
    # –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º menu_back –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await menu_back_handler(callback, None)
    await callback.answer()


@dp.callback_query(F.data == "admin_my_publish_time")
async def admin_my_publish_time(callback: types.CallbackQuery):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –≤ –õ–°", show_alert=True)
        return
    
    now = datetime.datetime.now(TZ)
    times = await get_publish_times(pool)
    if not times:
        text = "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ."
    else:
        future_times = sorted([(h, m) for _, h, m in times if (h, m) > (now.hour, now.minute)])
        if future_times:
            hh, mm = future_times[0]
            msg = f"–°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–µ–≥–æ–¥–Ω—è –≤ –û–º—Å–∫–µ: {hh:02d}:{mm:02d}"
        else:
            hh, mm = sorted([(h, m) for _, h, m in times])[0]
            msg = f"–°–µ–≥–æ–¥–Ω—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç. –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤—Ç—Ä–∞ –≤ –û–º—Å–∫–µ: {hh:02d}:{mm:02d}"
        text = msg
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_admin")]
    ])
    
    await greet_and_send(callback.from_user, text, callback=callback, markup=kb)
    await callback.answer()

@dp.callback_query(F.data == "admin_edit")
async def admin_edit_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return
    await greet_and_send(callback.from_user, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (1-6):", callback=callback)
    await state.set_state(EditRaspState.day)
    await callback.answer()

async def greet_and_send(user: types.User, text: str, message: types.Message = None, callback: types.CallbackQuery = None, markup=None, chat_id: int | None = None, include_joke: bool = False, include_week_info: bool = False):
    if include_joke:
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT text FROM anekdoty ORDER BY RAND() LIMIT 1")
                row = await cur.fetchone()
                if row:
                    text += f"\n\nüòÇ –ê–Ω–µ–∫–¥–æ—Ç:\n{row[0]}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    week_info = ""
    if include_week_info:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —á–µ—Ç–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö
            current_week = await get_current_week_type(pool)
            week_name = "–ù–µ—á–µ—Ç–Ω–∞—è" if current_week == 1 else "–ß–µ—Ç–Ω–∞—è"
            week_info = f"\n\nüìÖ –°–µ–π—á–∞—Å –Ω–µ–¥–µ–ª—è: {week_name}"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ç–Ω–æ—Å—Ç–∏: {e}")
            week_info = f"\n\nüìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–µ–ª–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    nickname = await get_nickname(pool, user.id)
    greet = f"üëã –°–∞–ª–∞–º, {nickname}!\n\n" if nickname else "üëã –°–∞–ª–∞–º!\n\n"
    full_text = greet + text + week_info
    
    if callback:
        try:
            await callback.message.edit_text(full_text, reply_markup=markup)
        except:
            await callback.message.answer(full_text, reply_markup=markup)
    elif message:
        try:
            await message.answer(full_text, reply_markup=markup)
        except:
            await bot.send_message(chat_id=message.chat.id, text=full_text, reply_markup=markup)
    elif chat_id is not None:
        await bot.send_message(chat_id=chat_id, text=full_text, reply_markup=markup)
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω chat_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –õ–°
        await bot.send_message(chat_id=user.id, text=full_text, reply_markup=markup)



async def get_rasp_formatted(day, week_type, chat_id: int = None, target_date: datetime.date = None):
    """–ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö"""
    # –ï—Å–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
    if chat_id is None:
        chat_id = ALLOWED_CHAT_IDS[0] if ALLOWED_CHAT_IDS else DEFAULT_CHAT_ID
    
    msg_lines = []
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute(
                """SELECT r.pair_number, COALESCE(r.cabinet, '') as cabinet, COALESCE(s.name, '–°–≤–æ–±–æ–¥–Ω–æ') as name
                   FROM rasp_detailed r
                   LEFT JOIN subjects s ON r.subject_id = s.id
                   WHERE r.chat_id=%s AND r.day=%s AND r.week_type=%s
                   ORDER BY r.pair_number""",
                (chat_id, day, week_type)
            )
            rows = await cur.fetchall()
    
    max_pair = 0
    pairs_dict = {}
    for row in rows:
        pair_num = row[0]
        pairs_dict[pair_num] = row
        if pair_num > max_pair:
            max_pair = pair_num
    
    if max_pair == 0:
        result = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ."
    else:
        for i in range(1, max_pair + 1):
            if i in pairs_dict:
                row = pairs_dict[i]
                cabinet = row[1]
                subject_name = row[2]
                
                if subject_name == "–°–≤–æ–±–æ–¥–Ω–æ":
                    msg_lines.append(f"{i}. –°–≤–æ–±–æ–¥–Ω–æ")
                else:
                    import re
                    clean_subject_name = re.sub(r'\s+(\d+\.?\d*[–∞-—è]?|\d+\.?\d*/\d+\.?\d*|—Å–ø/–∑|–∞–∫—Ç–æ–≤—ã–π –∑–∞–ª|—Å–ø–æ—Ä—Ç–∑–∞–ª)$', '', subject_name).strip()
                    
                    if cabinet and cabinet != "–ù–µ —É–∫–∞–∑–∞–Ω":
                        msg_lines.append(f"{i}. {cabinet} {clean_subject_name}")
                    else:
                        cabinet_match = re.search(r'(\s+)(\d+\.?\d*[–∞-—è]?|\d+\.?\d*/\d+\.?\d*|—Å–ø/–∑|–∞–∫—Ç–æ–≤—ã–π –∑–∞–ª|—Å–ø–æ—Ä—Ç–∑–∞–ª)$', subject_name)
                        if cabinet_match:
                            extracted_cabinet = cabinet_match.group(2)
                            msg_lines.append(f"{i}. {extracted_cabinet} {clean_subject_name}")
                        else:
                            msg_lines.append(f"{i}. {clean_subject_name}")
            else:
                msg_lines.append(f"{i}. –°–≤–æ–±–æ–¥–Ω–æ")
        
        result = "\n".join(msg_lines)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –Ω–∞ —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É
    if target_date is None:
        target_date = datetime.datetime.now(TZ).date()
    
    target_date_str = target_date.strftime("%Y-%m-%d")
    has_hw = await has_homework_for_date(pool, target_date_str)
    
    if has_hw:
        result += "\n\nüìö –ï—Å—Ç—å –∑–∞–¥–∞–Ω–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
    
    return result

async def send_today_rasp():
    for chat_id in ALLOWED_CHAT_IDS:
        try:
            now = datetime.datetime.now(TZ)
            today = now.date()
            current_weekday = today.isoweekday()
            hour = now.hour
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if hour >= 18:
                target_date = today + datetime.timedelta(days=1)
                day_to_post = target_date.isoweekday()
                
                if day_to_post == 7:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    target_date += datetime.timedelta(days=1)
                    day_to_post = 1
                    day_name = "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"
                else:
                    day_name = "–∑–∞–≤—Ç—Ä–∞"
            else:
                target_date = today
                day_to_post = current_weekday
                
                if day_to_post == 7:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    target_date += datetime.timedelta(days=1)
                    day_to_post = 1
                    day_name = "–∑–∞–≤—Ç—Ä–∞ (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"
                else:
                    day_name = "—Å–µ–≥–æ–¥–Ω—è"
            
            # –ü–û–õ–£–ß–ê–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–£–Æ –ß–ï–¢–ù–û–°–¢–¨
            week_type = await get_current_week_type(pool)
            
            # –í–ê–ñ–ù–û: –ï–°–õ–ò –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö –ò –°–ï–ô–ß–ê–° –í–û–°–ö–†–ï–°–ï–ù–¨–ï –ò–õ–ò –°–£–ë–ë–û–¢–ê –ü–û–°–õ–ï 18:00 - –ú–ï–ù–Ø–ï–ú –ß–ï–¢–ù–û–°–¢–¨
            if day_to_post == 1:
                # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –ò–õ–ò —Å–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞ –ø–æ—Å–ª–µ 18:00
                if current_weekday == 7 or (current_weekday == 6 and hour >= 18):
                    week_type = 2 if week_type == 1 else 1
                    print(f"üîÅ –°–º–µ–Ω–∞ —á–µ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞: {'–Ω–µ—á–µ—Ç–Ω–∞—è' if week_type == 1 else '—á–µ—Ç–Ω–∞—è'}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            text = await get_rasp_formatted(day_to_post, week_type, chat_id, target_date)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            day_names = {
                1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞",
                4: "–ß–µ—Ç–≤–µ—Ä–≥", 5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞"
            }
            
            week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_type == 1 else "—á–µ—Ç–Ω–∞—è"
            
            if "(" in day_name and ")" in day_name:
                msg = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name} | –ù–µ–¥–µ–ª—è: {week_name}\n\n{text}"
            else:
                msg = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name} ({day_names[day_to_post]}) | –ù–µ–¥–µ–ª—è: {week_name}\n\n{text}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç
            async with pool.acquire() as conn:
                async with conn.cursor() as cur:
                    await cur.execute("SELECT text FROM anekdoty ORDER BY RAND() LIMIT 1")
                    row = await cur.fetchone()
                    if row:
                        msg += f"\n\nüòÇ –ê–Ω–µ–∫–¥–æ—Ç:\n{row[0]}"
            
            await bot.send_message(chat_id, msg)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")




def _job_id_for_time(hour: int, minute: int) -> str:
    return f"publish_{hour:02d}_{minute:02d}"
async def reschedule_publish_jobs(pool):
    try:
        for job in list(scheduler.get_jobs()):
            if job.id.startswith("publish_"):
                try:
                    scheduler.remove_job(job.id)
                except Exception:
                    pass
    except Exception:
        pass
    times = await get_publish_times(pool)
    for row in times:
        pid, hour, minute = row
        job_id = _job_id_for_time(hour, minute)
        try:
            scheduler.add_job(send_today_rasp, CronTrigger(hour=hour, minute=minute, timezone=TZ), id=job_id)
        except Exception:
            pass
            
@dp.message(Command("–∞—Ä–∫–∞–¥–∏–π", "–∞–∫—Ä–∞–¥—ã–π", "–∞–∫—Ä–∞–¥–∏–π", "–∞—Ä–∫–∞—à–∞", "–∫–æ—Ç–æ–≤", "arkadiy", "arkadiy@arcadiyis07_bot"))
async def trigger_handler(message: types.Message):
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –õ–° –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
    is_private = message.chat.type == "private"
    is_allowed_chat = message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await message.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
        return
    
    is_admin = (message.from_user.id in ALLOWED_USERS) and is_private
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    is_special_user = False
    if is_private:
        signature = await get_special_user_signature(pool, message.from_user.id)
        is_special_user = signature is not None

    # –í –õ–° –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –õ–° —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ç–Ω–æ—Å—Ç–∏, –≤ –±–µ—Å–µ–¥–∞—Ö - ID –±–µ—Å–µ–¥—ã
    current_chat_id = message.chat.id

    await greet_and_send(
        message.from_user,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        message=message,
        markup=main_menu(is_admin=is_admin, is_special_user=is_special_user, is_group_chat=not is_private),
        include_week_info=True,
        chat_id=current_chat_id  # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chat_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ç–Ω–æ—Å—Ç–∏
    )

@dp.callback_query(F.data.startswith("menu_"))
async def menu_handler(callback: types.CallbackQuery, state: FSMContext):
    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤ –õ–° –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return
        
    action = callback.data
    if action == "menu_rasp":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=day, callback_data=f"rasp_day_{i+1}")]
                for i, day in enumerate(DAYS)
            ] + [[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]]
        )
        await greet_and_send(callback.from_user, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", callback=callback, markup=kb)
        await callback.answer()
    elif action == "menu_zvonki":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ë—É–¥–Ω–∏–µ –¥–Ω–∏", callback_data="zvonki_weekday")],
            [InlineKeyboardButton(text="üìÖ –°—É–±–±–æ—Ç–∞", callback_data="zvonki_saturday")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ])
        await greet_and_send(callback.from_user, "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", callback=callback, markup=kb)
        await callback.answer()
    elif action == "menu_admin":
        if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
            await callback.answer("‚õî –ê–¥–º–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
            return
        await greet_and_send(callback.from_user, "‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", callback=callback, markup=admin_menu())
        await callback.answer()
    elif action == "menu_back":
        await menu_back_handler(callback, state)

@dp.callback_query(F.data == "tomorrow_rasp")
async def tomorrow_rasp_handler(callback: types.CallbackQuery):
    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return

    chat_id = callback.message.chat.id
    now = datetime.datetime.now(TZ)
    today = now.date()
    current_weekday = today.isoweekday()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –¥–ª—è –ø–æ–∫–∞–∑–∞ (–∑–∞–≤—Ç—Ä–∞)
    target_date = today + datetime.timedelta(days=1)
    day_to_show = target_date.isoweekday()
    
    # –ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    if day_to_show == 7:
        target_date += datetime.timedelta(days=1)
        day_to_show = 1
        day_name = "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"
    else:
        day_name = "–∑–∞–≤—Ç—Ä–∞"
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏
    week_type = await get_current_week_type(pool, chat_id)
    
    # –í–ê–ñ–ù–û: –ï–°–õ–ò –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö –ò –°–ï–ô–ß–ê–° –í–û–°–ö–†–ï–°–ï–ù–¨–ï –ò–õ–ò –°–£–ë–ë–û–¢–ê - –ú–ï–ù–Ø–ï–ú –ß–ï–¢–ù–û–°–¢–¨
    if day_to_show == 1:
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –ò–õ–ò —Å–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞
        if current_weekday == 7 or current_weekday == 6:
            week_type = 2 if week_type == 1 else 1
            print(f"üîÅ –°–º–µ–Ω–∞ —á–µ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –≤ tomorrow_rasp: {'–Ω–µ—á–µ—Ç–Ω–∞—è' if week_type == 1 else '—á–µ—Ç–Ω–∞—è'}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –Ω–∞ target_date
    text = await get_rasp_formatted(day_to_show, week_type, chat_id, target_date)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    day_names = {
        1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        2: "–í—Ç–æ—Ä–Ω–∏–∫", 
        3: "–°—Ä–µ–¥–∞",
        4: "–ß–µ—Ç–≤–µ—Ä–≥",
        5: "–ü—è—Ç–Ω–∏—Ü–∞",
        6: "–°—É–±–±–æ—Ç–∞"
    }
    
    week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_type == 1 else "—á–µ—Ç–Ω–∞—è"
    
    message = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name} ({day_names[day_to_show]}) | –ù–µ–¥–µ–ª—è: {week_name}\n\n{text}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT text FROM anekdoty ORDER BY RAND() LIMIT 1")
            row = await cur.fetchone()
            if row:
                message += f"\n\nüòÇ –ê–Ω–µ–∫–¥–æ—Ç:\n{row[0]}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
    ])
    
    await callback.message.edit_text(message, reply_markup=kb)
    await callback.answer()
@dp.callback_query(F.data.startswith("rasp_day_"))
async def on_rasp_day(callback: types.CallbackQuery):

    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return

    parts = callback.data.split("_")
    try:
        day = int(parts[-1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è", show_alert=True)
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–∞—è", callback_data=f"rasp_show_{day}_1")],
        [InlineKeyboardButton(text="2Ô∏è‚É£ –ß–µ—Ç–Ω–∞—è", callback_data=f"rasp_show_{day}_2")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_rasp")]
    ])
    await greet_and_send(callback.from_user, f"üìÖ {DAYS[day-1]} ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", callback=callback, markup=kb)
    await callback.answer()

@dp.message(Command("–Ω–∏–∫–Ω–µ–π–º"))
async def cmd_set_nickname(message: types.Message):

    if not is_allowed_chat(message.chat.id):
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–Ω–∏–∫–Ω–µ–π–º <–≤–∞—à –Ω–∏–∫–Ω–µ–π–º>")
        return
    nickname = parts[1].strip()
    user_id = message.from_user.id 
    try:
        await set_nickname(pool, user_id, nickname)
        await message.answer(f"‚úÖ –í–∞—à –Ω–∏–∫–Ω–µ–π–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {nickname}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∏–∫–Ω–µ–π–º–∞: {e}")
@dp.message(Command("–∞–Ω–µ–∫–¥–æ—Ç"))
async def cmd_anekdot(message: types.Message):

    if not is_allowed_chat(message.chat.id):
        return
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT text FROM anekdoty ORDER BY RAND() LIMIT 1")
            row = await cur.fetchone()
            if row:
                await message.answer(f"üòÇ –ê–Ω–µ–∫–¥–æ—Ç:\n\n{row[0]}")
            else:
                await message.answer("‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç–æ–≤.")
@dp.callback_query(F.data.startswith("rasp_show_"))
async def on_rasp_show(callback: types.CallbackQuery):
    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return

    parts = callback.data.split("_")
    day = int(parts[2])
    week_type = int(parts[3])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É —Å —ç—Ç–∏–º –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
    today = datetime.datetime.now(TZ).date()
    days_ahead = day - today.isoweekday()
    if days_ahead <= 0:
        days_ahead += 7
    target_date = today + datetime.timedelta(days=days_ahead)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö
    chat_id = callback.message.chat.id
    text = await get_rasp_formatted(day, week_type, chat_id, target_date)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"rasp_day_{day}")]
    ])
    
    day_names = {
        1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        2: "–í—Ç–æ—Ä–Ω–∏–∫", 
        3: "–°—Ä–µ–¥–∞",
        4: "–ß–µ—Ç–≤–µ—Ä–≥",
        5: "–ü—è—Ç–Ω–∏—Ü–∞",
        6: "–°—É–±–±–æ—Ç–∞"
    }
    
    week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_type == 1 else "—á–µ—Ç–Ω–∞—è"
    
    await callback.message.edit_text(
        f"üìÖ {day_names[day]} | –ù–µ–¥–µ–ª—è: {week_name}\n\n{text}", 
        reply_markup=kb
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("zvonki_"))
async def zvonki_handler(callback: types.CallbackQuery):
    is_private = callback.message.chat.type == "private"
    is_allowed_chat = callback.message.chat.id in ALLOWED_CHAT_IDS
    
    if not (is_private or is_allowed_chat):
        await callback.answer("‚õî –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ", show_alert=True)
        return
    action = callback.data

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_zvonki")]
    ])

    if action == "zvonki_weekday":
        schedule = get_zvonki(is_saturday=False)
        await greet_and_send(
            callback.from_user,
            f"üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ (–±—É–¥–Ω–∏–µ –¥–Ω–∏):\n{schedule}",
            callback=callback,
            markup=kb,
            include_joke=True 
        )
    elif action == "zvonki_saturday":
        schedule = get_zvonki(is_saturday=True)
        await greet_and_send(
            callback.from_user,
            f"üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ (—Å—É–±–±–æ—Ç–∞):\n{schedule}",
            callback=callback,
            markup=kb,
            include_joke=True  
        )
    await callback.answer()

@dp.callback_query(F.data == "admin_show_chet")
async def admin_show_chet(callback: types.CallbackQuery):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –≤ –õ–°", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —á–µ—Ç–Ω–æ—Å—Ç—å
    current = await get_current_week_type(pool)
    current_str = "–Ω–µ—á–µ—Ç–Ω–∞—è (1)" if current == 1 else "—á–µ—Ç–Ω–∞—è (2)"
    
    status_text = f"üìä –¢–µ–∫—É—â–∞—è —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏ (–æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤):\n\n{current_str}"
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_admin")]
    ])
    
    await callback.message.edit_text(status_text, reply_markup=kb)
    await callback.answer()

@dp.callback_query(F.data == "admin_sync_week")
async def admin_sync_week_handler(callback: types.CallbackQuery):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return
    
    try:
        # –ë–µ—Ä–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
        main_chat_id = ALLOWED_CHAT_IDS[0]
        main_week_type = await get_current_week_type(pool, main_chat_id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–∫—É—é –∂–µ —á–µ—Ç–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
        synced_chats = []
        for chat_id in ALLOWED_CHAT_IDS:
            await set_current_week_type(pool, chat_id, main_week_type)
            synced_chats.append(chat_id)
        
        # –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –õ–° —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∞
        admin_ls_chat_id = callback.message.chat.id
        await set_current_week_type(pool, admin_ls_chat_id, main_week_type)
        synced_chats.append(f"–õ–° ({admin_ls_chat_id})")
        
        week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if main_week_type == 1 else "—á–µ—Ç–Ω–∞—è"
        
        await callback.message.edit_text(
            f"‚úÖ –ß–µ—Ç–Ω–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
            f"–í—Å–µ —á–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞: {week_name} –Ω–µ–¥–µ–ª—è\n"
            f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —á–∞—Ç–æ–≤: {len(synced_chats)}\n\n"
            f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=admin_menu()
        )
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}\n\n"
            f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=admin_menu()
        )
    
    await callback.answer()


@dp.callback_query(F.data == "admin_list_publish_times")
async def admin_list_publish_times(callback: types.CallbackQuery):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –≤ –õ–°", show_alert=True)
        return
    
    rows = await get_publish_times(pool)
    if not rows:
        text = "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–µ –∑–∞–¥–∞–Ω–æ."
    else:
        lines = [f"{rid}: {hour:02d}:{minute:02d} (–û–º—Å–∫)" for rid, hour, minute in rows]
        text = "–¢–µ–∫—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–û–º—Å–∫):\n" + "\n".join(lines)
        text += "\n\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delptime <id>"
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_admin")]
    ])
    
    await greet_and_send(callback.from_user, text, callback=callback, markup=kb)
    await callback.answer()
# –í —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
@dp.callback_query(F.data == "admin_set_publish_time")
async def admin_set_publish_time(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –≤ –õ–°", show_alert=True)
        return
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])
    
    await greet_and_send(
        callback.from_user,
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –ø–æ –û–º—Å–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20:00):",
        callback=callback,
        markup=kb
    )
    await state.set_state(SetPublishTimeState.time)

@dp.message(Command("delptime"))
async def cmd_delptime(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delptime <id> (id –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–π)")
        return
    try:
        pid = int(parts[1])
        await delete_publish_time(pool, pid)
        await reschedule_publish_jobs(pool)
        await message.answer(f"‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å id={pid} —É–¥–∞–ª–µ–Ω–æ –∏ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
@dp.message(SetPublishTimeState.time)
async def set_publish_time_handler(message: types.Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
        await state.clear()
        return
    txt = message.text.strip()
    m = re.match(r"^(\d{1,2}):(\d{1,2})$", txt)
    if not m:
        await message.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 20:00")
        return
    hh = int(m.group(1))
    mm = int(m.group(2))
    if not (0 <= hh <= 23 and 0 <= mm <= 59):
        await message.answer("‚ö† –ß–∞—Å—ã 0-23, –º–∏–Ω—É—Ç—ã 0-59.")
        return
    try:
        await add_publish_time(pool, hh, mm)
        await reschedule_publish_jobs(pool) 
        await message.answer(f"‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {hh:02d}:{mm:02d} (–û–º—Å–∫).")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    finally:
        await state.clear()

@dp.callback_query(F.data == "admin_setchet")
async def admin_setchet_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî¥ –ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", callback_data="set_week_1")],
        [InlineKeyboardButton(text="üîµ –ß–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", callback_data="set_week_2")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")]
    ])
    
    await greet_and_send(
        callback.from_user, 
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:", 
        callback=callback, 
        markup=kb
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("set_week_"))
async def set_week_type_handler(callback: types.CallbackQuery):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –õ–° –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return
    
    week_type = int(callback.data.split("_")[2])
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â—É—é —á–µ—Ç–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö
        await set_current_week_type(pool, week_type=week_type)
        
        week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_type == 1 else "—á–µ—Ç–Ω–∞—è"
        
        await callback.message.edit_text(
            f"‚úÖ –ß–µ—Ç–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {week_name} –Ω–µ–¥–µ–ª—è –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤\n\n"
            f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=admin_menu()
        )
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–µ—Ç–Ω–æ—Å—Ç–∏: {e}\n\n"
            f"‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=admin_menu()
        )
    
    await callback.answer()

@dp.message(Command("check_week"))
async def check_week_status(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —á–µ—Ç–Ω–æ—Å—Ç–∏ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö"""
    if message.from_user.id not in ALLOWED_USERS:
        return
    
    status_text = "üìä –°—Ç–∞—Ç—É—Å —á–µ—Ç–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Ç–∞–º:\n\n"
    
    for chat_id in ALLOWED_CHAT_IDS:
        week_type = await get_current_week_type(pool, chat_id)
        week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_type == 1 else "—á–µ—Ç–Ω–∞—è"
        status_text += f"–ß–∞—Ç {chat_id}: {week_name} ({week_type})\n"
    
    await message.answer(status_text)

@dp.message(SetChetState.week_type)
async def setchet_handler(message: types.Message, state: FSMContext):
    try:
        week_type = int(message.text)
        if week_type not in [1, 2]:
            raise ValueError
        await set_week_type(pool, DEFAULT_CHAT_ID, week_type)
        await greet_and_send(
            message.from_user,
            f"‚úÖ –ß–µ—Ç–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {week_type} ({'–Ω–µ—á–µ—Ç–Ω–∞—è' if week_type==1 else '—á–µ—Ç–Ω–∞—è'})",
            message=message
        )
        await state.clear()
    except ValueError:
        await greet_and_send(message.from_user, "‚ö† –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.", message=message)

async def send_today_rasp():
    for chat_id in ALLOWED_CHAT_IDS:
        try:
            now = datetime.datetime.now(TZ)
            today = now.date()
            hour = now.hour
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if hour >= 18:
                target_date = today + datetime.timedelta(days=1)
                day_to_post = target_date.isoweekday()
                
                if day_to_post == 7:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    target_date += datetime.timedelta(days=1)
                    day_to_post = 1
                    day_name = "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"
                else:
                    day_name = "–∑–∞–≤—Ç—Ä–∞"
            else:
                target_date = today
                day_to_post = today.isoweekday()
                
                if day_to_post == 7:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    target_date += datetime.timedelta(days=1)
                    day_to_post = 1
                    day_name = "–∑–∞–≤—Ç—Ä–∞ (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"
                else:
                    day_name = "—Å–µ–≥–æ–¥–Ω—è"
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —á–µ—Ç–Ω–æ—Å—Ç—å
            base_week_type = await get_current_week_type(pool)
            
            # –ï–°–õ–ò –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö –ò –°–ï–ô–ß–ê–° –í–û–°–ö–†–ï–°–ï–ù–¨–ï - –ú–ï–ù–Ø–ï–ú –ß–ï–¢–ù–û–°–¢–¨
            if day_to_post == 1 and (today.isoweekday() == 7 or (hour >= 18 and (today + datetime.timedelta(days=1)).isoweekday() == 7)):
                week_type = 2 if base_week_type == 1 else 1
                week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_type == 1 else "—á–µ—Ç–Ω–∞—è"
                day_note = " (–Ω–µ–¥–µ–ª—è —Å–º–µ–Ω–∏–ª–∞—Å—å)"
            else:
                week_type = base_week_type
                week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_type == 1 else "—á–µ—Ç–Ω–∞—è"
                day_note = ""
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
            text = await get_rasp_formatted(day_to_post, week_type, chat_id, target_date)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            day_names = {
                1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞",
                4: "–ß–µ—Ç–≤–µ—Ä–≥", 5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞"
            }
            
            if "(" in day_name and ")" in day_name:
                msg = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name} | –ù–µ–¥–µ–ª—è: {week_name}{day_note}\n\n{text}"
            else:
                msg = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name} ({day_names[day_to_post]}) | –ù–µ–¥–µ–ª—è: {week_name}{day_note}\n\n{text}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç
            async with pool.acquire() as conn:
                async with conn.cursor() as cur:
                    await cur.execute("SELECT text FROM anekdoty ORDER BY RAND() LIMIT 1")
                    row = await cur.fetchone()
                    if row:
                        msg += f"\n\nüòÇ –ê–Ω–µ–∫–¥–æ—Ç:\n{row[0]}"
            
            await bot.send_message(chat_id, msg)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

@dp.message(Command("sync_week"))
async def sync_week_all_chats(message: types.Message):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —á–µ—Ç–Ω–æ—Å—Ç—å –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö"""
    if message.from_user.id not in ALLOWED_USERS:
        return
    
    try:
        # –ë–µ—Ä–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —á–∞—Ç–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
        main_chat_id = ALLOWED_CHAT_IDS[0]
        main_week_type = await get_current_week_type(pool, main_chat_id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–∫—É—é –∂–µ —á–µ—Ç–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
        for chat_id in ALLOWED_CHAT_IDS:
            await set_current_week_type(pool, chat_id, main_week_type)
        
        week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if main_week_type == 1 else "—á–µ—Ç–Ω–∞—è"
        await message.answer(f"‚úÖ –ß–µ—Ç–Ω–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {week_name} –Ω–µ–¥–µ–ª—è –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")


@dp.message(Command("listdr"))
async def cmd_list_birthdays(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤ –õ–°"""
    if message.chat.type != "private" or message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
        return

    birthdays = await get_all_birthdays(pool)
    
    if not birthdays:
        await message.answer("üìÖ –í –±–∞–∑–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.")
        return
    
    today = datetime.datetime.now(TZ).date()
    birthday_list = "üìÖ –í—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –±–∞–∑–µ:\n\n"
    
    for bday in birthdays:
        bday_id, name, birth_date, added_by, created_at = bday
        
        birth_date_obj = birth_date if isinstance(birth_date, datetime.date) else datetime.datetime.strptime(str(birth_date), '%Y-%m-%d').date()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        age = today.year - birth_date_obj.year
        if today.month < birth_date_obj.month or (today.month == birth_date_obj.month and today.day < birth_date_obj.day):
            age -= 1
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        birth_date_str = birth_date_obj.strftime("%d.%m.%Y")
        
        # –û—Ç–º–µ—á–∞–µ–º, –µ—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
        today_str = today.strftime("%m-%d")
        bday_str = birth_date_obj.strftime("%m-%d")
        today_flag = " üéâ –°–ï–ì–û–î–ù–Ø!" if today_str == bday_str else ""
        
        birthday_list += f"üÜî ID: {bday_id}\n"
        birthday_list += f"üë§ {name}{today_flag}\n"
        birthday_list += f"üìÖ {birth_date_str} (–≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç)\n"
        birthday_list += "‚îÄ" * 30 + "\n"
    
    birthday_list += f"\nüí° –î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /testdr <ID>"
    
    await message.answer(birthday_list)

async def get_birthday_by_id(pool, birthday_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ ID"""
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                SELECT id, user_name, birth_date, added_by_user_id, created_at
                FROM birthdays 
                WHERE id = %s
            """, (birthday_id,))
            return await cur.fetchone()

'''
@dp.message(Command("testdr"))
async def cmd_test_birthday(message: types.Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ ID –∏–∑ –±–∞–∑—ã - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤ –õ–°"""
    if message.chat.type != "private" or message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            "‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /testdr <ID_–∏–∑_–±–∞–∑—ã>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ ID –≤ /listdr\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/testdr 1\n"
            "/testdr 5"
        )
        return

    try:
        birthday_id = int(parts[1].strip())
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
        birthday_data = await get_birthday_by_id(pool, birthday_id)
        if not birthday_data:
            await message.answer(f"‚ùå –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å ID {birthday_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /listdr —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ ID.")
            return

        bday_id, user_name, birth_date, added_by, created_at = birthday_data
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        today = datetime.datetime.now(TZ).date()
        birth_date_obj = birth_date if isinstance(birth_date, datetime.date) else datetime.datetime.strptime(str(birth_date), '%Y-%m-%d').date()
        age = today.year - birth_date_obj.year
        if today.month < birth_date_obj.month or (today.month == birth_date_obj.month and today.day < birth_date_obj.day):
            age -= 1

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ)
        message_text = (
            f"üéâ –° –î–ù–ï–ú –†–û–ñ–î–ï–ù–ò–Ø, {user_name.upper()}! üéâ\n\n"
            f"–í —ç—Ç–æ–º –≥–æ–¥—É —Ç–µ–±–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å —Ü–µ–ª—ã—Ö {age} –ª–µ—Ç!\n\n"
            f"–û—Ç —Å–µ—Ä–¥—Ü–∞ –∏ –ø–æ—á–µ–∫ –¥–∞—Ä—é —Ç–µ–±–µ —Ü–≤–µ—Ç–æ—á–µ–∫ üíê"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ –í–°–ï –±–µ—Å–µ–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        success_count = 0
        failed_chats = []

        await message.answer(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {user_name}...")

        for chat_id in ALLOWED_CHAT_IDS:
            try:
                await bot.send_message(chat_id, message_text)
                success_count += 1
                print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {user_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            except Exception as e:
                failed_chats.append(f"{chat_id}: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è {user_name} –≤ —á–∞—Ç {chat_id}: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
        report += f"üë§ –ò–º—è: {user_name}\n"
        report += f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date_obj.strftime('%d.%m.%Y')}\n"
        report += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
        report += f"üÜî ID –≤ –±–∞–∑–µ: {birthday_id}\n\n"
        report += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:\n"
        report += f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count} –∏–∑ {len(ALLOWED_CHAT_IDS)} —á–∞—Ç–æ–≤\n"

        if failed_chats:
            report += f"‚ùå –û—à–∏–±–∫–∏: {len(failed_chats)} —á–∞—Ç–æ–≤\n\n"
            report += "–ß–∞—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏:\n"
            for i, error in enumerate(failed_chats[:3], 1):
                report += f"{i}. {error}\n"
            if len(failed_chats) > 3:
                report += f"... –∏ –µ—â–µ {len(failed_chats) - 3} –æ—à–∏–±–æ–∫"

        await message.answer(report)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã.\n\n–ü—Ä–∏–º–µ—Ä: /testdr 1")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

'''



@dp.message(Command("deldr"))
async def cmd_delete_birthday(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –≤ –õ–°"""
    if message.chat.type != "private" or message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deldr <id>\n\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ /listdr")
        return
    
    try:
        birthday_id = int(parts[1])
        await delete_birthday(pool, birthday_id)
        await message.answer(f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å ID {birthday_id} —É–¥–∞–ª–µ–Ω")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

@dp.message(Command("force_birthday_check"))
async def cmd_force_birthday_check(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if message.from_user.id not in ALLOWED_USERS:
        return
    
    await message.answer("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è...")
    await check_birthdays()
    await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def main():
    global pool
    pool = await get_pool()
    await init_db(pool)
    await ensure_columns(pool)
    await ensure_birthday_columns(pool)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await load_special_users(pool)
    
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await reschedule_publish_jobs(pool)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00 —É—Ç—Ä–∞
    scheduler.add_job(
        check_birthdays, 
        CronTrigger(hour=7, minute=0, timezone=TZ),
        id="birthday_check"
    )
    
    # –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–≠–ö–ê–ü –ë–ê–ó–´ –î–ê–ù–ù–´–• –≤ 6:00 —É—Ç—Ä–∞
    scheduler.add_job(
        backup_database_job,
        CronTrigger(hour=6, minute=0, timezone=TZ),  # 6:00 —É—Ç—Ä–∞ –ø–æ –û–º—Å–∫—É
        id="daily_backup"
    )
        
    scheduler.start()
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
    jobs = scheduler.get_jobs()
    print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: {len(jobs)}")
    for job in jobs:
        print(f"–ó–∞–¥–∞–Ω–∏–µ: {job.id}, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {job.next_run_time}")
    
    await dp.start_polling(bot)
if __name__ == "__main__":
    asyncio.run(main())