import asyncio
import os
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from zoneinfo import ZoneInfo
import aiomysql
import ssl

# ======================
# –ö–æ–Ω—Ñ–∏–≥
# ======================
TOKEN = os.getenv("BOT_TOKEN")
DEFAULT_CHAT_ID = int(os.getenv("CHAT_ID", "0"))
ALLOWED_USERS = [5228681344, 7620086223]

DB_HOST = os.getenv("DB_HOST")
DB_PORT = int(os.getenv("DB_PORT", "3306"))
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_NAME = os.getenv("DB_NAME")

# ======================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ======================
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
TZ = ZoneInfo("Asia/Omsk")
scheduler = AsyncIOScheduler(timezone=TZ)

ssl_ctx = ssl.create_default_context()
ssl_ctx.check_hostname = False
ssl_ctx.verify_mode = ssl.CERT_NONE

# ======================
# –†–∞–±–æ—Ç–∞ —Å –ë–î
# ======================
async def get_pool():
    return await aiomysql.create_pool(
        host=DB_HOST,
        port=DB_PORT,
        user=DB_USER,
        password=DB_PASSWORD,
        db=DB_NAME,
        ssl=ssl_ctx,
        autocommit=True
    )

# ======================
# –†–∞–±–æ—Ç–∞ —Å –ë–î (–¥–æ–±–∞–≤–∏–º –Ω–∏–∫–Ω–µ–π–º—ã)
# ======================
async def init_db(pool):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS rasp (
                id INT AUTO_INCREMENT PRIMARY KEY,
                chat_id BIGINT,
                day INT,
                week_type INT,
                text TEXT
            )
            """)
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS week_setting (
                chat_id BIGINT PRIMARY KEY,
                week_type INT
            )
            """)
            # –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤
            await cur.execute("""
            CREATE TABLE IF NOT EXISTS nicknames (
                user_id BIGINT PRIMARY KEY,
                nickname VARCHAR(255)
            )
            """)

async def set_nickname(pool, user_id: int, nickname: str):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO nicknames (user_id, nickname) 
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE nickname=%s
            """, (user_id, nickname, nickname))

async def get_nickname(pool, user_id: int) -> str | None:
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT nickname FROM nicknames WHERE user_id=%s", (user_id,))
            row = await cur.fetchone()
            return row[0] if row else None


async def add_rasp(pool, chat_id, day, week_type, text):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute(
                "INSERT INTO rasp (chat_id, day, week_type, text) VALUES (%s, %s, %s, %s)",
                (chat_id, day, week_type, text)
            )

async def get_rasp_for_day(pool, chat_id, day, week_type):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute(
                "SELECT text FROM rasp WHERE chat_id=%s AND day=%s AND week_type=%s LIMIT 1",
                (chat_id, day, week_type)
            )
            row = await cur.fetchone()
            if row:
                return row[0]
            # fallback week_type = 0 (any)
            await cur.execute(
                "SELECT text FROM rasp WHERE chat_id=%s AND day=%s AND week_type=0 LIMIT 1",
                (chat_id, day)
            )
            row = await cur.fetchone()
            return row[0] if row else None

async def delete_rasp(pool, day=None):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            if day:
                await cur.execute("DELETE FROM rasp WHERE chat_id=%s AND day=%s", (DEFAULT_CHAT_ID, day))
            else:
                await cur.execute("DELETE FROM rasp WHERE chat_id=%s", (DEFAULT_CHAT_ID,))

# ======================
# –ß–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏
# ======================
async def set_week_type(pool, chat_id, week_type):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO week_setting (chat_id, week_type) 
                VALUES (%s, %s) 
                ON DUPLICATE KEY UPDATE week_type=%s
            """, (chat_id, week_type, week_type))

async def get_week_type(pool, chat_id):
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT week_type FROM week_setting WHERE chat_id=%s", (chat_id,))
            row = await cur.fetchone()
            return row[0] if row else None

# ======================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# ======================
# –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —É–¥–∞–ª–µ–Ω–æ ‚Äî –¥–Ω–∏ 1..6
DAYS = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]

def format_rasp_message(day_num, week_type, text):
    day_name = DAYS[day_num - 1]
    week_name = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_type == 1 else "—á–µ—Ç–Ω–∞—è"
    return f"üìÖ {day_name} | –ù–µ–¥–µ–ª—è: {week_name}\n\n{text}"

ZVONKI_DEFAULT = [
    "1 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 08:30-09:15, 2 —É—Ä–æ–∫ 09:20-10:05",
    "2 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 10:15-11:00, 2 —É—Ä–æ–∫ 11:05-11:50",
    "3 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 12:40-13:25, 2 —É—Ä–æ–∫ 13:30-14:15",
    "4 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 14:25-15:10, 2 —É—Ä–æ–∫ 15:15-16:00",
    "5 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 16:05-17:35",
    "6 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 17:45-19:15"
]

ZVONKI_SATURDAY = [
    "1 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 08:30-09:15, 2 —É—Ä–æ–∫ 09:20-10:05",
    "2 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 10:15-11:00, 2 —É—Ä–æ–∫ 11:05-11:50",
    "3 –ø–∞—Ä–∞: 1 —É—Ä–æ–∫ 12:00-12:45, 2 —É—Ä–æ–∫ 12:50-13:35",
    "4 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 13:45-15:15",
    "5 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 15:25-16:55",
    "6 –ø–∞—Ä–∞: 1-2 —É—Ä–æ–∫ 17:05-18:50"
]

def get_zvonki(is_saturday: bool):
    return "\n".join(ZVONKI_SATURDAY if is_saturday else ZVONKI_DEFAULT)

# ======================
# –ö–Ω–æ–ø–∫–∏
# ======================
def main_menu(is_admin=False):
    buttons = [
        [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="menu_rasp")],
        [InlineKeyboardButton(text="‚è∞ –ó–≤–æ–Ω–∫–∏", callback_data="menu_zvonki")],
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton(text="‚öô –ê–¥–º–∏–Ω–∫–∞", callback_data="menu_admin")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ======================
# FSM –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
# ======================
class AddRaspState(StatesGroup):
    day = State()
    week_type = State()
    text = State()

class ClearRaspState(StatesGroup):
    day = State()

class SetChetState(StatesGroup):
    week_type = State()

# ======================
# –•–µ–ª–ø–µ—Ä –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# ======================
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
# - user: types.User ‚Äî –æ—Ç –∫–æ–≥–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–∞)
# - text: –æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä–æ–µ –≤—ã –æ–±—ã—á–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏ –≤ answer/edit_text)
# - message: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç types.Message -> –∏—Å–ø–æ–ª—å–∑—É–µ–º message.answer(...)
# - callback: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è callback -> –ø—ã—Ç–∞–µ–º—Å—è callback.message.edit_text(...), –∏–Ω–∞—á–µ callback.message.answer(...)
# - chat_id: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ),
#            –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º bot.send_message(chat_id=chat_id, ...)
async def greet_and_send(user: types.User, text: str, message: types.Message = None, callback: types.CallbackQuery = None, markup=None, chat_id: int | None = None):
    nickname = await get_nickname(pool, user.id)
    if nickname:
        greet = f"üëã –°–∞–ª–∞–º, {nickname}!\n\n"
    else:
        greet = "üëã –°–∞–ª–∞–º!\n\n"
    full_text = greet + text

    # callback edit / answer
    if callback:
        try:
            await callback.message.edit_text(full_text, reply_markup=markup)
        except Exception:
            # fallback: send a new message in the same chat as callback
            try:
                await callback.message.answer(full_text, reply_markup=markup)
            except Exception:
                # as last resort use bot.send_message
                await bot.send_message(chat_id=callback.message.chat.id, text=full_text, reply_markup=markup)
    # message.answer
    elif message:
        try:
            await message.answer(full_text, reply_markup=markup)
        except Exception:
            # fallback direct send
            await bot.send_message(chat_id=message.chat.id, text=full_text, reply_markup=markup)
    # direct chat_id (used when we deleted old message and want to send a fresh one)
    elif chat_id is not None:
        await bot.send_message(chat_id=chat_id, text=full_text, reply_markup=markup)
    else:
        # nothing else provided: try sending to user's private chat
        try:
            await bot.send_message(chat_id=user.id, text=full_text, reply_markup=markup)
        except Exception:
            # ignore silently
            pass

# ======================
# –•–µ–Ω–¥–ª–µ—Ä—ã
# ======================
@dp.message(F.text == "/–∞—Ä–∫–∞–¥–∏–π")
async def cmd_arkadiy(message: types.Message):
    is_private = message.chat.type == "private"
    is_admin = (message.from_user.id in ALLOWED_USERS) and is_private
    await greet_and_send(message.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", message=message, markup=main_menu(is_admin))

# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
@dp.callback_query(F.data.startswith("menu_"))
async def menu_handler(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data

    # ---------- —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π (1..6) ----------
    if action == "menu_rasp":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=day, callback_data=f"rasp_day_{i+1}")]
                for i, day in enumerate(DAYS)
            ] + [[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]]
        )
        await greet_and_send(callback.from_user, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", callback=callback, markup=kb)
        await callback.answer()

    # ---------- –∑–≤–æ–Ω–∫–∏: –±—É–¥–Ω–∏ / —Å—É–±–±–æ—Ç–∞ ----------
    elif action == "menu_zvonki":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ë—É–¥–Ω–∏–µ –¥–Ω–∏", callback_data="zvonki_weekday")],
            [InlineKeyboardButton(text="üìÖ –°—É–±–±–æ—Ç–∞", callback_data="zvonki_saturday")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ])
        await greet_and_send(callback.from_user, "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", callback=callback, markup=kb)
        await callback.answer()

    # ---------- –∞–¥–º–∏–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ –≤ –õ–°) ----------
    elif action == "menu_admin":
        if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
            await callback.answer("‚õî –ê–¥–º–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∞–¥–º–∏–Ω–∞–º", show_alert=True)
            return

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_add")],
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_clear")],
            [InlineKeyboardButton(text="üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ç–Ω–æ—Å—Ç—å", callback_data="admin_setchet")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ])
        await greet_and_send(callback.from_user, "‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", callback=callback, markup=kb)
        await callback.answer()

    # ---------- –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------
    elif action == "menu_back":
        # –æ—Ç–º–µ–Ω–∏–º FSM (–µ—Å–ª–∏ –±—ã–ª)
        try:
            await state.clear()
        except Exception:
            pass

        is_private = callback.message.chat.type == "private"
        is_admin = (callback.from_user.id in ALLOWED_USERS) and is_private

        # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–æ–∂–µ–º, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
        try:
            await callback.message.delete()
            # –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
            await greet_and_send(callback.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", chat_id=callback.message.chat.id, markup=main_menu(is_admin))
        except Exception:
            # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
            try:
                await greet_and_send(callback.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", callback=callback, markup=main_menu(is_admin))
            except Exception:
                await greet_and_send(callback.from_user, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", chat_id=callback.message.chat.id, markup=main_menu(is_admin))

        await callback.answer()

# ======================
# –í—ã–±–æ—Ä –¥–Ω—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä —á–µ—Ç–Ω–æ—Å—Ç–∏
# callback_data: rasp_day_{day}
# ======================
@dp.callback_query(F.data.startswith("rasp_day_"))
async def on_rasp_day(callback: types.CallbackQuery):
    # —Ñ–æ—Ä–º–∞—Ç callback.data = "rasp_day_{day}"
    parts = callback.data.split("_")
    try:
        day = int(parts[-1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è", show_alert=True)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–∞—è", callback_data=f"rasp_show_{day}_1")],
        [InlineKeyboardButton(text="2Ô∏è‚É£ –ß–µ—Ç–Ω–∞—è", callback_data=f"rasp_show_{day}_2")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu_rasp")]
    ])

    await greet_and_send(callback.from_user, f"üìÖ {DAYS[day-1]} ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", callback=callback, markup=kb)
    await callback.answer()

# ======================
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∏–∫–∞
# ======================
@dp.message(Command("setnick"))
async def cmd_setnick(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        # –æ—Ç–≤–µ—Ç–∏–º –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ‚Äî —Ç.–∫. —ç—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setnick <user_id> <–Ω–∏–∫–Ω–µ–π–º>")
            return
        user_id = int(parts[1])
        nickname = parts[2].strip()
        await set_nickname(pool, user_id, nickname)
        await message.answer(f"‚úÖ –ù–∏–∫–Ω–µ–π–º –¥–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {nickname}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ======================
# –ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: callback_data = rasp_show_{day}_{week}
# ======================
@dp.callback_query(F.data.startswith("rasp_show_"))
async def on_rasp_show(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    if len(parts) < 4:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    try:
        day = int(parts[2])
        week_type = int(parts[3])
    except Exception:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    text = await get_rasp_for_day(pool, DEFAULT_CHAT_ID, day, week_type)
    if not text:
        # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ callback.answer (–±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è) –∏ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        await callback.answer("‚Ñπ –ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)
        await greet_and_send(callback.from_user, "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback=callback)
    else:
        await greet_and_send(callback.from_user, format_rasp_message(day, week_type, text), callback=callback)
    await callback.answer()

# ======================
# –ó–≤–æ–Ω–∫–∏ (–±—É–¥–Ω–∏/—Å—É–±–±–æ—Ç–∞)
# ======================
@dp.callback_query(F.data.startswith("zvonki_"))
async def zvonki_handler(callback: types.CallbackQuery):
    action = callback.data

    if action == "zvonki_weekday":
        schedule = get_zvonki(is_saturday=False)
        await greet_and_send(callback.from_user, f"üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ (–±—É–¥–Ω–∏–µ –¥–Ω–∏):\n{schedule}", callback=callback)

    elif action == "zvonki_saturday":
        schedule = get_zvonki(is_saturday=True)
        await greet_and_send(callback.from_user, f"üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ (—Å—É–±–±–æ—Ç–∞):\n{schedule}", callback=callback)

    await callback.answer()

# ======================
# –ê–¥–º–∏–Ω–∫–∞ ‚Äî –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ –õ–°, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∂–µ)
# ======================
@dp.callback_query(F.data == "admin_add")
async def admin_add_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return
    await greet_and_send(callback.from_user, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (1-6):", callback=callback)
    await state.set_state(AddRaspState.day)
    await callback.answer()

@dp.message(AddRaspState.day)
async def add_rasp_day(message: types.Message, state: FSMContext):
    try:
        day = int(message.text)
        if not 1 <= day <= 6:
            raise ValueError
        await state.update_data(day=day)
        await greet_and_send(message.from_user, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ (0 - –ª—é–±–∞—è, 1 - –Ω–µ—á–µ—Ç–Ω–∞—è, 2 - —á–µ—Ç–Ω–∞—è):", message=message)
        await state.set_state(AddRaspState.week_type)
    except ValueError:
        await greet_and_send(message.from_user, "‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.", message=message)

@dp.message(AddRaspState.week_type)
async def add_rasp_week_type(message: types.Message, state: FSMContext):
    try:
        week_type = int(message.text)
        if week_type not in [0, 1, 2]:
            raise ValueError
        await state.update_data(week_type=week_type)
        await greet_and_send(message.from_user, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \\n –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤):", message=message)
        await state.set_state(AddRaspState.text)
    except ValueError:
        await greet_and_send(message.from_user, "‚ö† –í–≤–µ–¥–∏—Ç–µ 0, 1 –∏–ª–∏ 2.", message=message)

@dp.message(AddRaspState.text)
async def add_rasp_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = message.text.replace("\\n", "\n")
    await add_rasp(pool, DEFAULT_CHAT_ID, data["day"], data["week_type"], text)
    await greet_and_send(message.from_user, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", message=message)
    await state.clear()

# ======================
# –ê–¥–º–∏–Ω–∫–∞ ‚Äî –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
# ======================
@dp.callback_query(F.data == "admin_clear")
async def admin_clear_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return
    await greet_and_send(callback.from_user, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (1-6) –∏–ª–∏ 0 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö:", callback=callback)
    await state.set_state(ClearRaspState.day)
    await callback.answer()

@dp.message(ClearRaspState.day)
async def clear_rasp_day(message: types.Message, state: FSMContext):
    try:
        day = int(message.text)
        if day == 0:
            await delete_rasp(pool)
        elif 1 <= day <= 6:
            await delete_rasp(pool, day)
        else:
            raise ValueError
        await greet_and_send(message.from_user, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", message=message)
        await state.clear()
    except ValueError:
        await greet_and_send(message.from_user, "‚ö† –í–≤–µ–¥–∏—Ç–µ 0 –∏–ª–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.", message=message)

# ======================
# –ê–¥–º–∏–Ω–∫–∞ ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ç–Ω–æ—Å—Ç—å
# ======================
@dp.callback_query(F.data == "admin_setchet")
async def admin_setchet_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type != "private" or callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return
    await greet_and_send(callback.from_user, "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ç–Ω–æ—Å—Ç—å (1 - –Ω–µ—á–µ—Ç–Ω–∞—è, 2 - —á–µ—Ç–Ω–∞—è):", callback=callback)
    await state.set_state(SetChetState.week_type)
    await callback.answer()

@dp.message(SetChetState.week_type)
async def setchet_handler(message: types.Message, state: FSMContext):
    try:
        week_type = int(message.text)
        if week_type not in [1, 2]:
            raise ValueError
        await set_week_type(pool, message.chat.id, week_type)
        await greet_and_send(message.from_user, f"‚úÖ –ß–µ—Ç–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {week_type} ({'–Ω–µ—á–µ—Ç–Ω–∞—è' if week_type==1 else '—á–µ—Ç–Ω–∞—è'})", message=message)
        await state.clear()
    except ValueError:
        await greet_and_send(message.from_user, "‚ö† –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.", message=message)

# ======================
# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
# ======================
async def send_today_rasp():
    now = datetime.datetime.now(TZ)
    day = now.isoweekday()
    if day == 7:
        # –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî —É –Ω–∞—Å –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (1..6), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return
    week_number = now.isocalendar()[1]
    week_type = 1 if week_number % 2 else 2
    text = await get_rasp_for_day(pool, DEFAULT_CHAT_ID, day, week_type)
    if text:
        msg = format_rasp_message(day, week_type, text)
        # –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ —á–∞—Ç ‚Äî –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–æ–±—ã—á–Ω–æ —ç—Ç–æ –æ–±—â–∏–π –∫–∞–Ω–∞–ª)
        await bot.send_message(DEFAULT_CHAT_ID, msg)

scheduler.add_job(send_today_rasp, CronTrigger(hour=1, minute=0))
scheduler.add_job(send_today_rasp, CronTrigger(hour=14, minute=0))

# ======================
# Main
# ======================
async def main():
    global pool
    pool = await get_pool()
    await init_db(pool)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
